/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/anime.min.js":
/*!********************************!*\
  !*** ./assets/js/anime.min.js ***!
  \********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 2017 Julian Garnier
 Released under the MIT license
*/
var $jscomp$this = this;
(function (u, r) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (r),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" === (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = r() : u.anime = r();
})(this, function () {
  function u(a) {
    if (!g.col(a)) try {
      return document.querySelectorAll(a);
    } catch (b) {}
  }function r(a) {
    return a.reduce(function (a, c) {
      return a.concat(g.arr(c) ? r(c) : c);
    }, []);
  }function v(a) {
    if (g.arr(a)) return a;g.str(a) && (a = u(a) || a);return a instanceof NodeList || a instanceof HTMLCollection ? [].slice.call(a) : [a];
  }function E(a, b) {
    return a.some(function (a) {
      return a === b;
    });
  }
  function z(a) {
    var b = {},
        c;for (c in a) {
      b[c] = a[c];
    }return b;
  }function F(a, b) {
    var c = z(a),
        d;for (d in a) {
      c[d] = b.hasOwnProperty(d) ? b[d] : a[d];
    }return c;
  }function A(a, b) {
    var c = z(a),
        d;for (d in b) {
      c[d] = g.und(a[d]) ? b[d] : a[d];
    }return c;
  }function R(a) {
    a = a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function (a, b, c, h) {
      return b + b + c + c + h + h;
    });var b = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);a = parseInt(b[1], 16);var c = parseInt(b[2], 16),
        b = parseInt(b[3], 16);return "rgb(" + a + "," + c + "," + b + ")";
  }function S(a) {
    function b(a, b, c) {
      0 > c && (c += 1);1 < c && --c;return c < 1 / 6 ? a + 6 * (b - a) * c : .5 > c ? b : c < 2 / 3 ? a + (b - a) * (2 / 3 - c) * 6 : a;
    }var c = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(a);a = parseInt(c[1]) / 360;var d = parseInt(c[2]) / 100,
        c = parseInt(c[3]) / 100;if (0 == d) d = c = a = c;else {
      var e = .5 > c ? c * (1 + d) : c + d - c * d,
          k = 2 * c - e,
          d = b(k, e, a + 1 / 3),
          c = b(k, e, a);a = b(k, e, a - 1 / 3);
    }return "rgb(" + 255 * d + "," + 255 * c + "," + 255 * a + ")";
  }function w(a) {
    if (a = /([\+\-]?[0-9#\.]+)(%|px|pt|em|rem|in|cm|mm|ex|pc|vw|vh|deg|rad|turn)?/.exec(a)) return a[2];
  }function T(a) {
    if (-1 < a.indexOf("translate")) return "px";
    if (-1 < a.indexOf("rotate") || -1 < a.indexOf("skew")) return "deg";
  }function G(a, b) {
    return g.fnc(a) ? a(b.target, b.id, b.total) : a;
  }function B(a, b) {
    if (b in a.style) return getComputedStyle(a).getPropertyValue(b.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()) || "0";
  }function H(a, b) {
    if (g.dom(a) && E(U, b)) return "transform";if (g.dom(a) && (a.getAttribute(b) || g.svg(a) && a[b])) return "attribute";if (g.dom(a) && "transform" !== b && B(a, b)) return "css";if (null != a[b]) return "object";
  }function V(a, b) {
    var c = T(b),
        c = -1 < b.indexOf("scale") ? 1 : 0 + c;a = a.style.transform;if (!a) return c;for (var d = [], e = [], k = [], h = /(\w+)\((.+?)\)/g; d = h.exec(a);) {
      e.push(d[1]), k.push(d[2]);
    }a = k.filter(function (a, c) {
      return e[c] === b;
    });return a.length ? a[0] : c;
  }function I(a, b) {
    switch (H(a, b)) {case "transform":
        return V(a, b);case "css":
        return B(a, b);case "attribute":
        return a.getAttribute(b);}return a[b] || 0;
  }function J(a, b) {
    var c = /^(\*=|\+=|-=)/.exec(a);if (!c) return a;b = parseFloat(b);a = parseFloat(a.replace(c[0], ""));switch (c[0][0]) {case "+":
        return b + a;case "-":
        return b - a;case "*":
        return b * a;}
  }function C(a) {
    return g.obj(a) && a.hasOwnProperty("totalLength");
  }function W(a, b) {
    function c(c) {
      c = void 0 === c ? 0 : c;return a.el.getPointAtLength(1 <= b + c ? b + c : 0);
    }var d = c(),
        e = c(-1),
        k = c(1);switch (a.property) {case "x":
        return d.x;case "y":
        return d.y;case "angle":
        return 180 * Math.atan2(k.y - e.y, k.x - e.x) / Math.PI;}
  }function K(a, b) {
    var c = /-?\d*\.?\d+/g;a = C(a) ? a.totalLength : a;if (g.col(a)) b = g.rgb(a) ? a : g.hex(a) ? R(a) : g.hsl(a) ? S(a) : void 0;else {
      var d = w(a);a = d ? a.substr(0, a.length - d.length) : a;b = b ? a + b : a;
    }b += "";return { original: b,
      numbers: b.match(c) ? b.match(c).map(Number) : [0], strings: b.split(c) };
  }function X(a, b) {
    return b.reduce(function (b, d, e) {
      return b + a[e - 1] + d;
    });
  }function L(a) {
    return (a ? r(g.arr(a) ? a.map(v) : v(a)) : []).filter(function (a, c, d) {
      return d.indexOf(a) === c;
    });
  }function Y(a) {
    var b = L(a);return b.map(function (a, d) {
      return { target: a, id: d, total: b.length };
    });
  }function Z(a, b) {
    var c = z(b);if (g.arr(a)) {
      var d = a.length;2 !== d || g.obj(a[0]) ? g.fnc(b.duration) || (c.duration = b.duration / d) : a = { value: a };
    }return v(a).map(function (a, c) {
      c = c ? 0 : b.delay;
      a = g.obj(a) && !C(a) ? a : { value: a };g.und(a.delay) && (a.delay = c);return a;
    }).map(function (a) {
      return A(a, c);
    });
  }function aa(a, b) {
    var c = {},
        d;for (d in a) {
      var e = G(a[d], b);g.arr(e) && (e = e.map(function (a) {
        return G(a, b);
      }), 1 === e.length && (e = e[0]));c[d] = e;
    }c.duration = parseFloat(c.duration);c.delay = parseFloat(c.delay);return c;
  }function ba(a) {
    return g.arr(a) ? x.apply(this, a) : M[a];
  }function ca(a, b) {
    var c;return a.tweens.map(function (d) {
      d = aa(d, b);var e = d.value,
          k = I(b.target, a.name),
          h = c ? c.to.original : k,
          h = g.arr(e) ? e[0] : h,
          n = J(g.arr(e) ? e[1] : e, h),
          k = w(n) || w(h) || w(k);d.isPath = C(e);d.from = K(h, k);d.to = K(n, k);d.start = c ? c.end : a.offset;d.end = d.start + d.delay + d.duration;d.easing = ba(d.easing);d.elasticity = (1E3 - Math.min(Math.max(d.elasticity, 1), 999)) / 1E3;g.col(d.from.original) && (d.round = 1);return c = d;
    });
  }function da(a, b) {
    return r(a.map(function (a) {
      return b.map(function (b) {
        var c = H(a.target, b.name);if (c) {
          var d = ca(b, a);b = { type: c, property: b.name, animatable: a, tweens: d, duration: d[d.length - 1].end, delay: d[0].delay };
        } else b = void 0;return b;
      });
    })).filter(function (a) {
      return !g.und(a);
    });
  }
  function N(a, b, c) {
    var d = "delay" === a ? Math.min : Math.max;return b.length ? d.apply(Math, b.map(function (b) {
      return b[a];
    })) : c[a];
  }function ea(a) {
    var b = F(fa, a),
        c = F(ga, a),
        d = Y(a.targets),
        e = [],
        g = A(b, c),
        h;for (h in a) {
      g.hasOwnProperty(h) || "targets" === h || e.push({ name: h, offset: g.offset, tweens: Z(a[h], c) });
    }a = da(d, e);return A(b, { animatables: d, animations: a, duration: N("duration", a, c), delay: N("delay", a, c) });
  }function m(a) {
    function b() {
      return window.Promise && new Promise(function (a) {
        return P = a;
      });
    }function c(a) {
      return f.reversed ? f.duration - a : a;
    }function d(a) {
      for (var b = 0, c = {}, d = f.animations, e = {}; b < d.length;) {
        var g = d[b],
            h = g.animatable,
            n = g.tweens;e.tween = n.filter(function (b) {
          return a < b.end;
        })[0] || n[n.length - 1];e.isPath$0 = e.tween.isPath;e.round = e.tween.round;e.eased = e.tween.easing(Math.min(Math.max(a - e.tween.start - e.tween.delay, 0), e.tween.duration) / e.tween.duration, e.tween.elasticity);n = X(e.tween.to.numbers.map(function (a) {
          return function (b, c) {
            c = a.isPath$0 ? 0 : a.tween.from.numbers[c];b = c + a.eased * (b - c);a.isPath$0 && (b = W(a.tween.value, b));a.round && (b = Math.round(b * a.round) / a.round);return b;
          };
        }(e)), e.tween.to.strings);ha[g.type](h.target, g.property, n, c, h.id);g.currentValue = n;b++;e = { isPath$0: e.isPath$0, tween: e.tween, eased: e.eased, round: e.round };
      }if (c) for (var k in c) {
        D || (D = B(document.body, "transform") ? "transform" : "-webkit-transform"), f.animatables[k].target.style[D] = c[k].join(" ");
      }f.currentTime = a;f.progress = a / f.duration * 100;
    }function e(a) {
      if (f[a]) f[a](f);
    }function g() {
      f.remaining && !0 !== f.remaining && f.remaining--;
    }function h(a) {
      var h = f.duration,
          k = f.offset,
          m = f.delay,
          O = f.currentTime,
          p = f.reversed,
          q = c(a),
          q = Math.min(Math.max(q, 0), h);q > k && q < h ? (d(q), !f.began && q >= m && (f.began = !0, e("begin")), e("run")) : (q <= k && 0 !== O && (d(0), p && g()), q >= h && O !== h && (d(h), p || g()));a >= h && (f.remaining ? (t = n, "alternate" === f.direction && (f.reversed = !f.reversed)) : (f.pause(), P(), Q = b(), f.completed || (f.completed = !0, e("complete"))), l = 0);if (f.children) for (a = f.children, h = 0; h < a.length; h++) {
        a[h].seek(q);
      }e("update");
    }a = void 0 === a ? {} : a;var n,
        t,
        l = 0,
        P = null,
        Q = b(),
        f = ea(a);f.reset = function () {
      var a = f.direction,
          b = f.loop;f.currentTime = 0;f.progress = 0;f.paused = !0;f.began = !1;f.completed = !1;f.reversed = "reverse" === a;f.remaining = "alternate" === a && 1 === b ? 2 : b;
    };f.tick = function (a) {
      n = a;t || (t = n);h((l + n - t) * m.speed);
    };f.seek = function (a) {
      h(c(a));
    };f.pause = function () {
      var a = p.indexOf(f);-1 < a && p.splice(a, 1);f.paused = !0;
    };f.play = function () {
      f.paused && (f.paused = !1, t = 0, l = f.completed ? 0 : c(f.currentTime), p.push(f), y || ia());
    };f.reverse = function () {
      f.reversed = !f.reversed;t = 0;l = c(f.currentTime);
    };f.restart = function () {
      f.pause();
      f.reset();f.play();
    };f.finished = Q;f.reset();f.autoplay && f.play();return f;
  }var fa = { update: void 0, begin: void 0, run: void 0, complete: void 0, loop: 1, direction: "normal", autoplay: !0, offset: 0 },
      ga = { duration: 1E3, delay: 0, easing: "easeOutElastic", elasticity: 500, round: 0 },
      U = "translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY".split(" "),
      D,
      g = { arr: function arr(a) {
      return Array.isArray(a);
    }, obj: function obj(a) {
      return -1 < Object.prototype.toString.call(a).indexOf("Object");
    }, svg: function svg(a) {
      return a instanceof SVGElement;
    }, dom: function dom(a) {
      return a.nodeType || g.svg(a);
    }, str: function str(a) {
      return "string" === typeof a;
    }, fnc: function fnc(a) {
      return "function" === typeof a;
    }, und: function und(a) {
      return "undefined" === typeof a;
    }, hex: function hex(a) {
      return (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)
      );
    }, rgb: function rgb(a) {
      return (/^rgb/.test(a)
      );
    }, hsl: function hsl(a) {
      return (/^hsl/.test(a)
      );
    }, col: function col(a) {
      return g.hex(a) || g.rgb(a) || g.hsl(a);
    } },
      x = function () {
    function a(a, c, d) {
      return (((1 - 3 * d + 3 * c) * a + (3 * d - 6 * c)) * a + 3 * c) * a;
    }return function (b, c, d, e) {
      if (0 <= b && 1 >= b && 0 <= d && 1 >= d) {
        var g = new Float32Array(11);if (b !== c || d !== e) for (var h = 0; 11 > h; ++h) {
          g[h] = a(.1 * h, b, d);
        }return function (h) {
          if (b === c && d === e) return h;if (0 === h) return 0;if (1 === h) return 1;for (var k = 0, l = 1; 10 !== l && g[l] <= h; ++l) {
            k += .1;
          }--l;var l = k + (h - g[l]) / (g[l + 1] - g[l]) * .1,
              n = 3 * (1 - 3 * d + 3 * b) * l * l + 2 * (3 * d - 6 * b) * l + 3 * b;if (.001 <= n) {
            for (k = 0; 4 > k; ++k) {
              n = 3 * (1 - 3 * d + 3 * b) * l * l + 2 * (3 * d - 6 * b) * l + 3 * b;if (0 === n) break;var m = a(l, b, d) - h,
                  l = l - m / n;
            }h = l;
          } else if (0 === n) h = l;else {
            var l = k,
                k = k + .1,
                f = 0;do {
              m = l + (k - l) / 2, n = a(m, b, d) - h, 0 < n ? k = m : l = m;
            } while (1e-7 < Math.abs(n) && 10 > ++f);h = m;
          }return a(h, c, e);
        };
      }
    };
  }(),
      M = function () {
    function a(a, b) {
      return 0 === a || 1 === a ? a : -Math.pow(2, 10 * (a - 1)) * Math.sin(2 * (a - 1 - b / (2 * Math.PI) * Math.asin(1)) * Math.PI / b);
    }var b = "Quad Cubic Quart Quint Sine Expo Circ Back Elastic".split(" "),
        c = { In: [[.55, .085, .68, .53], [.55, .055, .675, .19], [.895, .03, .685, .22], [.755, .05, .855, .06], [.47, 0, .745, .715], [.95, .05, .795, .035], [.6, .04, .98, .335], [.6, -.28, .735, .045], a], Out: [[.25, .46, .45, .94], [.215, .61, .355, 1], [.165, .84, .44, 1], [.23, 1, .32, 1], [.39, .575, .565, 1], [.19, 1, .22, 1], [.075, .82, .165, 1], [.175, .885, .32, 1.275], function (b, c) {
        return 1 - a(1 - b, c);
      }], InOut: [[.455, .03, .515, .955], [.645, .045, .355, 1], [.77, 0, .175, 1], [.86, 0, .07, 1], [.445, .05, .55, .95], [1, 0, 0, 1], [.785, .135, .15, .86], [.68, -.55, .265, 1.55], function (b, c) {
        return .5 > b ? a(2 * b, c) / 2 : 1 - a(-2 * b + 2, c) / 2;
      }] },
        d = { linear: x(.25, .25, .75, .75) },
        e = {},
        k;for (k in c) {
      e.type = k, c[e.type].forEach(function (a) {
        return function (c, e) {
          d["ease" + a.type + b[e]] = g.fnc(c) ? c : x.apply($jscomp$this, c);
        };
      }(e)), e = { type: e.type };
    }return d;
  }(),
      ha = { css: function css(a, b, c) {
      return a.style[b] = c;
    }, attribute: function attribute(a, b, c) {
      return a.setAttribute(b, c);
    }, object: function object(a, b, c) {
      return a[b] = c;
    }, transform: function transform(a, b, c, d, e) {
      d[e] || (d[e] = []);d[e].push(b + "(" + c + ")");
    } },
      p = [],
      y = 0,
      ia = function () {
    function a() {
      y = requestAnimationFrame(b);
    }function b(b) {
      var c = p.length;if (c) {
        for (var e = 0; e < c;) {
          p[e] && p[e].tick(b), e++;
        }a();
      } else cancelAnimationFrame(y), y = 0;
    }return a;
  }();m.version = "2.0.1";m.speed = 1;m.running = p;m.remove = function (a) {
    a = L(a);for (var b = p.length - 1; 0 <= b; b--) {
      for (var c = p[b], d = c.animations, e = d.length - 1; 0 <= e; e--) {
        E(a, d[e].animatable.target) && (d.splice(e, 1), d.length || c.pause());
      }
    }
  };m.getValue = I;m.path = function (a, b) {
    var c = g.str(a) ? u(a)[0] : a,
        d = b || 100;return function (a) {
      return { el: c, property: a, totalLength: c.getTotalLength() * (d / 100) };
    };
  };m.setDashoffset = function (a) {
    var b = a.getTotalLength();a.setAttribute("stroke-dasharray", b);return b;
  };m.bezier = x;m.easings = M;m.timeline = function (a) {
    var b = m(a);b.duration = 0;b.children = [];b.add = function (a) {
      v(a).forEach(function (a) {
        var c = a.offset,
            d = b.duration;a.autoplay = !1;a.offset = g.und(c) ? d : J(c, d);a = m(a);a.duration > d && (b.duration = a.duration);b.children.push(a);
      });return b;
    };return b;
  };m.random = function (a, b) {
    return Math.floor(Math.random() * (b - a + 1)) + a;
  };return m;
});

/***/ }),

/***/ "./assets/js/charming.min.js":
/*!***********************************!*\
  !*** ./assets/js/charming.min.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

!function (e) {
   false ? this.charming = e : module.exports = e;
}(function (e, n) {
  "use strict";
  n = n || {};var t = n.tagName || "span",
      o = null != n.classPrefix ? n.classPrefix : "char",
      r = 1,
      a = function a(e) {
    for (var n = e.parentNode, a = e.nodeValue, c = a.length, l = -1; ++l < c;) {
      var d = document.createElement(t);o && (d.className = o + r, r++), d.appendChild(document.createTextNode(a[l])), n.insertBefore(d, e);
    }n.removeChild(e);
  };return function c(e) {
    for (var n = [].slice.call(e.childNodes), t = n.length, o = -1; ++o < t;) {
      c(n[o]);
    }e.nodeType === Node.TEXT_NODE && a(e);
  }(e), e;
});

/***/ }),

/***/ "./assets/js/common.js":
/*!*****************************!*\
  !*** ./assets/js/common.js ***!
  \*****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// require jQuery normally
var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

// create global $ and jQuery variables
global.$ = global.jQuery = $;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./assets/js/header-anime.js":
/*!***********************************!*\
  !*** ./assets/js/header-anime.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
/*!
 * classie - class helper functions
 * from bonzo https://github.com/ded/bonzo
 * 
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true */
/*global define: false */

(function (window) {

  'use strict';

  // class helper functions from bonzo https://github.com/ded/bonzo

  function classReg(className) {
    return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
  }

  // classList support for class management
  // altho to be fair, the api sucks because it won't accept multiple classes at once
  var hasClass, addClass, removeClass;

  if ('classList' in document.documentElement) {
    hasClass = function hasClass(elem, c) {
      return elem.classList.contains(c);
    };
    addClass = function addClass(elem, c) {
      elem.classList.add(c);
    };
    removeClass = function removeClass(elem, c) {
      elem.classList.remove(c);
    };
  } else {
    hasClass = function hasClass(elem, c) {
      return classReg(c).test(elem.className);
    };
    addClass = function addClass(elem, c) {
      if (!hasClass(elem, c)) {
        elem.className = elem.className + ' ' + c;
      }
    };
    removeClass = function removeClass(elem, c) {
      elem.className = elem.className.replace(classReg(c), ' ');
    };
  }

  function toggleClass(elem, c) {
    var fn = hasClass(elem, c) ? removeClass : addClass;
    fn(elem, c);
  }

  var classie = {
    // full names
    hasClass: hasClass,
    addClass: addClass,
    removeClass: removeClass,
    toggleClass: toggleClass,
    // short names
    has: hasClass,
    add: addClass,
    remove: removeClass,
    toggle: toggleClass
  };

  // transport
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (classie),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    // browser global
    window.classie = classie;
  }
})(window);

/**
 * cbpAnimatedHeader.min.js v1.0.0
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2013, Codrops
 * http://www.codrops.com
 */
var cbpAnimatedHeader = function () {
  var b = document.documentElement,
      g = document.querySelector(".cbp-af-header"),
      e = false,
      a = 100;function f() {
    window.addEventListener("scroll", function (h) {
      if (!e) {
        e = true;setTimeout(d, 250);
      }
    }, false);
  }function d() {
    var h = c();if (h >= a) {
      classie.add(g, "cbp-af-header-shrink");
    } else {
      classie.remove(g, "cbp-af-header-shrink");
    }e = false;
  }function c() {
    return window.pageYOffset || b.scrollTop;
  }f();
}();

/***/ }),

/***/ "./assets/js/jquery-2.1.1.js":
/*!***********************************!*\
  !*** ./assets/js/jquery-2.1.1.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! jQuery v2.1.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function (a, b) {
  "object" == ( false ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
  } : b(a);
}("undefined" != typeof window ? window : this, function (a, b) {
  var c = [],
      d = c.slice,
      e = c.concat,
      f = c.push,
      g = c.indexOf,
      h = {},
      i = h.toString,
      j = h.hasOwnProperty,
      k = {},
      l = a.document,
      m = "2.1.1",
      n = function n(a, b) {
    return new n.fn.init(a, b);
  },
      o = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      p = /^-ms-/,
      q = /-([\da-z])/gi,
      r = function r(a, b) {
    return b.toUpperCase();
  };n.fn = n.prototype = { jquery: m, constructor: n, selector: "", length: 0, toArray: function toArray() {
      return d.call(this);
    }, get: function get(a) {
      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
    }, pushStack: function pushStack(a) {
      var b = n.merge(this.constructor(), a);return b.prevObject = this, b.context = this.context, b;
    }, each: function each(a, b) {
      return n.each(this, a, b);
    }, map: function map(a) {
      return this.pushStack(n.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    }, slice: function slice() {
      return this.pushStack(d.apply(this, arguments));
    }, first: function first() {
      return this.eq(0);
    }, last: function last() {
      return this.eq(-1);
    }, eq: function eq(a) {
      var b = this.length,
          c = +a + (0 > a ? b : 0);return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
    }, end: function end() {
      return this.prevObject || this.constructor(null);
    }, push: f, sort: c.sort, splice: c.splice }, n.extend = n.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || n.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {
      if (null != (a = arguments[h])) for (b in a) {
        c = g[b], d = a[b], g !== d && (j && d && (n.isPlainObject(d) || (e = n.isArray(d))) ? (e ? (e = !1, f = c && n.isArray(c) ? c : []) : f = c && n.isPlainObject(c) ? c : {}, g[b] = n.extend(j, f, d)) : void 0 !== d && (g[b] = d));
      }
    }return g;
  }, n.extend({ expando: "jQuery" + (m + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {
      throw new Error(a);
    }, noop: function noop() {}, isFunction: function isFunction(a) {
      return "function" === n.type(a);
    }, isArray: Array.isArray, isWindow: function isWindow(a) {
      return null != a && a === a.window;
    }, isNumeric: function isNumeric(a) {
      return !n.isArray(a) && a - parseFloat(a) >= 0;
    }, isPlainObject: function isPlainObject(a) {
      return "object" !== n.type(a) || a.nodeType || n.isWindow(a) ? !1 : a.constructor && !j.call(a.constructor.prototype, "isPrototypeOf") ? !1 : !0;
    }, isEmptyObject: function isEmptyObject(a) {
      var b;for (b in a) {
        return !1;
      }return !0;
    }, type: function type(a) {
      return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? h[i.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);
    }, globalEval: function globalEval(a) {
      var b,
          c = eval;a = n.trim(a), a && (1 === a.indexOf("use strict") ? (b = l.createElement("script"), b.text = a, l.head.appendChild(b).parentNode.removeChild(b)) : c(a));
    }, camelCase: function camelCase(a) {
      return a.replace(p, "ms-").replace(q, r);
    }, nodeName: function nodeName(a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    }, each: function each(a, b, c) {
      var d,
          e = 0,
          f = a.length,
          g = s(a);if (c) {
        if (g) {
          for (; f > e; e++) {
            if (d = b.apply(a[e], c), d === !1) break;
          }
        } else for (e in a) {
          if (d = b.apply(a[e], c), d === !1) break;
        }
      } else if (g) {
        for (; f > e; e++) {
          if (d = b.call(a[e], e, a[e]), d === !1) break;
        }
      } else for (e in a) {
        if (d = b.call(a[e], e, a[e]), d === !1) break;
      }return a;
    }, trim: function trim(a) {
      return null == a ? "" : (a + "").replace(o, "");
    }, makeArray: function makeArray(a, b) {
      var c = b || [];return null != a && (s(Object(a)) ? n.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
    }, inArray: function inArray(a, b, c) {
      return null == b ? -1 : g.call(b, a, c);
    }, merge: function merge(a, b) {
      for (var c = +b.length, d = 0, e = a.length; c > d; d++) {
        a[e++] = b[d];
      }return a.length = e, a;
    }, grep: function grep(a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
        d = !b(a[f], f), d !== h && e.push(a[f]);
      }return e;
    }, map: function map(a, b, c) {
      var d,
          f = 0,
          g = a.length,
          h = s(a),
          i = [];if (h) for (; g > f; f++) {
        d = b(a[f], f, c), null != d && i.push(d);
      } else for (f in a) {
        d = b(a[f], f, c), null != d && i.push(d);
      }return e.apply([], i);
    }, guid: 1, proxy: function proxy(a, b) {
      var c, e, f;return "string" == typeof b && (c = a[b], b = a, a = c), n.isFunction(a) ? (e = d.call(arguments, 2), f = function f() {
        return a.apply(b || this, e.concat(d.call(arguments)));
      }, f.guid = a.guid = a.guid || n.guid++, f) : void 0;
    }, now: Date.now, support: k }), n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
    h["[object " + b + "]"] = b.toLowerCase();
  });function s(a) {
    var b = a.length,
        c = n.type(a);return "function" === c || n.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
  }var t = function (a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + -new Date(),
        v = a.document,
        w = 0,
        x = 0,
        y = gb(),
        z = gb(),
        A = gb(),
        B = function B(a, b) {
      return a === b && (l = !0), 0;
    },
        C = "undefined",
        D = 1 << 31,
        E = {}.hasOwnProperty,
        F = [],
        G = F.pop,
        H = F.push,
        I = F.push,
        J = F.slice,
        K = F.indexOf || function (a) {
      for (var b = 0, c = this.length; c > b; b++) {
        if (this[b] === a) return b;
      }return -1;
    },
        L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        M = "[\\x20\\t\\r\\n\\f]",
        N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
        O = N.replace("w", "w#"),
        P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]",
        Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)",
        R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
        S = new RegExp("^" + M + "*," + M + "*"),
        T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
        U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
        V = new RegExp(Q),
        W = new RegExp("^" + O + "$"),
        X = { ID: new RegExp("^#(" + N + ")"), CLASS: new RegExp("^\\.(" + N + ")"), TAG: new RegExp("^(" + N.replace("w", "w*") + ")"), ATTR: new RegExp("^" + P), PSEUDO: new RegExp("^" + Q), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"), bool: new RegExp("^(?:" + L + ")$", "i"), needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i") },
        Y = /^(?:input|select|textarea|button)$/i,
        Z = /^h\d$/i,
        $ = /^[^{]+\{\s*\[native \w/,
        _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        ab = /[+~]/,
        bb = /'|\\/g,
        cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
        db = function db(a, b, c) {
      var d = "0x" + b - 65536;return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
    };try {
      I.apply(F = J.call(v.childNodes), v.childNodes), F[v.childNodes.length].nodeType;
    } catch (eb) {
      I = { apply: F.length ? function (a, b) {
          H.apply(a, J.call(b));
        } : function (a, b) {
          var c = a.length,
              d = 0;while (a[c++] = b[d++]) {}a.length = c - 1;
        } };
    }function fb(a, b, d, e) {
      var f, h, j, k, l, o, r, s, w, x;if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], !a || "string" != typeof a) return d;if (1 !== (k = b.nodeType) && 9 !== k) return [];if (p && !e) {
        if (f = _.exec(a)) if (j = f[1]) {
          if (9 === k) {
            if (h = b.getElementById(j), !h || !h.parentNode) return d;if (h.id === j) return d.push(h), d;
          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
        } else {
          if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;
        }if (c.qsa && (!q || !q.test(a))) {
          if (s = r = u, w = b, x = 9 === k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
            o = g(a), (r = b.getAttribute("id")) ? s = r.replace(bb, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;while (l--) {
              o[l] = s + qb(o[l]);
            }w = ab.test(a) && ob(b.parentNode) || b, x = o.join(",");
          }if (x) try {
            return I.apply(d, w.querySelectorAll(x)), d;
          } catch (y) {} finally {
            r || b.removeAttribute("id");
          }
        }
      }return i(a.replace(R, "$1"), b, d, e);
    }function gb() {
      var a = [];function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }return b;
    }function hb(a) {
      return a[u] = !0, a;
    }function ib(a) {
      var b = n.createElement("div");try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }function jb(a, b) {
      var c = a.split("|"),
          e = a.length;while (e--) {
        d.attrHandle[c[e]] = b;
      }
    }function kb(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);if (d) return d;if (c) while (c = c.nextSibling) {
        if (c === b) return -1;
      }return a ? 1 : -1;
    }function lb(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
      };
    }function mb(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
      };
    }function nb(a) {
      return hb(function (b) {
        return b = +b, hb(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;while (g--) {
            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
          }
        });
      });
    }function ob(a) {
      return a && _typeof(a.getElementsByTagName) !== C && a;
    }c = fb.support = {}, f = fb.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;return b ? "HTML" !== b.nodeName : !1;
    }, m = fb.setDocument = function (a) {
      var b,
          e = a ? a.ownerDocument || a : v,
          g = e.defaultView;return e !== n && 9 === e.nodeType && e.documentElement ? (n = e, o = e.documentElement, p = !f(e), g && g !== g.top && (g.addEventListener ? g.addEventListener("unload", function () {
        m();
      }, !1) : g.attachEvent && g.attachEvent("onunload", function () {
        m();
      })), c.attributes = ib(function (a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ib(function (a) {
        return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = $.test(e.getElementsByClassName) && ib(function (a) {
        return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i", 2 === a.getElementsByClassName("i").length;
      }), c.getById = ib(function (a) {
        return o.appendChild(a).id = u, !e.getElementsByName || !e.getElementsByName(u).length;
      }), c.getById ? (d.find.ID = function (a, b) {
        if (_typeof(b.getElementById) !== C && p) {
          var c = b.getElementById(a);return c && c.parentNode ? [c] : [];
        }
      }, d.filter.ID = function (a) {
        var b = a.replace(cb, db);return function (a) {
          return a.getAttribute("id") === b;
        };
      }) : (delete d.find.ID, d.filter.ID = function (a) {
        var b = a.replace(cb, db);return function (a) {
          var c = _typeof(a.getAttributeNode) !== C && a.getAttributeNode("id");return c && c.value === b;
        };
      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
        return _typeof(b.getElementsByTagName) !== C ? b.getElementsByTagName(a) : void 0;
      } : function (a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);if ("*" === a) {
          while (c = f[e++]) {
            1 === c.nodeType && d.push(c);
          }return d;
        }return f;
      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
        return _typeof(b.getElementsByClassName) !== C && p ? b.getElementsByClassName(a) : void 0;
      }, r = [], q = [], (c.qsa = $.test(e.querySelectorAll)) && (ib(function (a) {
        a.innerHTML = "<select msallowclip=''><option selected=''></option></select>", a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"), a.querySelectorAll(":checked").length || q.push(":checked");
      }), ib(function (a) {
        var b = e.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ib(function (a) {
        c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", Q);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function (a, b) {
        if (b) while (b = b.parentNode) {
          if (b === a) return !0;
        }return !1;
      }, B = b ? function (a, b) {
        if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === e || a.ownerDocument === v && t(v, a) ? -1 : b === e || b.ownerDocument === v && t(v, b) ? 1 : k ? K.call(k, a) - K.call(k, b) : 0 : 4 & d ? -1 : 1);
      } : function (a, b) {
        if (a === b) return l = !0, 0;var c,
            d = 0,
            f = a.parentNode,
            g = b.parentNode,
            h = [a],
            i = [b];if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;if (f === g) return kb(a, b);c = a;while (c = c.parentNode) {
          h.unshift(c);
        }c = b;while (c = c.parentNode) {
          i.unshift(c);
        }while (h[d] === i[d]) {
          d++;
        }return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
      }, e) : n;
    }, fb.matches = function (a, b) {
      return fb(a, null, null, b);
    }, fb.matchesSelector = function (a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
        var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
      } catch (e) {}return fb(b, n, null, [a]).length > 0;
    }, fb.contains = function (a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, fb.attr = function (a, b) {
      (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
          f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, fb.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, fb.uniqueSort = function (a) {
      var b,
          d = [],
          e = 0,
          f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++]) {
          b === a[f] && (e = d.push(f));
        }while (e--) {
          a.splice(d[e], 1);
        }
      }return k = null, a;
    }, e = fb.getText = function (a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {
            c += e(a);
          }
        } else if (3 === f || 4 === f) return a.nodeValue;
      } else while (b = a[d++]) {
        c += e(b);
      }return c;
    }, d = fb.selectors = { cacheLength: 50, createPseudo: hb, match: X, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {
          return a[1] = a[1].replace(cb, db), a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        }, CHILD: function CHILD(a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && fb.error(a[0]), a;
        }, PSEUDO: function PSEUDO(a) {
          var b,
              c = !a[6] && a[2];return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        } }, filter: { TAG: function TAG(a) {
          var b = a.replace(cb, db).toLowerCase();return "*" === a ? function () {
            return !0;
          } : function (a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        }, CLASS: function CLASS(a) {
          var b = y[a + " "];return b || (b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) && y(a, function (a) {
            return b.test("string" == typeof a.className && a.className || _typeof(a.getAttribute) !== C && a.getAttribute("class") || "");
          });
        }, ATTR: function ATTR(a, b, c) {
          return function (d) {
            var e = fb.attr(d, a);return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;
          };
        }, CHILD: function CHILD(a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
            return !!a.parentNode;
          } : function (b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h;if (q) {
              if (f) {
                while (p) {
                  l = b;while (l = l[p]) {
                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                  }o = p = "only" === a && !o && "nextSibling";
                }return !0;
              }if (o = [g ? q.firstChild : q.lastChild], g && s) {
                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                  if (1 === l.nodeType && ++m && l === b) {
                    k[a] = [w, n, m];break;
                  }
                }
              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
              }return m -= e, m === d || m % d === 0 && m / d >= 0;
            }
          };
        }, PSEUDO: function PSEUDO(a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? hb(function (a, c) {
            var d,
                f = e(a, b),
                g = f.length;while (g--) {
              d = K.call(a, f[g]), a[d] = !(c[d] = f[g]);
            }
          }) : function (a) {
            return e(a, 0, c);
          }) : e;
        } }, pseudos: { not: hb(function (a) {
          var b = [],
              c = [],
              d = h(a.replace(R, "$1"));return d[u] ? hb(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;while (h--) {
              (f = g[h]) && (a[h] = !(b[h] = f));
            }
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), !c.pop();
          };
        }), has: hb(function (a) {
          return function (b) {
            return fb(a, b).length > 0;
          };
        }), contains: hb(function (a) {
          return function (b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }), lang: hb(function (a) {
          return W.test(a || "") || fb.error("unsupported lang: " + a), a = a.replace(cb, db).toLowerCase(), function (b) {
            var c;do {
              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
            } while ((b = b.parentNode) && 1 === b.nodeType);return !1;
          };
        }), target: function target(b) {
          var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
        }, root: function root(a) {
          return a === o;
        }, focus: function focus(a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        }, enabled: function enabled(a) {
          return a.disabled === !1;
        }, disabled: function disabled(a) {
          return a.disabled === !0;
        }, checked: function checked(a) {
          var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
        }, selected: function selected(a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        }, empty: function empty(a) {
          for (a = a.firstChild; a; a = a.nextSibling) {
            if (a.nodeType < 6) return !1;
          }return !0;
        }, parent: function parent(a) {
          return !d.pseudos.empty(a);
        }, header: function header(a) {
          return Z.test(a.nodeName);
        }, input: function input(a) {
          return Y.test(a.nodeName);
        }, button: function button(a) {
          var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
        }, text: function text(a) {
          var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        }, first: nb(function () {
          return [0];
        }), last: nb(function (a, b) {
          return [b - 1];
        }), eq: nb(function (a, b, c) {
          return [0 > c ? c + b : c];
        }), even: nb(function (a, b) {
          for (var c = 0; b > c; c += 2) {
            a.push(c);
          }return a;
        }), odd: nb(function (a, b) {
          for (var c = 1; b > c; c += 2) {
            a.push(c);
          }return a;
        }), lt: nb(function (a, b, c) {
          for (var d = 0 > c ? c + b : c; --d >= 0;) {
            a.push(d);
          }return a;
        }), gt: nb(function (a, b, c) {
          for (var d = 0 > c ? c + b : c; ++d < b;) {
            a.push(d);
          }return a;
        }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
      d.pseudos[b] = lb(b);
    }for (b in { submit: !0, reset: !0 }) {
      d.pseudos[b] = mb(b);
    }function pb() {}pb.prototype = d.filters = d.pseudos, d.setFilters = new pb(), g = fb.tokenize = function (a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(R, " ") }), h = h.slice(c.length));for (g in d.filter) {
          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));
        }if (!c) break;
      }return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);
    };function qb(a) {
      for (var b = 0, c = a.length, d = ""; c > b; b++) {
        d += a[b].value;
      }return d;
    }function rb(a, b, c) {
      var d = b.dir,
          e = c && "parentNode" === d,
          f = x++;return b.first ? function (b, c, f) {
        while (b = b[d]) {
          if (1 === b.nodeType || e) return a(b, c, f);
        }
      } : function (b, c, g) {
        var h,
            i,
            j = [w, f];if (g) {
          while (b = b[d]) {
            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
          }
        } else while (b = b[d]) {
          if (1 === b.nodeType || e) {
            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];if (i[d] = j, j[2] = a(b, c, g)) return !0;
          }
        }
      };
    }function sb(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;while (e--) {
          if (!a[e](b, c, d)) return !1;
        }return !0;
      } : a[0];
    }function tb(a, b, c) {
      for (var d = 0, e = b.length; e > d; d++) {
        fb(a, b[d], c);
      }return c;
    }function ub(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
      }return g;
    }function vb(a, b, c, d, e, f) {
      return d && !d[u] && (d = vb(d)), e && !e[u] && (e = vb(e, f)), hb(function (f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || tb(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : ub(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
          j = ub(r, n), d(j, [], h, i), k = j.length;while (k--) {
            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
          }
        }if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;while (k--) {
                (l = r[k]) && j.push(q[k] = l);
              }e(null, r = [], j, i);
            }k = r.length;while (k--) {
              (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
            }
          }
        } else r = ub(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : I.apply(g, r);
      });
    }function wb(a) {
      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = rb(function (a) {
        return a === b;
      }, h, !0), l = rb(function (a) {
        return K.call(b, a) > -1;
      }, h, !0), m = [function (a, c, d) {
        return !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
      }]; f > i; i++) {
        if (c = d.relative[a[i].type]) m = [rb(sb(m), c)];else {
          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
            for (e = ++i; f > e; e++) {
              if (d.relative[a[e].type]) break;
            }return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb(a = a.slice(e)), f > e && qb(a));
          }m.push(c);
        }
      }return sb(m);
    }function xb(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function f(_f, g, h, i, k) {
        var l,
            m,
            o,
            p = 0,
            q = "0",
            r = _f && [],
            s = [],
            t = j,
            u = _f || e && d.find.TAG("*", k),
            v = w += null == t ? 1 : Math.random() || .1,
            x = u.length;for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
          if (e && l) {
            m = 0;while (o = a[m++]) {
              if (o(l, g, h)) {
                i.push(l);break;
              }
            }k && (w = v);
          }c && ((l = !o && l) && p--, _f && r.push(l));
        }if (p += q, c && q !== p) {
          m = 0;while (o = b[m++]) {
            o(r, s, g, h);
          }if (_f) {
            if (p > 0) while (q--) {
              r[q] || s[q] || (s[q] = G.call(i));
            }s = ub(s);
          }I.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);
        }return k && (w = v, j = t), r;
      };return c ? hb(f) : f;
    }return h = fb.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];if (!f) {
        b || (b = g(a)), c = b.length;while (c--) {
          f = wb(b[c]), f[u] ? d.push(f) : e.push(f);
        }f = A(a, xb(e, d)), f.selector = a;
      }return f;
    }, i = fb.select = function (a, b, e, f) {
      var i,
          j,
          k,
          l,
          m,
          n = "function" == typeof a && a,
          o = !f && g(a = n.selector || a);if (e = e || [], 1 === o.length) {
        if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
          if (b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0], !b) return e;n && (b = b.parentNode), a = a.slice(j.shift().value.length);
        }i = X.needsContext.test(a) ? 0 : j.length;while (i--) {
          if (k = j[i], d.relative[l = k.type]) break;if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), ab.test(j[0].type) && ob(b.parentNode) || b))) {
            if (j.splice(i, 1), a = f.length && qb(j), !a) return I.apply(e, f), e;break;
          }
        }
      }return (n || h(a, o))(f, b, !p, e, ab.test(a) && ob(b.parentNode) || b), e;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ib(function (a) {
      return 1 & a.compareDocumentPosition(n.createElement("div"));
    }), ib(function (a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || jb("type|href|height|width", function (a, b, c) {
      return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ib(function (a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || jb("value", function (a, b, c) {
      return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
    }), ib(function (a) {
      return null == a.getAttribute("disabled");
    }) || jb(L, function (a, b, c) {
      var d;return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), fb;
  }(a);n.find = t, n.expr = t.selectors, n.expr[":"] = n.expr.pseudos, n.unique = t.uniqueSort, n.text = t.getText, n.isXMLDoc = t.isXML, n.contains = t.contains;var u = n.expr.match.needsContext,
      v = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
      w = /^.[^:#\[\.,]*$/;function x(a, b, c) {
    if (n.isFunction(b)) return n.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    });if (b.nodeType) return n.grep(a, function (a) {
      return a === b !== c;
    });if ("string" == typeof b) {
      if (w.test(b)) return n.filter(b, a, c);b = n.filter(b, a);
    }return n.grep(a, function (a) {
      return g.call(b, a) >= 0 !== c;
    });
  }n.filter = function (a, b, c) {
    var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? n.find.matchesSelector(d, a) ? [d] : [] : n.find.matches(a, n.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, n.fn.extend({ find: function find(a) {
      var b,
          c = this.length,
          d = [],
          e = this;if ("string" != typeof a) return this.pushStack(n(a).filter(function () {
        for (b = 0; c > b; b++) {
          if (n.contains(e[b], this)) return !0;
        }
      }));for (b = 0; c > b; b++) {
        n.find(a, e[b], d);
      }return d = this.pushStack(c > 1 ? n.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d;
    }, filter: function filter(a) {
      return this.pushStack(x(this, a || [], !1));
    }, not: function not(a) {
      return this.pushStack(x(this, a || [], !0));
    }, is: function is(a) {
      return !!x(this, "string" == typeof a && u.test(a) ? n(a) : a || [], !1).length;
    } });var y,
      z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
      A = n.fn.init = function (a, b) {
    var c, d;if (!a) return this;if ("string" == typeof a) {
      if (c = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || y).find(a) : this.constructor(b).find(a);if (c[1]) {
        if (b = b instanceof n ? b[0] : b, n.merge(this, n.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : l, !0)), v.test(c[1]) && n.isPlainObject(b)) for (c in b) {
          n.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
        }return this;
      }return d = l.getElementById(c[2]), d && d.parentNode && (this.length = 1, this[0] = d), this.context = l, this.selector = a, this;
    }return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : n.isFunction(a) ? "undefined" != typeof y.ready ? y.ready(a) : a(n) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), n.makeArray(a, this));
  };A.prototype = n.fn, y = n(l);var B = /^(?:parents|prev(?:Until|All))/,
      C = { children: !0, contents: !0, next: !0, prev: !0 };n.extend({ dir: function dir(a, b, c) {
      var d = [],
          e = void 0 !== c;while ((a = a[b]) && 9 !== a.nodeType) {
        if (1 === a.nodeType) {
          if (e && n(a).is(c)) break;d.push(a);
        }
      }return d;
    }, sibling: function sibling(a, b) {
      for (var c = []; a; a = a.nextSibling) {
        1 === a.nodeType && a !== b && c.push(a);
      }return c;
    } }), n.fn.extend({ has: function has(a) {
      var b = n(a, this),
          c = b.length;return this.filter(function () {
        for (var a = 0; c > a; a++) {
          if (n.contains(this, b[a])) return !0;
        }
      });
    }, closest: function closest(a, b) {
      for (var c, d = 0, e = this.length, f = [], g = u.test(a) || "string" != typeof a ? n(a, b || this.context) : 0; e > d; d++) {
        for (c = this[d]; c && c !== b; c = c.parentNode) {
          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && n.find.matchesSelector(c, a))) {
            f.push(c);break;
          }
        }
      }return this.pushStack(f.length > 1 ? n.unique(f) : f);
    }, index: function index(a) {
      return a ? "string" == typeof a ? g.call(n(a), this[0]) : g.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    }, add: function add(a, b) {
      return this.pushStack(n.unique(n.merge(this.get(), n(a, b))));
    }, addBack: function addBack(a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    } });function D(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType) {}return a;
  }n.each({ parent: function parent(a) {
      var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
    }, parents: function parents(a) {
      return n.dir(a, "parentNode");
    }, parentsUntil: function parentsUntil(a, b, c) {
      return n.dir(a, "parentNode", c);
    }, next: function next(a) {
      return D(a, "nextSibling");
    }, prev: function prev(a) {
      return D(a, "previousSibling");
    }, nextAll: function nextAll(a) {
      return n.dir(a, "nextSibling");
    }, prevAll: function prevAll(a) {
      return n.dir(a, "previousSibling");
    }, nextUntil: function nextUntil(a, b, c) {
      return n.dir(a, "nextSibling", c);
    }, prevUntil: function prevUntil(a, b, c) {
      return n.dir(a, "previousSibling", c);
    }, siblings: function siblings(a) {
      return n.sibling((a.parentNode || {}).firstChild, a);
    }, children: function children(a) {
      return n.sibling(a.firstChild);
    }, contents: function contents(a) {
      return a.contentDocument || n.merge([], a.childNodes);
    } }, function (a, b) {
    n.fn[a] = function (c, d) {
      var e = n.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = n.filter(d, e)), this.length > 1 && (C[a] || n.unique(e), B.test(a) && e.reverse()), this.pushStack(e);
    };
  });var E = /\S+/g,
      F = {};function G(a) {
    var b = F[a] = {};return n.each(a.match(E) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }n.Callbacks = function (a) {
    a = "string" == typeof a ? F[a] || G(a) : n.extend({}, a);var b,
        c,
        d,
        e,
        f,
        g,
        h = [],
        i = !a.once && [],
        j = function j(l) {
      for (b = a.memory && l, c = !0, g = e || 0, e = 0, f = h.length, d = !0; h && f > g; g++) {
        if (h[g].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
          b = !1;break;
        }
      }d = !1, h && (i ? i.length && j(i.shift()) : b ? h = [] : k.disable());
    },
        k = { add: function add() {
        if (h) {
          var c = h.length;!function g(b) {
            n.each(b, function (b, c) {
              var d = n.type(c);"function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && g(c);
            });
          }(arguments), d ? f = h.length : b && (e = c, j(b));
        }return this;
      }, remove: function remove() {
        return h && n.each(arguments, function (a, b) {
          var c;while ((c = n.inArray(b, h, c)) > -1) {
            h.splice(c, 1), d && (f >= c && f--, g >= c && g--);
          }
        }), this;
      }, has: function has(a) {
        return a ? n.inArray(a, h) > -1 : !(!h || !h.length);
      }, empty: function empty() {
        return h = [], f = 0, this;
      }, disable: function disable() {
        return h = i = b = void 0, this;
      }, disabled: function disabled() {
        return !h;
      }, lock: function lock() {
        return i = void 0, b || k.disable(), this;
      }, locked: function locked() {
        return !i;
      }, fireWith: function fireWith(a, b) {
        return !h || c && !i || (b = b || [], b = [a, b.slice ? b.slice() : b], d ? i.push(b) : j(b)), this;
      }, fire: function fire() {
        return k.fireWith(this, arguments), this;
      }, fired: function fired() {
        return !!c;
      } };return k;
  }, n.extend({ Deferred: function Deferred(a) {
      var b = [["resolve", "done", n.Callbacks("once memory"), "resolved"], ["reject", "fail", n.Callbacks("once memory"), "rejected"], ["notify", "progress", n.Callbacks("memory")]],
          c = "pending",
          d = { state: function state() {
          return c;
        }, always: function always() {
          return e.done(arguments).fail(arguments), this;
        }, then: function then() {
          var a = arguments;return n.Deferred(function (c) {
            n.each(b, function (b, f) {
              var g = n.isFunction(a[b]) && a[b];e[f[1]](function () {
                var a = g && g.apply(this, arguments);a && n.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        }, promise: function promise(a) {
          return null != a ? n.extend(a, d) : d;
        } },
          e = {};return d.pipe = d.then, n.each(b, function (a, f) {
        var g = f[2],
            h = f[3];d[f[1]] = g.add, h && g.add(function () {
          c = h;
        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
          return e[f[0] + "With"](this === e ? d : this, arguments), this;
        }, e[f[0] + "With"] = g.fireWith;
      }), d.promise(e), a && a.call(e, e), e;
    }, when: function when(a) {
      var b = 0,
          c = d.call(arguments),
          e = c.length,
          f = 1 !== e || a && n.isFunction(a.promise) ? e : 0,
          g = 1 === f ? a : n.Deferred(),
          h = function h(a, b, c) {
        return function (e) {
          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
        };
      },
          i,
          j,
          k;if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
        c[b] && n.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
      }return f || g.resolveWith(k, c), g.promise();
    } });var H;n.fn.ready = function (a) {
    return n.ready.promise().done(a), this;
  }, n.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(a) {
      a ? n.readyWait++ : n.ready(!0);
    }, ready: function ready(a) {
      (a === !0 ? --n.readyWait : n.isReady) || (n.isReady = !0, a !== !0 && --n.readyWait > 0 || (H.resolveWith(l, [n]), n.fn.triggerHandler && (n(l).triggerHandler("ready"), n(l).off("ready"))));
    } });function I() {
    l.removeEventListener("DOMContentLoaded", I, !1), a.removeEventListener("load", I, !1), n.ready();
  }n.ready.promise = function (b) {
    return H || (H = n.Deferred(), "complete" === l.readyState ? setTimeout(n.ready) : (l.addEventListener("DOMContentLoaded", I, !1), a.addEventListener("load", I, !1))), H.promise(b);
  }, n.ready.promise();var J = n.access = function (a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;if ("object" === n.type(c)) {
      e = !0;for (h in c) {
        n.access(a, b, h, c[h], !0, f, g);
      }
    } else if (void 0 !== d && (e = !0, n.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {
      return j.call(n(a), c);
    })), b)) for (; i > h; h++) {
      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
    }return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  };n.acceptData = function (a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };function K() {
    Object.defineProperty(this.cache = {}, 0, { get: function get() {
        return {};
      } }), this.expando = n.expando + Math.random();
  }K.uid = 1, K.accepts = n.acceptData, K.prototype = { key: function key(a) {
      if (!K.accepts(a)) return 0;var b = {},
          c = a[this.expando];if (!c) {
        c = K.uid++;try {
          b[this.expando] = { value: c }, Object.defineProperties(a, b);
        } catch (d) {
          b[this.expando] = c, n.extend(a, b);
        }
      }return this.cache[c] || (this.cache[c] = {}), c;
    }, set: function set(a, b, c) {
      var d,
          e = this.key(a),
          f = this.cache[e];if ("string" == typeof b) f[b] = c;else if (n.isEmptyObject(f)) n.extend(this.cache[e], b);else for (d in b) {
        f[d] = b[d];
      }return f;
    }, get: function get(a, b) {
      var c = this.cache[this.key(a)];return void 0 === b ? c : c[b];
    }, access: function access(a, b, c) {
      var d;return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, n.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b);
    }, remove: function remove(a, b) {
      var c,
          d,
          e,
          f = this.key(a),
          g = this.cache[f];if (void 0 === b) this.cache[f] = {};else {
        n.isArray(b) ? d = b.concat(b.map(n.camelCase)) : (e = n.camelCase(b), b in g ? d = [b, e] : (d = e, d = d in g ? [d] : d.match(E) || [])), c = d.length;while (c--) {
          delete g[d[c]];
        }
      }
    }, hasData: function hasData(a) {
      return !n.isEmptyObject(this.cache[a[this.expando]] || {});
    }, discard: function discard(a) {
      a[this.expando] && delete this.cache[a[this.expando]];
    } };var L = new K(),
      M = new K(),
      N = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      O = /([A-Z])/g;function P(a, b, c) {
    var d;if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(O, "-$1").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : N.test(c) ? n.parseJSON(c) : c;
      } catch (e) {}M.set(a, b, c);
    } else c = void 0;return c;
  }n.extend({ hasData: function hasData(a) {
      return M.hasData(a) || L.hasData(a);
    }, data: function data(a, b, c) {
      return M.access(a, b, c);
    }, removeData: function removeData(a, b) {
      M.remove(a, b);
    }, _data: function _data(a, b, c) {
      return L.access(a, b, c);
    }, _removeData: function _removeData(a, b) {
      L.remove(a, b);
    } }), n.fn.extend({ data: function data(a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;if (void 0 === a) {
        if (this.length && (e = M.get(f), 1 === f.nodeType && !L.get(f, "hasDataAttrs"))) {
          c = g.length;while (c--) {
            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = n.camelCase(d.slice(5)), P(f, d, e[d])));
          }L.set(f, "hasDataAttrs", !0);
        }return e;
      }return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {
        M.set(this, a);
      }) : J(this, function (b) {
        var c,
            d = n.camelCase(a);if (f && void 0 === b) {
          if (c = M.get(f, a), void 0 !== c) return c;if (c = M.get(f, d), void 0 !== c) return c;if (c = P(f, d, void 0), void 0 !== c) return c;
        } else this.each(function () {
          var c = M.get(this, d);M.set(this, d, b), -1 !== a.indexOf("-") && void 0 !== c && M.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    }, removeData: function removeData(a) {
      return this.each(function () {
        M.remove(this, a);
      });
    } }), n.extend({ queue: function queue(a, b, c) {
      var d;return a ? (b = (b || "fx") + "queue", d = L.get(a, b), c && (!d || n.isArray(c) ? d = L.access(a, b, n.makeArray(c)) : d.push(c)), d || []) : void 0;
    }, dequeue: function dequeue(a, b) {
      b = b || "fx";var c = n.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = n._queueHooks(a, b),
          g = function g() {
        n.dequeue(a, b);
      };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    }, _queueHooks: function _queueHooks(a, b) {
      var c = b + "queueHooks";return L.get(a, c) || L.access(a, c, { empty: n.Callbacks("once memory").add(function () {
          L.remove(a, [b + "queue", c]);
        }) });
    } }), n.fn.extend({ queue: function queue(a, b) {
      var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? n.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = n.queue(this, a, b);n._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && n.dequeue(this, a);
      });
    }, dequeue: function dequeue(a) {
      return this.each(function () {
        n.dequeue(this, a);
      });
    }, clearQueue: function clearQueue(a) {
      return this.queue(a || "fx", []);
    }, promise: function promise(a, b) {
      var c,
          d = 1,
          e = n.Deferred(),
          f = this,
          g = this.length,
          h = function h() {
        --d || e.resolveWith(f, [f]);
      };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) {
        c = L.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
      }return h(), e.promise(b);
    } });var Q = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      R = ["Top", "Right", "Bottom", "Left"],
      S = function S(a, b) {
    return a = b || a, "none" === n.css(a, "display") || !n.contains(a.ownerDocument, a);
  },
      T = /^(?:checkbox|radio)$/i;!function () {
    var a = l.createDocumentFragment(),
        b = a.appendChild(l.createElement("div")),
        c = l.createElement("input");c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();var U = "undefined";k.focusinBubbles = "onfocusin" in a;var V = /^key/,
      W = /^(?:mouse|pointer|contextmenu)|click/,
      X = /^(?:focusinfocus|focusoutblur)$/,
      Y = /^([^.]*)(?:\.(.+)|)$/;function Z() {
    return !0;
  }function $() {
    return !1;
  }function _() {
    try {
      return l.activeElement;
    } catch (a) {}
  }n.event = { global: {}, add: function add(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = L.get(a);if (r) {
        c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = n.guid++), (i = r.events) || (i = r.events = {}), (g = r.handle) || (g = r.handle = function (b) {
          return (typeof n === "undefined" ? "undefined" : _typeof(n)) !== U && n.event.triggered !== b.type ? n.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(E) || [""], j = b.length;while (j--) {
          h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o && (l = n.event.special[o] || {}, o = (e ? l.delegateType : l.bindType) || o, l = n.event.special[o] || {}, k = n.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && n.expr.match.needsContext.test(e), namespace: p.join(".") }, f), (m = i[o]) || (m = i[o] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, p, g) !== !1 || a.addEventListener && a.addEventListener(o, g, !1)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), n.event.global[o] = !0);
        }
      }
    }, remove: function remove(a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          o,
          p,
          q,
          r = L.hasData(a) && L.get(a);if (r && (i = r.events)) {
        b = (b || "").match(E) || [""], j = b.length;while (j--) {
          if (h = Y.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
            l = n.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, m = i[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;while (f--) {
              k = m[f], !e && q !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
            }g && !m.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || n.removeEvent(a, o, r.handle), delete i[o]);
          } else for (o in i) {
            n.event.remove(a, o + b[j], c, d, !0);
          }
        }n.isEmptyObject(i) && (delete r.handle, L.remove(a, "events"));
      }
    }, trigger: function trigger(b, c, d, e) {
      var f,
          g,
          h,
          i,
          k,
          m,
          o,
          p = [d || l],
          q = j.call(b, "type") ? b.type : b,
          r = j.call(b, "namespace") ? b.namespace.split(".") : [];if (g = h = d = d || l, 3 !== d.nodeType && 8 !== d.nodeType && !X.test(q + n.event.triggered) && (q.indexOf(".") >= 0 && (r = q.split("."), q = r.shift(), r.sort()), k = q.indexOf(":") < 0 && "on" + q, b = b[n.expando] ? b : new n.Event(q, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = e ? 2 : 3, b.namespace = r.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + r.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : n.makeArray(c, [b]), o = n.event.special[q] || {}, e || !o.trigger || o.trigger.apply(d, c) !== !1)) {
        if (!e && !o.noBubble && !n.isWindow(d)) {
          for (i = o.delegateType || q, X.test(i + q) || (g = g.parentNode); g; g = g.parentNode) {
            p.push(g), h = g;
          }h === (d.ownerDocument || l) && p.push(h.defaultView || h.parentWindow || a);
        }f = 0;while ((g = p[f++]) && !b.isPropagationStopped()) {
          b.type = f > 1 ? i : o.bindType || q, m = (L.get(g, "events") || {})[b.type] && L.get(g, "handle"), m && m.apply(g, c), m = k && g[k], m && m.apply && n.acceptData(g) && (b.result = m.apply(g, c), b.result === !1 && b.preventDefault());
        }return b.type = q, e || b.isDefaultPrevented() || o._default && o._default.apply(p.pop(), c) !== !1 || !n.acceptData(d) || k && n.isFunction(d[q]) && !n.isWindow(d) && (h = d[k], h && (d[k] = null), n.event.triggered = q, d[q](), n.event.triggered = void 0, h && (d[k] = h)), b.result;
      }
    }, dispatch: function dispatch(a) {
      a = n.event.fix(a);var b,
          c,
          e,
          f,
          g,
          h = [],
          i = d.call(arguments),
          j = (L.get(this, "events") || {})[a.type] || [],
          k = n.event.special[a.type] || {};if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
        h = n.event.handlers.call(this, a, j), b = 0;while ((f = h[b++]) && !a.isPropagationStopped()) {
          a.currentTarget = f.elem, c = 0;while ((g = f.handlers[c++]) && !a.isImmediatePropagationStopped()) {
            (!a.namespace_re || a.namespace_re.test(g.namespace)) && (a.handleObj = g, a.data = g.data, e = ((n.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (a.result = e) === !1 && (a.preventDefault(), a.stopPropagation()));
          }
        }return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    }, handlers: function handlers(a, b) {
      var c,
          d,
          e,
          f,
          g = [],
          h = b.delegateCount,
          i = a.target;if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i !== this; i = i.parentNode || this) {
        if (i.disabled !== !0 || "click" !== a.type) {
          for (d = [], c = 0; h > c; c++) {
            f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? n(e, this).index(i) >= 0 : n.find(e, this, null, [i]).length), d[e] && d.push(f);
          }d.length && g.push({ elem: i, handlers: d });
        }
      }return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
    }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(a, b) {
        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
      } }, mouseHooks: { props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(a, b) {
        var c,
            d,
            e,
            f = b.button;return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || l, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
      } }, fix: function fix(a) {
      if (a[n.expando]) return a;var b,
          c,
          d,
          e = a.type,
          f = a,
          g = this.fixHooks[e];g || (this.fixHooks[e] = g = W.test(e) ? this.mouseHooks : V.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new n.Event(f), b = d.length;while (b--) {
        c = d[b], a[c] = f[c];
      }return a.target || (a.target = l), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a;
    }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
          return this !== _() && this.focus ? (this.focus(), !1) : void 0;
        }, delegateType: "focusin" }, blur: { trigger: function trigger() {
          return this === _() && this.blur ? (this.blur(), !1) : void 0;
        }, delegateType: "focusout" }, click: { trigger: function trigger() {
          return "checkbox" === this.type && this.click && n.nodeName(this, "input") ? (this.click(), !1) : void 0;
        }, _default: function _default(a) {
          return n.nodeName(a.target, "a");
        } }, beforeunload: { postDispatch: function postDispatch(a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        } } }, simulate: function simulate(a, b, c, d) {
      var e = n.extend(new n.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });d ? n.event.trigger(e, null, b) : n.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
    } }, n.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c, !1);
  }, n.Event = function (a, b) {
    return this instanceof n.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? Z : $) : this.type = a, b && n.extend(this, b), this.timeStamp = a && a.timeStamp || n.now(), void (this[n.expando] = !0)) : new n.Event(a, b);
  }, n.Event.prototype = { isDefaultPrevented: $, isPropagationStopped: $, isImmediatePropagationStopped: $, preventDefault: function preventDefault() {
      var a = this.originalEvent;this.isDefaultPrevented = Z, a && a.preventDefault && a.preventDefault();
    }, stopPropagation: function stopPropagation() {
      var a = this.originalEvent;this.isPropagationStopped = Z, a && a.stopPropagation && a.stopPropagation();
    }, stopImmediatePropagation: function stopImmediatePropagation() {
      var a = this.originalEvent;this.isImmediatePropagationStopped = Z, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
    } }, n.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
    n.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;return (!e || e !== d && !n.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      } };
  }), k.focusinBubbles || n.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
    var c = function c(a) {
      n.event.simulate(b, a.target, n.event.fix(a), !0);
    };n.event.special[b] = { setup: function setup() {
        var d = this.ownerDocument || this,
            e = L.access(d, b);e || d.addEventListener(a, c, !0), L.access(d, b, (e || 0) + 1);
      }, teardown: function teardown() {
        var d = this.ownerDocument || this,
            e = L.access(d, b) - 1;e ? L.access(d, b, e) : (d.removeEventListener(a, c, !0), L.remove(d, b));
      } };
  }), n.fn.extend({ on: function on(a, b, c, d, e) {
      var f, g;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
        "string" != typeof b && (c = c || b, b = void 0);for (g in a) {
          this.on(g, b, c, a[g], e);
        }return this;
      }if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = $;else if (!d) return this;return 1 === e && (f = d, d = function d(a) {
        return n().off(a), f.apply(this, arguments);
      }, d.guid = f.guid || (f.guid = n.guid++)), this.each(function () {
        n.event.add(this, a, d, c, b);
      });
    }, one: function one(a, b, c, d) {
      return this.on(a, b, c, d, 1);
    }, off: function off(a, b, c) {
      var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, n(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
        for (e in a) {
          this.off(e, b, a[e]);
        }return this;
      }return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = $), this.each(function () {
        n.event.remove(this, a, c, b);
      });
    }, trigger: function trigger(a, b) {
      return this.each(function () {
        n.event.trigger(a, b, this);
      });
    }, triggerHandler: function triggerHandler(a, b) {
      var c = this[0];return c ? n.event.trigger(a, b, c, !0) : void 0;
    } });var ab = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
      bb = /<([\w:]+)/,
      cb = /<|&#?\w+;/,
      db = /<(?:script|style|link)/i,
      eb = /checked\s*(?:[^=]|=\s*.checked.)/i,
      fb = /^$|\/(?:java|ecma)script/i,
      gb = /^true\/(.*)/,
      hb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
      ib = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };ib.optgroup = ib.option, ib.tbody = ib.tfoot = ib.colgroup = ib.caption = ib.thead, ib.th = ib.td;function jb(a, b) {
    return n.nodeName(a, "table") && n.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
  }function kb(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }function lb(a) {
    var b = gb.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }function mb(a, b) {
    for (var c = 0, d = a.length; d > c; c++) {
      L.set(a[c], "globalEval", !b || L.get(b[c], "globalEval"));
    }
  }function nb(a, b) {
    var c, d, e, f, g, h, i, j;if (1 === b.nodeType) {
      if (L.hasData(a) && (f = L.access(a), g = L.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};for (e in j) {
          for (c = 0, d = j[e].length; d > c; c++) {
            n.event.add(b, e, j[e][c]);
          }
        }
      }M.hasData(a) && (h = M.access(a), i = n.extend({}, h), M.set(b, i));
    }
  }function ob(a, b) {
    var c = a.getElementsByTagName ? a.getElementsByTagName(b || "*") : a.querySelectorAll ? a.querySelectorAll(b || "*") : [];return void 0 === b || b && n.nodeName(a, b) ? n.merge([a], c) : c;
  }function pb(a, b) {
    var c = b.nodeName.toLowerCase();"input" === c && T.test(a.type) ? b.checked = a.checked : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
  }n.extend({ clone: function clone(a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = n.contains(a.ownerDocument, a);if (!(k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || n.isXMLDoc(a))) for (g = ob(h), f = ob(a), d = 0, e = f.length; e > d; d++) {
        pb(f[d], g[d]);
      }if (b) if (c) for (f = f || ob(a), g = g || ob(h), d = 0, e = f.length; e > d; d++) {
        nb(f[d], g[d]);
      } else nb(a, h);return g = ob(h, "script"), g.length > 0 && mb(g, !i && ob(a, "script")), h;
    }, buildFragment: function buildFragment(a, b, c, d) {
      for (var e, f, g, h, i, j, k = b.createDocumentFragment(), l = [], m = 0, o = a.length; o > m; m++) {
        if (e = a[m], e || 0 === e) if ("object" === n.type(e)) n.merge(l, e.nodeType ? [e] : e);else if (cb.test(e)) {
          f = f || k.appendChild(b.createElement("div")), g = (bb.exec(e) || ["", ""])[1].toLowerCase(), h = ib[g] || ib._default, f.innerHTML = h[1] + e.replace(ab, "<$1></$2>") + h[2], j = h[0];while (j--) {
            f = f.lastChild;
          }n.merge(l, f.childNodes), f = k.firstChild, f.textContent = "";
        } else l.push(b.createTextNode(e));
      }k.textContent = "", m = 0;while (e = l[m++]) {
        if ((!d || -1 === n.inArray(e, d)) && (i = n.contains(e.ownerDocument, e), f = ob(k.appendChild(e), "script"), i && mb(f), c)) {
          j = 0;while (e = f[j++]) {
            fb.test(e.type || "") && c.push(e);
          }
        }
      }return k;
    }, cleanData: function cleanData(a) {
      for (var b, c, d, e, f = n.event.special, g = 0; void 0 !== (c = a[g]); g++) {
        if (n.acceptData(c) && (e = c[L.expando], e && (b = L.cache[e]))) {
          if (b.events) for (d in b.events) {
            f[d] ? n.event.remove(c, d) : n.removeEvent(c, d, b.handle);
          }L.cache[e] && delete L.cache[e];
        }delete M.cache[c[M.expando]];
      }
    } }), n.fn.extend({ text: function text(a) {
      return J(this, function (a) {
        return void 0 === a ? n.text(this) : this.empty().each(function () {
          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = a);
        });
      }, null, a, arguments.length);
    }, append: function append() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = jb(this, a);b.appendChild(a);
        }
      });
    }, prepend: function prepend() {
      return this.domManip(arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = jb(this, a);b.insertBefore(a, b.firstChild);
        }
      });
    }, before: function before() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    }, after: function after() {
      return this.domManip(arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    }, remove: function remove(a, b) {
      for (var c, d = a ? n.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
        b || 1 !== c.nodeType || n.cleanData(ob(c)), c.parentNode && (b && n.contains(c.ownerDocument, c) && mb(ob(c, "script")), c.parentNode.removeChild(c));
      }return this;
    }, empty: function empty() {
      for (var a, b = 0; null != (a = this[b]); b++) {
        1 === a.nodeType && (n.cleanData(ob(a, !1)), a.textContent = "");
      }return this;
    }, clone: function clone(a, b) {
      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
        return n.clone(this, a, b);
      });
    }, html: function html(a) {
      return J(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;if (void 0 === a && 1 === b.nodeType) return b.innerHTML;if ("string" == typeof a && !db.test(a) && !ib[(bb.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = a.replace(ab, "<$1></$2>");try {
            for (; d > c; c++) {
              b = this[c] || {}, 1 === b.nodeType && (n.cleanData(ob(b, !1)), b.innerHTML = a);
            }b = 0;
          } catch (e) {}
        }b && this.empty().append(a);
      }, null, a, arguments.length);
    }, replaceWith: function replaceWith() {
      var a = arguments[0];return this.domManip(arguments, function (b) {
        a = this.parentNode, n.cleanData(ob(this)), a && a.replaceChild(b, this);
      }), a && (a.length || a.nodeType) ? this : this.remove();
    }, detach: function detach(a) {
      return this.remove(a, !0);
    }, domManip: function domManip(a, b) {
      a = e.apply([], a);var c,
          d,
          f,
          g,
          h,
          i,
          j = 0,
          l = this.length,
          m = this,
          o = l - 1,
          p = a[0],
          q = n.isFunction(p);if (q || l > 1 && "string" == typeof p && !k.checkClone && eb.test(p)) return this.each(function (c) {
        var d = m.eq(c);q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
      });if (l && (c = n.buildFragment(a, this[0].ownerDocument, !1, this), d = c.firstChild, 1 === c.childNodes.length && (c = d), d)) {
        for (f = n.map(ob(c, "script"), kb), g = f.length; l > j; j++) {
          h = c, j !== o && (h = n.clone(h, !0, !0), g && n.merge(f, ob(h, "script"))), b.call(this[j], h, j);
        }if (g) for (i = f[f.length - 1].ownerDocument, n.map(f, lb), j = 0; g > j; j++) {
          h = f[j], fb.test(h.type || "") && !L.access(h, "globalEval") && n.contains(i, h) && (h.src ? n._evalUrl && n._evalUrl(h.src) : n.globalEval(h.textContent.replace(hb, "")));
        }
      }return this;
    } }), n.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
    n.fn[a] = function (a) {
      for (var c, d = [], e = n(a), g = e.length - 1, h = 0; g >= h; h++) {
        c = h === g ? this : this.clone(!0), n(e[h])[b](c), f.apply(d, c.get());
      }return this.pushStack(d);
    };
  });var qb,
      rb = {};function sb(b, c) {
    var d,
        e = n(c.createElement(b)).appendTo(c.body),
        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : n.css(e[0], "display");return e.detach(), f;
  }function tb(a) {
    var b = l,
        c = rb[a];return c || (c = sb(a, b), "none" !== c && c || (qb = (qb || n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = qb[0].contentDocument, b.write(), b.close(), c = sb(a, b), qb.detach()), rb[a] = c), c;
  }var ub = /^margin/,
      vb = new RegExp("^(" + Q + ")(?!px)[a-z%]+$", "i"),
      wb = function wb(a) {
    return a.ownerDocument.defaultView.getComputedStyle(a, null);
  };function xb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;return c = c || wb(a), c && (g = c.getPropertyValue(b) || c[b]), c && ("" !== g || n.contains(a.ownerDocument, a) || (g = n.style(a, b)), vb.test(g) && ub.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }function yb(a, b) {
    return { get: function get() {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      } };
  }!function () {
    var b,
        c,
        d = l.documentElement,
        e = l.createElement("div"),
        f = l.createElement("div");if (f.style) {
      var _g = function _g() {
        f.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", f.innerHTML = "", d.appendChild(e);var g = a.getComputedStyle(f, null);b = "1%" !== g.top, c = "4px" === g.width, d.removeChild(e);
      };

      f.style.backgroundClip = "content-box", f.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === f.style.backgroundClip, e.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", e.appendChild(f);a.getComputedStyle && n.extend(k, { pixelPosition: function pixelPosition() {
          return _g(), b;
        }, boxSizingReliable: function boxSizingReliable() {
          return null == c && _g(), c;
        }, reliableMarginRight: function reliableMarginRight() {
          var b,
              c = f.appendChild(l.createElement("div"));return c.style.cssText = f.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", c.style.marginRight = c.style.width = "0", f.style.width = "1px", d.appendChild(e), b = !parseFloat(a.getComputedStyle(c, null).marginRight), d.removeChild(e), b;
        } });
    }
  }(), n.swap = function (a, b, c, d) {
    var e,
        f,
        g = {};for (f in b) {
      g[f] = a.style[f], a.style[f] = b[f];
    }e = c.apply(a, d || []);for (f in b) {
      a.style[f] = g[f];
    }return e;
  };var zb = /^(none|table(?!-c[ea]).+)/,
      Ab = new RegExp("^(" + Q + ")(.*)$", "i"),
      Bb = new RegExp("^([+-])=(" + Q + ")", "i"),
      Cb = { position: "absolute", visibility: "hidden", display: "block" },
      Db = { letterSpacing: "0", fontWeight: "400" },
      Eb = ["Webkit", "O", "Moz", "ms"];function Fb(a, b) {
    if (b in a) return b;var c = b[0].toUpperCase() + b.slice(1),
        d = b,
        e = Eb.length;while (e--) {
      if (b = Eb[e] + c, b in a) return b;
    }return d;
  }function Gb(a, b, c) {
    var d = Ab.exec(b);return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }function Hb(a, b, c, d, e) {
    for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) {
      "margin" === c && (g += n.css(a, c + R[f], !0, e)), d ? ("content" === c && (g -= n.css(a, "padding" + R[f], !0, e)), "margin" !== c && (g -= n.css(a, "border" + R[f] + "Width", !0, e))) : (g += n.css(a, "padding" + R[f], !0, e), "padding" !== c && (g += n.css(a, "border" + R[f] + "Width", !0, e)));
    }return g;
  }function Ib(a, b, c) {
    var d = !0,
        e = "width" === b ? a.offsetWidth : a.offsetHeight,
        f = wb(a),
        g = "border-box" === n.css(a, "boxSizing", !1, f);if (0 >= e || null == e) {
      if (e = xb(a, b, f), (0 > e || null == e) && (e = a.style[b]), vb.test(e)) return e;d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
    }return e + Hb(a, b, c || (g ? "border" : "content"), d, f) + "px";
  }function Jb(a, b) {
    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
      d = a[g], d.style && (f[g] = L.get(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && S(d) && (f[g] = L.access(d, "olddisplay", tb(d.nodeName)))) : (e = S(d), "none" === c && e || L.set(d, "olddisplay", e ? c : n.css(d, "display"))));
    }for (g = 0; h > g; g++) {
      d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
    }return a;
  }n.extend({ cssHooks: { opacity: { get: function get(a, b) {
          if (b) {
            var c = xb(a, "opacity");return "" === c ? "1" : c;
          }
        } } }, cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": "cssFloat" }, style: function style(a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = n.camelCase(b),
            i = a.style;return b = n.cssProps[h] || (n.cssProps[h] = Fb(i, h)), g = n.cssHooks[b] || n.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = Bb.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(n.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || n.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
      }
    }, css: function css(a, b, c, d) {
      var e,
          f,
          g,
          h = n.camelCase(b);return b = n.cssProps[h] || (n.cssProps[h] = Fb(a.style, h)), g = n.cssHooks[b] || n.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = xb(a, b, d)), "normal" === e && b in Db && (e = Db[b]), "" === c || c ? (f = parseFloat(e), c === !0 || n.isNumeric(f) ? f || 0 : e) : e;
    } }), n.each(["height", "width"], function (a, b) {
    n.cssHooks[b] = { get: function get(a, c, d) {
        return c ? zb.test(n.css(a, "display")) && 0 === a.offsetWidth ? n.swap(a, Cb, function () {
          return Ib(a, b, d);
        }) : Ib(a, b, d) : void 0;
      }, set: function set(a, c, d) {
        var e = d && wb(a);return Gb(a, c, d ? Hb(a, b, d, "border-box" === n.css(a, "boxSizing", !1, e), e) : 0);
      } };
  }), n.cssHooks.marginRight = yb(k.reliableMarginRight, function (a, b) {
    return b ? n.swap(a, { display: "inline-block" }, xb, [a, "marginRight"]) : void 0;
  }), n.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
    n.cssHooks[a + b] = { expand: function expand(c) {
        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) {
          e[a + R[d] + b] = f[d] || f[d - 2] || f[0];
        }return e;
      } }, ub.test(a) || (n.cssHooks[a + b].set = Gb);
  }), n.fn.extend({ css: function css(a, b) {
      return J(this, function (a, b, c) {
        var d,
            e,
            f = {},
            g = 0;if (n.isArray(b)) {
          for (d = wb(a), e = b.length; e > g; g++) {
            f[b[g]] = n.css(a, b[g], !1, d);
          }return f;
        }return void 0 !== c ? n.style(a, b, c) : n.css(a, b);
      }, a, b, arguments.length > 1);
    }, show: function show() {
      return Jb(this, !0);
    }, hide: function hide() {
      return Jb(this);
    }, toggle: function toggle(a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
        S(this) ? n(this).show() : n(this).hide();
      });
    } });function Kb(a, b, c, d, e) {
    return new Kb.prototype.init(a, b, c, d, e);
  }n.Tween = Kb, Kb.prototype = { constructor: Kb, init: function init(a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (n.cssNumber[c] ? "" : "px");
    }, cur: function cur() {
      var a = Kb.propHooks[this.prop];return a && a.get ? a.get(this) : Kb.propHooks._default.get(this);
    }, run: function run(a) {
      var b,
          c = Kb.propHooks[this.prop];return this.pos = b = this.options.duration ? n.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Kb.propHooks._default.set(this), this;
    } }, Kb.prototype.init.prototype = Kb.prototype, Kb.propHooks = { _default: { get: function get(a) {
        var b;return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = n.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];
      }, set: function set(a) {
        n.fx.step[a.prop] ? n.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[n.cssProps[a.prop]] || n.cssHooks[a.prop]) ? n.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
      } } }, Kb.propHooks.scrollTop = Kb.propHooks.scrollLeft = { set: function set(a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    } }, n.easing = { linear: function linear(a) {
      return a;
    }, swing: function swing(a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    } }, n.fx = Kb.prototype.init, n.fx.step = {};var Lb,
      Mb,
      Nb = /^(?:toggle|show|hide)$/,
      Ob = new RegExp("^(?:([+-])=|)(" + Q + ")([a-z%]*)$", "i"),
      Pb = /queueHooks$/,
      Qb = [Vb],
      Rb = { "*": [function (a, b) {
      var c = this.createTween(a, b),
          d = c.cur(),
          e = Ob.exec(b),
          f = e && e[3] || (n.cssNumber[a] ? "" : "px"),
          g = (n.cssNumber[a] || "px" !== f && +d) && Ob.exec(n.css(c.elem, a)),
          h = 1,
          i = 20;if (g && g[3] !== f) {
        f = f || g[3], e = e || [], g = +d || 1;do {
          h = h || ".5", g /= h, n.style(c.elem, a, g + f);
        } while (h !== (h = c.cur() / d) && 1 !== h && --i);
      }return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
    }] };function Sb() {
    return setTimeout(function () {
      Lb = void 0;
    }), Lb = n.now();
  }function Tb(a, b) {
    var c,
        d = 0,
        e = { height: a };for (b = b ? 1 : 0; 4 > d; d += 2 - b) {
      c = R[d], e["margin" + c] = e["padding" + c] = a;
    }return b && (e.opacity = e.width = a), e;
  }function Ub(a, b, c) {
    for (var d, e = (Rb[b] || []).concat(Rb["*"]), f = 0, g = e.length; g > f; f++) {
      if (d = e[f].call(c, b, a)) return d;
    }
  }function Vb(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = this,
        m = {},
        o = a.style,
        p = a.nodeType && S(a),
        q = L.get(a, "fxshow");c.queue || (h = n._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
      h.unqueued || i();
    }), h.unqueued++, l.always(function () {
      l.always(function () {
        h.unqueued--, n.queue(a, "fx").length || h.empty.fire();
      });
    })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = n.css(a, "display"), k = "none" === j ? L.get(a, "olddisplay") || tb(a.nodeName) : j, "inline" === k && "none" === n.css(a, "float") && (o.display = "inline-block")), c.overflow && (o.overflow = "hidden", l.always(function () {
      o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
    }));for (d in b) {
      if (e = b[d], Nb.exec(e)) {
        if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
          if ("show" !== e || !q || void 0 === q[d]) continue;p = !0;
        }m[d] = q && q[d] || n.style(a, d);
      } else j = void 0;
    }if (n.isEmptyObject(m)) "inline" === ("none" === j ? tb(a.nodeName) : j) && (o.display = j);else {
      q ? "hidden" in q && (p = q.hidden) : q = L.access(a, "fxshow", {}), f && (q.hidden = !p), p ? n(a).show() : l.done(function () {
        n(a).hide();
      }), l.done(function () {
        var b;L.remove(a, "fxshow");for (b in m) {
          n.style(a, b, m[b]);
        }
      });for (d in m) {
        g = Ub(p ? q[d] : 0, d, l), d in q || (q[d] = g.start, p && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));
      }
    }
  }function Wb(a, b) {
    var c, d, e, f, g;for (c in a) {
      if (d = n.camelCase(c), e = b[d], f = a[c], n.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = n.cssHooks[d], g && "expand" in g) {
        f = g.expand(f), delete a[d];for (c in f) {
          c in a || (a[c] = f[c], b[c] = e);
        }
      } else b[d] = e;
    }
  }function Xb(a, b, c) {
    var d,
        e,
        f = 0,
        g = Qb.length,
        h = n.Deferred().always(function () {
      delete i.elem;
    }),
        i = function i() {
      if (e) return !1;for (var b = Lb || Sb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {
        j.tweens[g].run(f);
      }return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
    },
        j = h.promise({ elem: a, props: n.extend({}, b), opts: n.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: Lb || Sb(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {
        var d = n.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
      }, stop: function stop(b) {
        var c = 0,
            d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; d > c; c++) {
          j.tweens[c].run(1);
        }return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
      } }),
        k = j.props;for (Wb(k, j.opts.specialEasing); g > f; f++) {
      if (d = Qb[f].call(j, a, k, j.opts)) return d;
    }return n.map(k, Ub, j), n.isFunction(j.opts.start) && j.opts.start.call(a, j), n.fx.timer(n.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }n.Animation = n.extend(Xb, { tweener: function tweener(a, b) {
      n.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");for (var c, d = 0, e = a.length; e > d; d++) {
        c = a[d], Rb[c] = Rb[c] || [], Rb[c].unshift(b);
      }
    }, prefilter: function prefilter(a, b) {
      b ? Qb.unshift(a) : Qb.push(a);
    } }), n.speed = function (a, b, c) {
    var d = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? n.extend({}, a) : { complete: c || !c && b || n.isFunction(a) && a, duration: a, easing: c && b || b && !n.isFunction(b) && b };return d.duration = n.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in n.fx.speeds ? n.fx.speeds[d.duration] : n.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {
      n.isFunction(d.old) && d.old.call(this), d.queue && n.dequeue(this, d.queue);
    }, d;
  }, n.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {
      return this.filter(S).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
    }, animate: function animate(a, b, c, d) {
      var e = n.isEmptyObject(a),
          f = n.speed(b, c, d),
          g = function g() {
        var b = Xb(this, n.extend({}, a), f);(e || L.get(this, "finish")) && b.stop(!0);
      };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    }, stop: function stop(a, b, c) {
      var d = function d(a) {
        var b = a.stop;delete a.stop, b(c);
      };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
        var b = !0,
            e = null != a && a + "queueHooks",
            f = n.timers,
            g = L.get(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
          g[e] && g[e].stop && Pb.test(e) && d(g[e]);
        }for (e = f.length; e--;) {
          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
        }(b || !c) && n.dequeue(this, a);
      });
    }, finish: function finish(a) {
      return a !== !1 && (a = a || "fx"), this.each(function () {
        var b,
            c = L.get(this),
            d = c[a + "queue"],
            e = c[a + "queueHooks"],
            f = n.timers,
            g = d ? d.length : 0;for (c.finish = !0, n.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
        }for (b = 0; g > b; b++) {
          d[b] && d[b].finish && d[b].finish.call(this);
        }delete c.finish;
      });
    } }), n.each(["toggle", "show", "hide"], function (a, b) {
    var c = n.fn[b];n.fn[b] = function (a, d, e) {
      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(Tb(b, !0), a, d, e);
    };
  }), n.each({ slideDown: Tb("show"), slideUp: Tb("hide"), slideToggle: Tb("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
    n.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), n.timers = [], n.fx.tick = function () {
    var a,
        b = 0,
        c = n.timers;for (Lb = n.now(); b < c.length; b++) {
      a = c[b], a() || c[b] !== a || c.splice(b--, 1);
    }c.length || n.fx.stop(), Lb = void 0;
  }, n.fx.timer = function (a) {
    n.timers.push(a), a() ? n.fx.start() : n.timers.pop();
  }, n.fx.interval = 13, n.fx.start = function () {
    Mb || (Mb = setInterval(n.fx.tick, n.fx.interval));
  }, n.fx.stop = function () {
    clearInterval(Mb), Mb = null;
  }, n.fx.speeds = { slow: 600, fast: 200, _default: 400 }, n.fn.delay = function (a, b) {
    return a = n.fx ? n.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
      var d = setTimeout(b, a);c.stop = function () {
        clearTimeout(d);
      };
    });
  }, function () {
    var a = l.createElement("input"),
        b = l.createElement("select"),
        c = b.appendChild(l.createElement("option"));a.type = "checkbox", k.checkOn = "" !== a.value, k.optSelected = c.selected, b.disabled = !0, k.optDisabled = !c.disabled, a = l.createElement("input"), a.value = "t", a.type = "radio", k.radioValue = "t" === a.value;
  }();var Yb,
      Zb,
      $b = n.expr.attrHandle;n.fn.extend({ attr: function attr(a, b) {
      return J(this, n.attr, a, b, arguments.length > 1);
    }, removeAttr: function removeAttr(a) {
      return this.each(function () {
        n.removeAttr(this, a);
      });
    } }), n.extend({ attr: function attr(a, b, c) {
      var d,
          e,
          f = a.nodeType;if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === U ? n.prop(a, b, c) : (1 === f && n.isXMLDoc(a) || (b = b.toLowerCase(), d = n.attrHooks[b] || (n.expr.match.bool.test(b) ? Zb : Yb)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = n.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void n.removeAttr(a, b));
    }, removeAttr: function removeAttr(a, b) {
      var c,
          d,
          e = 0,
          f = b && b.match(E);if (f && 1 === a.nodeType) while (c = f[e++]) {
        d = n.propFix[c] || c, n.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c);
      }
    }, attrHooks: { type: { set: function set(a, b) {
          if (!k.radioValue && "radio" === b && n.nodeName(a, "input")) {
            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
          }
        } } } }), Zb = { set: function set(a, b, c) {
      return b === !1 ? n.removeAttr(a, c) : a.setAttribute(c, c), c;
    } }, n.each(n.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = $b[b] || n.find.attr;$b[b] = function (a, b, d) {
      var e, f;return d || (f = $b[b], $b[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, $b[b] = f), e;
    };
  });var _b = /^(?:input|select|textarea|button)$/i;n.fn.extend({ prop: function prop(a, b) {
      return J(this, n.prop, a, b, arguments.length > 1);
    }, removeProp: function removeProp(a) {
      return this.each(function () {
        delete this[n.propFix[a] || a];
      });
    } }), n.extend({ propFix: { "for": "htmlFor", "class": "className" }, prop: function prop(a, b, c) {
      var d,
          e,
          f,
          g = a.nodeType;if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !n.isXMLDoc(a), f && (b = n.propFix[b] || b, e = n.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    }, propHooks: { tabIndex: { get: function get(a) {
          return a.hasAttribute("tabindex") || _b.test(a.nodeName) || a.href ? a.tabIndex : -1;
        } } } }), k.optSelected || (n.propHooks.selected = { get: function get(a) {
      var b = a.parentNode;return b && b.parentNode && b.parentNode.selectedIndex, null;
    } }), n.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    n.propFix[this.toLowerCase()] = this;
  });var ac = /[\t\r\n\f]/g;n.fn.extend({ addClass: function addClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = "string" == typeof a && a,
          i = 0,
          j = this.length;if (n.isFunction(a)) return this.each(function (b) {
        n(this).addClass(a.call(this, b, this.className));
      });if (h) for (b = (a || "").match(E) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : " ")) {
          f = 0;while (e = b[f++]) {
            d.indexOf(" " + e + " ") < 0 && (d += e + " ");
          }g = n.trim(d), c.className !== g && (c.className = g);
        }
      }return this;
    }, removeClass: function removeClass(a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h = 0 === arguments.length || "string" == typeof a && a,
          i = 0,
          j = this.length;if (n.isFunction(a)) return this.each(function (b) {
        n(this).removeClass(a.call(this, b, this.className));
      });if (h) for (b = (a || "").match(E) || []; j > i; i++) {
        if (c = this[i], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ac, " ") : "")) {
          f = 0;while (e = b[f++]) {
            while (d.indexOf(" " + e + " ") >= 0) {
              d = d.replace(" " + e + " ", " ");
            }
          }g = a ? n.trim(d) : "", c.className !== g && (c.className = g);
        }
      }return this;
    }, toggleClass: function toggleClass(a, b) {
      var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(n.isFunction(a) ? function (c) {
        n(this).toggleClass(a.call(this, c, this.className, b), b);
      } : function () {
        if ("string" === c) {
          var b,
              d = 0,
              e = n(this),
              f = a.match(E) || [];while (b = f[d++]) {
            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
          }
        } else (c === U || "boolean" === c) && (this.className && L.set(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : L.get(this, "__className__") || "");
      });
    }, hasClass: function hasClass(a) {
      for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
        if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ac, " ").indexOf(b) >= 0) return !0;
      }return !1;
    } });var bc = /\r/g;n.fn.extend({ val: function val(a) {
      var b,
          c,
          d,
          e = this[0];{
        if (arguments.length) return d = n.isFunction(a), this.each(function (c) {
          var e;1 === this.nodeType && (e = d ? a.call(this, c, n(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : n.isArray(e) && (e = n.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = n.valHooks[this.type] || n.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });if (e) return b = n.valHooks[e.type] || n.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(bc, "") : null == c ? "" : c);
      }
    } }), n.extend({ valHooks: { option: { get: function get(a) {
          var b = n.find.attr(a, "value");return null != b ? b : n.trim(n.text(a));
        } }, select: { get: function get(a) {
          for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && n.nodeName(c.parentNode, "optgroup"))) {
              if (b = n(c).val(), f) return b;g.push(b);
            }
          }return g;
        }, set: function set(a, b) {
          var c,
              d,
              e = a.options,
              f = n.makeArray(b),
              g = e.length;while (g--) {
            d = e[g], (d.selected = n.inArray(d.value, f) >= 0) && (c = !0);
          }return c || (a.selectedIndex = -1), f;
        } } } }), n.each(["radio", "checkbox"], function () {
    n.valHooks[this] = { set: function set(a, b) {
        return n.isArray(b) ? a.checked = n.inArray(n(a).val(), b) >= 0 : void 0;
      } }, k.checkOn || (n.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  }), n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
    n.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), n.fn.extend({ hover: function hover(a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    }, bind: function bind(a, b, c) {
      return this.on(a, null, b, c);
    }, unbind: function unbind(a, b) {
      return this.off(a, null, b);
    }, delegate: function delegate(a, b, c, d) {
      return this.on(b, a, c, d);
    }, undelegate: function undelegate(a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    } });var cc = n.now(),
      dc = /\?/;n.parseJSON = function (a) {
    return JSON.parse(a + "");
  }, n.parseXML = function (a) {
    var b, c;if (!a || "string" != typeof a) return null;try {
      c = new DOMParser(), b = c.parseFromString(a, "text/xml");
    } catch (d) {
      b = void 0;
    }return (!b || b.getElementsByTagName("parsererror").length) && n.error("Invalid XML: " + a), b;
  };var ec,
      fc,
      gc = /#.*$/,
      hc = /([?&])_=[^&]*/,
      ic = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      jc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      kc = /^(?:GET|HEAD)$/,
      lc = /^\/\//,
      mc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
      nc = {},
      oc = {},
      pc = "*/".concat("*");try {
    fc = location.href;
  } catch (qc) {
    fc = l.createElement("a"), fc.href = "", fc = fc.href;
  }ec = mc.exec(fc.toLowerCase()) || [];function rc(a) {
    return function (b, c) {
      "string" != typeof b && (c = b, b = "*");var d,
          e = 0,
          f = b.toLowerCase().match(E) || [];if (n.isFunction(c)) while (d = f[e++]) {
        "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
      }
    };
  }function sc(a, b, c, d) {
    var e = {},
        f = a === oc;function g(h) {
      var i;return e[h] = !0, n.each(a[h] || [], function (a, h) {
        var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }return g(b.dataTypes[0]) || !e["*"] && g("*");
  }function tc(a, b) {
    var c,
        d,
        e = n.ajaxSettings.flatOptions || {};for (c in b) {
      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
    }return d && n.extend(!0, a, d), a;
  }function uc(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;while ("*" === i[0]) {
      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
    }if (d) for (e in h) {
      if (h[e] && h[e].test(d)) {
        i.unshift(e);break;
      }
    }if (i[0] in c) f = i[0];else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;break;
        }g || (g = e);
      }f = f || g;
    }return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }function vc(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();if (k[1]) for (g in a.converters) {
      j[g.toLowerCase()] = a.converters[g];
    }f = k.shift();while (f) {
      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
        if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
          if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
          }
        }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
          b = g(b);
        } catch (l) {
          return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
        }
      }
    }return { state: "success", data: b };
  }n.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: fc, type: "GET", isLocal: jc.test(ec[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": pc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": n.parseJSON, "text xml": n.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {
      return b ? tc(tc(a, n.ajaxSettings), b) : tc(n.ajaxSettings, a);
    }, ajaxPrefilter: rc(nc), ajaxTransport: rc(oc), ajax: function ajax(a, b) {
      "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && (b = a, a = void 0), b = b || {};var c,
          d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = n.ajaxSetup({}, b),
          l = k.context || k,
          m = k.context && (l.nodeType || l.jquery) ? n(l) : n.event,
          o = n.Deferred(),
          p = n.Callbacks("once memory"),
          q = k.statusCode || {},
          r = {},
          s = {},
          t = 0,
          u = "canceled",
          v = { readyState: 0, getResponseHeader: function getResponseHeader(a) {
          var b;if (2 === t) {
            if (!f) {
              f = {};while (b = ic.exec(e)) {
                f[b[1].toLowerCase()] = b[2];
              }
            }b = f[a.toLowerCase()];
          }return null == b ? null : b;
        }, getAllResponseHeaders: function getAllResponseHeaders() {
          return 2 === t ? e : null;
        }, setRequestHeader: function setRequestHeader(a, b) {
          var c = a.toLowerCase();return t || (a = s[c] = s[c] || a, r[a] = b), this;
        }, overrideMimeType: function overrideMimeType(a) {
          return t || (k.mimeType = a), this;
        }, statusCode: function statusCode(a) {
          var b;if (a) if (2 > t) for (b in a) {
            q[b] = [q[b], a[b]];
          } else v.always(a[v.status]);return this;
        }, abort: function abort(a) {
          var b = a || u;return c && c.abort(b), x(0, b), this;
        } };if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || fc) + "").replace(gc, "").replace(lc, ec[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = n.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (h = mc.exec(k.url.toLowerCase()), k.crossDomain = !(!h || h[1] === ec[1] && h[2] === ec[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (ec[3] || ("http:" === ec[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = n.param(k.data, k.traditional)), sc(nc, k, b, v), 2 === t) return v;i = k.global, i && 0 === n.active++ && n.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !kc.test(k.type), d = k.url, k.hasContent || (k.data && (d = k.url += (dc.test(d) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = hc.test(d) ? d.replace(hc, "$1_=" + cc++) : d + (dc.test(d) ? "&" : "?") + "_=" + cc++)), k.ifModified && (n.lastModified[d] && v.setRequestHeader("If-Modified-Since", n.lastModified[d]), n.etag[d] && v.setRequestHeader("If-None-Match", n.etag[d])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + pc + "; q=0.01" : "") : k.accepts["*"]);for (j in k.headers) {
        v.setRequestHeader(j, k.headers[j]);
      }if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();u = "abort";for (j in { success: 1, error: 1, complete: 1 }) {
        v[j](k[j]);
      }if (c = sc(oc, k, b, v)) {
        v.readyState = 1, i && m.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
          v.abort("timeout");
        }, k.timeout));try {
          t = 1, c.send(r, x);
        } catch (w) {
          if (!(2 > t)) throw w;x(-1, w);
        }
      } else x(-1, "No Transport");function x(a, b, f, h) {
        var j,
            r,
            s,
            u,
            w,
            x = b;2 !== t && (t = 2, g && clearTimeout(g), c = void 0, e = h || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, f && (u = uc(k, v, f)), u = vc(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (n.lastModified[d] = w), w = v.getResponseHeader("etag"), w && (n.etag[d] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, i && m.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), i && (m.trigger("ajaxComplete", [v, k]), --n.active || n.event.trigger("ajaxStop")));
      }return v;
    }, getJSON: function getJSON(a, b, c) {
      return n.get(a, b, c, "json");
    }, getScript: function getScript(a, b) {
      return n.get(a, void 0, b, "script");
    } }), n.each(["get", "post"], function (a, b) {
    n[b] = function (a, c, d, e) {
      return n.isFunction(c) && (e = e || d, d = c, c = void 0), n.ajax({ url: a, type: b, dataType: e, data: c, success: d });
    };
  }), n.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
    n.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), n._evalUrl = function (a) {
    return n.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 });
  }, n.fn.extend({ wrapAll: function wrapAll(a) {
      var b;return n.isFunction(a) ? this.each(function (b) {
        n(this).wrapAll(a.call(this, b));
      }) : (this[0] && (b = n(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
        var a = this;while (a.firstElementChild) {
          a = a.firstElementChild;
        }return a;
      }).append(this)), this);
    }, wrapInner: function wrapInner(a) {
      return this.each(n.isFunction(a) ? function (b) {
        n(this).wrapInner(a.call(this, b));
      } : function () {
        var b = n(this),
            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
      });
    }, wrap: function wrap(a) {
      var b = n.isFunction(a);return this.each(function (c) {
        n(this).wrapAll(b ? a.call(this, c) : a);
      });
    }, unwrap: function unwrap() {
      return this.parent().each(function () {
        n.nodeName(this, "body") || n(this).replaceWith(this.childNodes);
      }).end();
    } }), n.expr.filters.hidden = function (a) {
    return a.offsetWidth <= 0 && a.offsetHeight <= 0;
  }, n.expr.filters.visible = function (a) {
    return !n.expr.filters.hidden(a);
  };var wc = /%20/g,
      xc = /\[\]$/,
      yc = /\r?\n/g,
      zc = /^(?:submit|button|image|reset|file)$/i,
      Ac = /^(?:input|select|textarea|keygen)/i;function Bc(a, b, c, d) {
    var e;if (n.isArray(b)) n.each(b, function (b, e) {
      c || xc.test(a) ? d(a, e) : Bc(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? b : "") + "]", e, c, d);
    });else if (c || "object" !== n.type(b)) d(a, b);else for (e in b) {
      Bc(a + "[" + e + "]", b[e], c, d);
    }
  }n.param = function (a, b) {
    var c,
        d = [],
        e = function e(a, b) {
      b = n.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
    };if (void 0 === b && (b = n.ajaxSettings && n.ajaxSettings.traditional), n.isArray(a) || a.jquery && !n.isPlainObject(a)) n.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) {
      Bc(c, a[c], b, e);
    }return d.join("&").replace(wc, "+");
  }, n.fn.extend({ serialize: function serialize() {
      return n.param(this.serializeArray());
    }, serializeArray: function serializeArray() {
      return this.map(function () {
        var a = n.prop(this, "elements");return a ? n.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;return this.name && !n(this).is(":disabled") && Ac.test(this.nodeName) && !zc.test(a) && (this.checked || !T.test(a));
      }).map(function (a, b) {
        var c = n(this).val();return null == c ? null : n.isArray(c) ? n.map(c, function (a) {
          return { name: b.name, value: a.replace(yc, "\r\n") };
        }) : { name: b.name, value: c.replace(yc, "\r\n") };
      }).get();
    } }), n.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (a) {}
  };var Cc = 0,
      Dc = {},
      Ec = { 0: 200, 1223: 204 },
      Fc = n.ajaxSettings.xhr();a.ActiveXObject && n(a).on("unload", function () {
    for (var a in Dc) {
      Dc[a]();
    }
  }), k.cors = !!Fc && "withCredentials" in Fc, k.ajax = Fc = !!Fc, n.ajaxTransport(function (a) {
    var _b3;return k.cors || Fc && !a.crossDomain ? { send: function send(c, d) {
        var e,
            f = a.xhr(),
            g = ++Cc;if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
          f[e] = a.xhrFields[e];
        }a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");for (e in c) {
          f.setRequestHeader(e, c[e]);
        }_b3 = function b(a) {
          return function () {
            _b3 && (delete Dc[g], _b3 = f.onload = f.onerror = null, "abort" === a ? f.abort() : "error" === a ? d(f.status, f.statusText) : d(Ec[f.status] || f.status, f.statusText, "string" == typeof f.responseText ? { text: f.responseText } : void 0, f.getAllResponseHeaders()));
          };
        }, f.onload = _b3(), f.onerror = _b3("error"), _b3 = Dc[g] = _b3("abort");try {
          f.send(a.hasContent && a.data || null);
        } catch (h) {
          if (_b3) throw h;
        }
      }, abort: function abort() {
        _b3 && _b3();
      } } : void 0;
  }), n.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function textScript(a) {
        return n.globalEval(a), a;
      } } }), n.ajaxPrefilter("script", function (a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), n.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var b, _c;return { send: function send(d, e) {
          b = n("<script>").prop({ async: !0, charset: a.scriptCharset, src: a.url }).on("load error", _c = function c(a) {
            b.remove(), _c = null, a && e("error" === a.type ? 404 : 200, a.type);
          }), l.head.appendChild(b[0]);
        }, abort: function abort() {
          _c && _c();
        } };
    }
  });var Gc = [],
      Hc = /(=)\?(?=&|$)|\?\?/;n.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
      var a = Gc.pop() || n.expando + "_" + cc++;return this[a] = !0, a;
    } }), n.ajaxPrefilter("json jsonp", function (b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (Hc.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && Hc.test(b.data) && "data");return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = n.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Hc, "$1" + e) : b.jsonp !== !1 && (b.url += (dc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
      return g || n.error(e + " was not called"), g[0];
    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
      g = arguments;
    }, d.always(function () {
      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Gc.push(e)), g && n.isFunction(f) && f(g[0]), g = f = void 0;
    }), "script") : void 0;
  }), n.parseHTML = function (a, b, c) {
    if (!a || "string" != typeof a) return null;"boolean" == typeof b && (c = b, b = !1), b = b || l;var d = v.exec(a),
        e = !c && [];return d ? [b.createElement(d[1])] : (d = n.buildFragment([a], b, e), e && e.length && n(e).remove(), n.merge([], d.childNodes));
  };var Ic = n.fn.load;n.fn.load = function (a, b, c) {
    if ("string" != typeof a && Ic) return Ic.apply(this, arguments);var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");return h >= 0 && (d = n.trim(a.slice(h)), a = a.slice(0, h)), n.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (e = "POST"), g.length > 0 && n.ajax({ url: a, type: e, dataType: "html", data: b }).done(function (a) {
      f = arguments, g.html(d ? n("<div>").append(n.parseHTML(a)).find(d) : a);
    }).complete(c && function (a, b) {
      g.each(c, f || [a.responseText, b, a]);
    }), this;
  }, n.expr.filters.animated = function (a) {
    return n.grep(n.timers, function (b) {
      return a === b.elem;
    }).length;
  };var Jc = a.document.documentElement;function Kc(a) {
    return n.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
  }n.offset = { setOffset: function setOffset(a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = n.css(a, "position"),
          l = n(a),
          m = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = n.css(a, "top"), i = n.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), n.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    } }, n.fn.extend({ offset: function offset(a) {
      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
        n.offset.setOffset(this, a, b);
      });var b,
          c,
          d = this[0],
          e = { top: 0, left: 0 },
          f = d && d.ownerDocument;if (f) return b = f.documentElement, n.contains(b, d) ? (_typeof(d.getBoundingClientRect) !== U && (e = d.getBoundingClientRect()), c = Kc(f), { top: e.top + c.pageYOffset - b.clientTop, left: e.left + c.pageXOffset - b.clientLeft }) : e;
    }, position: function position() {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = { top: 0, left: 0 };return "fixed" === n.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), n.nodeName(a[0], "html") || (d = a.offset()), d.top += n.css(a[0], "borderTopWidth", !0), d.left += n.css(a[0], "borderLeftWidth", !0)), { top: b.top - d.top - n.css(c, "marginTop", !0), left: b.left - d.left - n.css(c, "marginLeft", !0) };
      }
    }, offsetParent: function offsetParent() {
      return this.map(function () {
        var a = this.offsetParent || Jc;while (a && !n.nodeName(a, "html") && "static" === n.css(a, "position")) {
          a = a.offsetParent;
        }return a || Jc;
      });
    } }), n.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (b, c) {
    var d = "pageYOffset" === c;n.fn[b] = function (e) {
      return J(this, function (b, e, f) {
        var g = Kc(b);return void 0 === f ? g ? g[c] : b[e] : void (g ? g.scrollTo(d ? a.pageXOffset : f, d ? f : a.pageYOffset) : b[e] = f);
      }, b, e, arguments.length, null);
    };
  }), n.each(["top", "left"], function (a, b) {
    n.cssHooks[b] = yb(k.pixelPosition, function (a, c) {
      return c ? (c = xb(a, b), vb.test(c) ? n(a).position()[b] + "px" : c) : void 0;
    });
  }), n.each({ Height: "height", Width: "width" }, function (a, b) {
    n.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
      n.fn[d] = function (d, e) {
        var f = arguments.length && (c || "boolean" != typeof d),
            g = c || (d === !0 || e === !0 ? "margin" : "border");return J(this, function (b, c, d) {
          var e;return n.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? n.css(b, c, g) : n.style(b, c, d, g);
        }, b, f ? d : void 0, f, null);
      };
    });
  }), n.fn.size = function () {
    return this.length;
  }, n.fn.andSelf = n.fn.addBack, "function" == "function" && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
    return n;
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Lc = a.jQuery,
      Mc = a.$;return n.noConflict = function (b) {
    return a.$ === n && (a.$ = Mc), b && a.jQuery === n && (a.jQuery = Lc), n;
  }, (typeof b === "undefined" ? "undefined" : _typeof(b)) === U && (a.jQuery = a.$ = n), n;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./assets/js/jquery.easing.js":
/*!************************************!*\
  !*** ./assets/js/jquery.easing.js ***!
  \************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 * 
 * Open source under the BSD License. 
 * 
 * Copyright Â© 2008 George McGinley Smith
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list 
 * of conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * 
 * Neither the name of the author nor the names of contributors may be used to endorse 
 * or promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE. 
 *
*/

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend(jQuery.easing, {
	def: 'easeOutQuad',
	swing: function swing(x, t, b, c, d) {
		//alert(jQuery.easing.default);
		return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
	},
	easeInQuad: function easeInQuad(x, t, b, c, d) {
		return c * (t /= d) * t + b;
	},
	easeOutQuad: function easeOutQuad(x, t, b, c, d) {
		return -c * (t /= d) * (t - 2) + b;
	},
	easeInOutQuad: function easeInOutQuad(x, t, b, c, d) {
		if ((t /= d / 2) < 1) return c / 2 * t * t + b;
		return -c / 2 * (--t * (t - 2) - 1) + b;
	},
	easeInCubic: function easeInCubic(x, t, b, c, d) {
		return c * (t /= d) * t * t + b;
	},
	easeOutCubic: function easeOutCubic(x, t, b, c, d) {
		return c * ((t = t / d - 1) * t * t + 1) + b;
	},
	easeInOutCubic: function easeInOutCubic(x, t, b, c, d) {
		if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
		return c / 2 * ((t -= 2) * t * t + 2) + b;
	},
	easeInQuart: function easeInQuart(x, t, b, c, d) {
		return c * (t /= d) * t * t * t + b;
	},
	easeOutQuart: function easeOutQuart(x, t, b, c, d) {
		return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	},
	easeInOutQuart: function easeInOutQuart(x, t, b, c, d) {
		if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
		return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	},
	easeInQuint: function easeInQuint(x, t, b, c, d) {
		return c * (t /= d) * t * t * t * t + b;
	},
	easeOutQuint: function easeOutQuint(x, t, b, c, d) {
		return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	},
	easeInOutQuint: function easeInOutQuint(x, t, b, c, d) {
		if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
		return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	},
	easeInSine: function easeInSine(x, t, b, c, d) {
		return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	},
	easeOutSine: function easeOutSine(x, t, b, c, d) {
		return c * Math.sin(t / d * (Math.PI / 2)) + b;
	},
	easeInOutSine: function easeInOutSine(x, t, b, c, d) {
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	},
	easeInExpo: function easeInExpo(x, t, b, c, d) {
		return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
	},
	easeOutExpo: function easeOutExpo(x, t, b, c, d) {
		return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
	},
	easeInOutExpo: function easeInOutExpo(x, t, b, c, d) {
		if (t == 0) return b;
		if (t == d) return b + c;
		if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
		return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
	},
	easeInCirc: function easeInCirc(x, t, b, c, d) {
		return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
	},
	easeOutCirc: function easeOutCirc(x, t, b, c, d) {
		return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
	},
	easeInOutCirc: function easeInOutCirc(x, t, b, c, d) {
		if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
		return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
	},
	easeInElastic: function easeInElastic(x, t, b, c, d) {
		var s = 1.70158;var p = 0;var a = c;
		if (t == 0) return b;if ((t /= d) == 1) return b + c;if (!p) p = d * .3;
		if (a < Math.abs(c)) {
			a = c;var s = p / 4;
		} else var s = p / (2 * Math.PI) * Math.asin(c / a);
		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
	},
	easeOutElastic: function easeOutElastic(x, t, b, c, d) {
		var s = 1.70158;var p = 0;var a = c;
		if (t == 0) return b;if ((t /= d) == 1) return b + c;if (!p) p = d * .3;
		if (a < Math.abs(c)) {
			a = c;var s = p / 4;
		} else var s = p / (2 * Math.PI) * Math.asin(c / a);
		return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
	},
	easeInOutElastic: function easeInOutElastic(x, t, b, c, d) {
		var s = 1.70158;var p = 0;var a = c;
		if (t == 0) return b;if ((t /= d / 2) == 2) return b + c;if (!p) p = d * (.3 * 1.5);
		if (a < Math.abs(c)) {
			a = c;var s = p / 4;
		} else var s = p / (2 * Math.PI) * Math.asin(c / a);
		if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
	},
	easeInBack: function easeInBack(x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c * (t /= d) * t * ((s + 1) * t - s) + b;
	},
	easeOutBack: function easeOutBack(x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
	},
	easeInOutBack: function easeInOutBack(x, t, b, c, d, s) {
		if (s == undefined) s = 1.70158;
		if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
		return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
	},
	easeInBounce: function easeInBounce(x, t, b, c, d) {
		return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
	},
	easeOutBounce: function easeOutBounce(x, t, b, c, d) {
		if ((t /= d) < 1 / 2.75) {
			return c * (7.5625 * t * t) + b;
		} else if (t < 2 / 2.75) {
			return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
		} else if (t < 2.5 / 2.75) {
			return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
		} else {
			return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
		}
	},
	easeInOutBounce: function easeInOutBounce(x, t, b, c, d) {
		if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
		return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
	}
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/nav-anime.js":
/*!********************************!*\
  !*** ./assets/js/nav-anime.js ***!
  \********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * demo.js
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2017, Codrops
 * http://www.codrops.com
 */
{
	setTimeout(function () {
		return document.body.classList.add('render');
	}, 60);
	var navdemos = Array.from(document.querySelectorAll('nav.demos > .demo'));
	var total = navdemos.length;
	var current = navdemos.findIndex(function (el) {
		return el.classList.contains('demo--current');
	});
	var navigate = function navigate(linkEl) {
		document.body.classList.remove('render');
		document.body.addEventListener('transitionend', function () {
			return window.location = linkEl.href;
		});
	};
	navdemos.forEach(function (link) {
		return link.addEventListener('click', function (ev) {
			ev.preventDefault();
			navigate(ev.target);
		});
	});
	document.addEventListener('keydown', function (ev) {
		var keyCode = ev.keyCode || ev.which;
		var linkEl = void 0;
		if (keyCode === 37) {
			linkEl = current > 0 ? navdemos[current - 1] : navdemos[total - 1];
		} else if (keyCode === 39) {
			linkEl = current < total - 1 ? navdemos[current + 1] : navdemos[0];
		} else {
			return false;
		}
		navigate(linkEl);
	});
}

/**
 * demo-mohe.js
 * http://www.codrops.com
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 * 
 * Copyright 2017, Codrops
 * http://www.codrops.com
 */
{
	var items = Array.from(document.querySelectorAll('.menu > .menu__item'));

	var Item = function () {
		function Item(el) {
			_classCallCheck(this, Item);

			this.DOM = {};
			this.DOM.el = el;
			this.DOM.name = el.querySelector('.menu__item-name');
			charming(this.DOM.name);
			this.DOM.nameLetters = Array.from(this.DOM.name.querySelectorAll('span'));
			this.initEvents();
		}

		_createClass(Item, [{
			key: 'initEvents',
			value: function initEvents() {
				var _this = this;

				this.mouseenterFn = function () {
					return _this.mouseTimeout = setTimeout(function () {
						_this.isActive = true;
						anime.remove(_this.DOM.nameLetters);
						anime({
							targets: _this.DOM.nameLetters,
							duration: 700,
							easing: [0.7, 0, 0.3, 1],
							scale: function scale(t, i) {
								return [1, anime.random(0, 1) ? 0.8 : 1.4];
							},
							translateX: function translateX(t, i) {
								var elBounds = _this.DOM.el.getBoundingClientRect();
								var x1 = elBounds.left + elBounds.width / 2;
								var y1 = elBounds.top + elBounds.height / 2;

								var targetBounds = t.getBoundingClientRect();
								var x2 = targetBounds.left + targetBounds.width / 2;
								var y2 = targetBounds.top + targetBounds.height / 2;

								var dist = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
								var maxDist = Math.sqrt(Math.pow(elBounds.left - x1, 2) + Math.pow(elBounds.top - y1, 2));
								var maxTX = x2 < x1 ? -250 : 250;

								return maxTX / maxDist * dist;
							},
							translateY: function translateY(t, i) {
								return [0, anime.random(-40, 40)];
							},
							rotateZ: function rotateZ(t, i) {
								return [0, anime.random(-20, 20)];
							},
							opacity: function opacity(t, i) {
								return 0.2;
							}
						});
					}, 50);
				};

				this.mouseleaveFn = function () {
					clearTimeout(_this.mouseTimeout);
					if (!_this.isActive) return;
					_this.isActive = false;
					anime.remove(_this.DOM.nameLetters);
					anime({
						targets: _this.DOM.nameLetters,
						duration: 700,
						easing: [0.7, 0, 0.3, 1],
						scale: 1,
						translateX: 0,
						translateY: 0,
						rotateZ: 0,
						opacity: 1
					});
				};

				this.DOM.el.addEventListener('mouseenter', this.mouseenterFn);
				this.DOM.el.addEventListener('touchstart', this.mouseenterFn);
				this.DOM.el.addEventListener('mouseleave', this.mouseleaveFn);
				this.DOM.el.addEventListener('touchend', this.mouseleaveFn);
			}
		}]);

		return Item;
	}();

	;

	items.forEach(function (item) {
		return new Item(item);
	});
};

/***/ }),

/***/ "./assets/js/retina-1.1.0.min.js":
/*!***************************************!*\
  !*** ./assets/js/retina-1.1.0.min.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Retina.js v1.1.0
 *
 * Copyright 2013 Imulus, LLC
 * Released under the MIT license
 *
 * Retina.js is an open source script that makes it easy to serve
 * high-resolution images to devices with retina displays.
 */
(function () {
  var root =  false ? window : exports;var config = { check_mime_type: true };root.Retina = Retina;function Retina() {}Retina.configure = function (options) {
    if (options == null) options = {};for (var prop in options) {
      config[prop] = options[prop];
    }
  };Retina.init = function (context) {
    if (context == null) context = root;var existing_onload = context.onload || new Function();context.onload = function () {
      var images = document.getElementsByTagName("img"),
          retinaImages = [],
          i,
          image;for (i = 0; i < images.length; i++) {
        image = images[i];retinaImages.push(new RetinaImage(image));
      }existing_onload();
    };
  };Retina.isRetina = function () {
    var mediaQuery = "(-webkit-min-device-pixel-ratio: 1.5),                      (min--moz-device-pixel-ratio: 1.5),                      (-o-min-device-pixel-ratio: 3/2),                      (min-resolution: 1.5dppx)";if (root.devicePixelRatio > 1) return true;if (root.matchMedia && root.matchMedia(mediaQuery).matches) return true;return false;
  };root.RetinaImagePath = RetinaImagePath;function RetinaImagePath(path, at_2x_path) {
    this.path = path;if (typeof at_2x_path !== "undefined" && at_2x_path !== null) {
      this.at_2x_path = at_2x_path;this.perform_check = false;
    } else {
      this.at_2x_path = path.replace(/\.\w+$/, function (match) {
        return "@2x" + match;
      });this.perform_check = true;
    }
  }RetinaImagePath.confirmed_paths = [];RetinaImagePath.prototype.is_external = function () {
    return !!(this.path.match(/^https?\:/i) && !this.path.match("//" + document.domain));
  };RetinaImagePath.prototype.check_2x_variant = function (callback) {
    var http,
        that = this;if (this.is_external()) {
      return callback(false);
    } else if (!this.perform_check && typeof this.at_2x_path !== "undefined" && this.at_2x_path !== null) {
      return callback(true);
    } else if (this.at_2x_path in RetinaImagePath.confirmed_paths) {
      return callback(true);
    } else {
      http = new XMLHttpRequest();http.open("HEAD", this.at_2x_path);http.onreadystatechange = function () {
        if (http.readyState != 4) {
          return callback(false);
        }if (http.status >= 200 && http.status <= 399) {
          if (config.check_mime_type) {
            var type = http.getResponseHeader("Content-Type");if (type == null || !type.match(/^image/i)) {
              return callback(false);
            }
          }RetinaImagePath.confirmed_paths.push(that.at_2x_path);return callback(true);
        } else {
          return callback(false);
        }
      };http.send();
    }
  };function RetinaImage(el) {
    this.el = el;this.path = new RetinaImagePath(this.el.getAttribute("src"), this.el.getAttribute("data-at2x"));var that = this;this.path.check_2x_variant(function (hasVariant) {
      if (hasVariant) that.swap();
    });
  }root.RetinaImage = RetinaImage;RetinaImage.prototype.swap = function (path) {
    if (typeof path == "undefined") path = this.path.at_2x_path;var that = this;function load() {
      if (!that.el.complete) {
        setTimeout(load, 5);
      } else {
        that.el.setAttribute("width", that.el.offsetWidth);that.el.setAttribute("height", that.el.offsetHeight);that.el.setAttribute("src", path);
      }
    }load();
  };if (Retina.isRetina()) {
    Retina.init(root);
  }
})();

/***/ }),

/***/ "./assets/js/royal_preloader.min.js":
/*!******************************************!*\
  !*** ./assets/js/royal_preloader.min.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
|------------------------------------------|
| MelonHTML5 - Royal Preloader             |
|------------------------------------------|
| @author:  Lee Le (lee@melonhtml5.com)    |
| @version: 2.06 (11 April 2015)           |
| @website: www.melonhtml5.com             |
|------------------------------------------|
*/

/**
  (https://developer.mozilla.org/en-US/docs/DOM/document.cookie)
  docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
  docCookies.getItem(name)
  docCookies.removeItem(name[, path])
  docCookies.hasItem(name)
*/
var docCookies = { getItem: function getItem(a) {
    return !a || !this.hasItem(a) ? null : unescape(document.cookie.replace(RegExp("(?:^|.*;\\s*)" + escape(a).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
  }, setItem: function setItem(a, c, b, e, f, g) {
    if (a && !/^(?:expires|max\-age|path|domain|secure)$/i.test(a)) {
      var d = "";if (b) switch (b.constructor) {case Number:
          d = Infinity === b ? "; expires=Tue, 19 Jan 2038 03:14:07 GMT" : "; max-age=" + b;break;case String:
          d = "; expires=" + b;break;case Date:
          d = "; expires=" + b.toGMTString();}document.cookie = escape(a) + "=" + escape(c) + d + (f ? "; domain=" + f : "") + (e ? "; path=" + e : "") + (g ? "; secure" : "");
    }
  }, removeItem: function removeItem(a, c) {
    a && this.hasItem(a) && (document.cookie = escape(a) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (c ? "; path=" + c : ""));
  }, hasItem: function hasItem(a) {
    return RegExp("(?:^|;\\s*)" + escape(a).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie);
  } };

var JQ = jQuery;window.requestAnimFrame = function () {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) {
    window.setTimeout(a, 1E3 / 60);
  };
}();
window.transitionEnd = function (a, c) {
  var b = !1,
      d = document.createElement("div");JQ(["transition", "WebkitTransition", "MozTransition", "msTransition"]).each(function (a, c) {
    if (void 0 !== d.style[c]) return b = !0, !1;
  });b ? a.bind("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend", function (b) {
    a.unbind("webkitTransitionEnd oTransitionEnd MSTransitionEnd transitionend");c(b, a);
  }) : setTimeout(function () {
    c(null, a);
  }, 0);return a;
};
var Royal_Preloader = { _overlay: null, _loader: null, _name: null, _percentage: null, _on_complete: null, _text_loader: null, _text_loader_overlay: null, _logo_loader: null, _logo_loader_meter: null, _total: 0, _loaded: 0, _image_queue: [], _percentage_loaded: 0, _mode: "number", _text: "loading...", _text_colour: "#FFFFFF", _images: [], _show_progress: !0, _show_percentage: !0, _background: "#000000", _logo: "", _logo_size: [80, 80], _cookie: !1, _timeout: 10, _init: function _init() {
    JQ("img").each(function (a) {
      JQ(this).attr("src") && Royal_Preloader._images.push(JQ(this).attr("src"));
    });
    if (Royal_Preloader._cookie) {
      if (docCookies.getItem("melonhtml5_royal_preloader_" + Royal_Preloader._cookie)) {
        JQ("#royal_preloader").remove();JQ(document.body).removeClass("royal_preloader");return;
      }docCookies.setItem("melonhtml5_royal_preloader_" + Royal_Preloader._cookie, new Date().getTime(), Infinity);
    }Royal_Preloader._total = Royal_Preloader._images.length;Royal_Preloader._build();Royal_Preloader._load();
  }, _build: function _build() {
    this._overlay = JQ("#royal_preloader");this._overlay.length || (this._overlay = JQ("<div>").attr("id", "royal_preloader").prependTo(JQ(document.body)));this._overlay.addClass("royal_preloader_" + this._mode);"line" !== this._mode && this._overlay.css("background-color", this._background);switch (this._mode) {case "number":
        var a = this._hexToRgb(this._text_colour);this._percentage = JQ("<div>").html("<div></div><span></span>").css({ color: this._text_colour, "border-color": a ? "rgba(" + a.r + ", " + a.g + ", " + a.b + ", 0.7)" : this._text_colour }).addClass("royal_preloader_percentage").appendTo(this._overlay);this._percentage.children("div").css("border-left-color", this._text_colour);break;case "text":
        this._text_loader = JQ("<div>").addClass("royal_preloader_loader").text(this._text).css("color", this._text_colour).appendTo(this._overlay);this._text_loader_overlay = JQ("<div>").css("background-color", this._background).appendTo(this._text_loader);break;case "scale_text":
        for (var a = "", c = 0; c < this._text.length; c++) {
          a += "<span>" + this._htmlentities(this._text.charAt(c)) + "</span>";
        }this._text_loader = JQ("<div>").addClass("royal_preloader_loader").html(a).css("color", this._text_colour).appendTo(this._overlay);
        break;case "logo":
        this._logo_loader = JQ("<div>").css({ width: this._logo_size[0], height: this._logo_size[1], "margin-left": this._logo_size[0] / 2 * -1, "margin-top": this._logo_size[1] / 2 * -1, "background-image": 'url("' + this._logo + '")' }).addClass("royal_preloader_loader").appendTo(this._overlay);this._logo_loader_meter = JQ("<div>").css("background-color", this._background).appendTo(this._logo_loader);this._show_progress && (this._percentage = JQ("<div>").css({ color: this._text_colour, width: this._logo_size[0], height: this._logo_size[1],
          "margin-left": this._logo_size[0] / 2 * -1, "margin-top": this._logo_size[1] / 2, "background-color": this._background }).addClass("royal_preloader_percentage").appendTo(this._overlay));break;case "line":
        this._line_loader = JQ("<div>").addClass("royal_preloader_loader").css("background-color", this._background).appendTo(this._overlay);JQ("<div>").addClass("royal_preloader_peg").css("box-shadow", "0 0 10px " + this._background).appendTo(this._line_loader);JQ(document.body).css("visibility", "visible");break;case "progress":
        this._progress_loader = JQ("<div>").addClass("royal_preloader_loader").appendTo(this._overlay), this._progress_loader_meter = JQ("<div>").addClass("royal_preloader_meter").appendTo(this._progress_loader), this._show_progress && (this._percentage = JQ("<div>").addClass("royal_preloader_percentage").text(0).appendTo(this._overlay));}this._overlay.appendTo(JQ(document.body));"text" !== this._mode && "scale_text" !== this._mode || this._text_loader.css("margin-left", this._text_loader.width() / 2 * -1);
  }, _load: function _load() {
    if (("number" === this._mode || "logo" === this._mode || "progress" === this._mode) && this._show_progress) {
      this._percentage.data("num", 0);var a = "0" + (Royal_Preloader._show_percentage ? "%" : "");"number" === this._mode ? this._percentage.children("span").text(a) : this._percentage.text(a);
    }JQ.each(this._images, function (a, b) {
      var d = function d() {
        Royal_Preloader._imageOnLoad(b);
      },
          e = new Image();e.src = b;e.complete ? d() : (e.onload = d, e.onerror = d);
    });setTimeout(function () {
      Royal_Preloader._overlay && Royal_Preloader._animatePercentage(Royal_Preloader._percentage_loaded, 100);
    }, this._images.length ? 1E3 * this._timeout : 0);
  }, _hexToRgb: function _hexToRgb(a) {
    return (a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a)) ? { r: parseInt(a[1], 16), g: parseInt(a[2], 16), b: parseInt(a[3], 16) } : null;
  }, _htmlentities: function _htmlentities(a) {
    return a.toString().replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/ /g, "&nbsp;");
  }, _animatePercentage: function _animatePercentage(a, c) {
    Royal_Preloader._percentage_loaded = a;a < c && (a++, setTimeout(function () {
      switch (Royal_Preloader._mode) {case "text":
          Royal_Preloader._text_loader_overlay.css("left", a + "%");break;case "scale_text":
          var b = parseInt(Royal_Preloader._text.length * a * .01, 10);Royal_Preloader._text_loader.children("span").eq(b).addClass("loaded");break;case "line":
          Royal_Preloader._line_loader.width(a + "%");break;case "number":
          Royal_Preloader._show_progress && (b = a + (Royal_Preloader._show_percentage ? "%" : ""), Royal_Preloader._percentage.children("span").text(b));break;case "logo":
          Royal_Preloader._show_progress && (b = a + (Royal_Preloader._show_percentage ? "%" : ""), Royal_Preloader._percentage.text(b));
          Royal_Preloader._logo_loader_meter.css("bottom", a + "%");break;case "progress":
          Royal_Preloader._show_progress && (b = a + (Royal_Preloader._show_percentage ? "%" : ""), Royal_Preloader._percentage.text(b)), Royal_Preloader._progress_loader_meter.width(a + "%");}Royal_Preloader._animatePercentage(a, c);
    }, 5), 100 === a && Royal_Preloader._loadFinish());
  }, _imageOnLoad: function _imageOnLoad(a) {
    this._image_queue.push(a);this._image_queue.length && this._image_queue[0] === a && this._processQueue();
  }, _reQueue: function _reQueue() {
    Royal_Preloader._image_queue.splice(0, 1);Royal_Preloader._processQueue();
  }, _processQueue: function _processQueue() {
    0 !== this._image_queue.length && (this._loaded++, Royal_Preloader._animatePercentage(Royal_Preloader._percentage_loaded, parseInt(this._loaded / this._total * 100, 10)), this._reQueue());
  }, _loadFinish: function _loadFinish() {
    transitionEnd(this._overlay, function (a, c) {
      Royal_Preloader._overlay && (Royal_Preloader._overlay.remove(), Royal_Preloader._overlay = null);
    });this._overlay.addClass("complete");JQ(document.body).removeClass("royal_preloader");this._on_complete && this._on_complete();
  },
  config: function config(a) {
    "undefined" !== typeof a.mode && (this._mode = a.mode);"undefined" !== typeof a.text && (this._text = a.text);"undefined" !== typeof a.text_colour && (this._text_colour = a.text_colour);"undefined" !== typeof a.timeout && (this._timeout = parseInt(a.timeout, 10));"undefined" !== typeof a.showProgress && (this._show_progress = a.showProgress ? !0 : !1);"undefined" !== typeof a.showPercentage && (this._show_percentage = a.showPercentage ? !0 : !1);"undefined" !== typeof a.background && (this._background = a.background);"undefined" !== typeof a.logo && (this._logo = a.logo);"undefined" !== typeof a.logo_size && (this._logo_size = a.logo_size);"undefined" !== typeof a.onComplete && (this._on_complete = a.onComplete);"undefined" !== typeof a.images && (this._images = a.images);"undefined" !== typeof a.cookie && (this._cookie = a.cookie);
  } };setTimeout(function () {
  JQ(document).ready(Royal_Preloader._init);
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var arr = [];

var document = window.document;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isPlainObject: function( obj ) {
		var key;

		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Not own constructor property must be Object
		if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {

			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf( "use strict" ) === 1 ) {
				script = document.createElement( "script" );
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {

				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval

				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE9-10 only
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	register: function( owner, initial ) {
		var value = initial || {};

		// If it is a node unlikely to be stringify-ed or looped over
		// use plain assignment
		if ( owner.nodeType ) {
			owner[ this.expando ] = value;

		// Otherwise secure it in a non-enumerable, non-writable property
		// configurability must be true to allow the property to be
		// deleted with the delete operator
		} else {
			Object.defineProperty( owner, this.expando, {
				value: value,
				writable: true,
				configurable: true
			} );
		}
		return owner[ this.expando ];
	},
	cache: function( owner ) {

		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return an empty object.
		if ( !acceptData( owner ) ) {
			return {};
		}

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ prop ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :
			owner[ this.expando ] && owner[ this.expando ][ key ];
	},
	access: function( owner, key, value ) {
		var stored;

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase( key ) );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key === undefined ) {
			this.register( owner );

		} else {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );

				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;

			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <= 35-45+
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://code.google.com/p/chromium/issues/detail?id=378607
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data, camelKey;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// with the key as-is
				data = dataUser.get( elem, key ) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

				if ( data !== undefined ) {
					return data;
				}

				camelKey = jQuery.camelCase( key );

				// Attempt to get data from the cache
				// with the key camelized
				data = dataUser.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			camelKey = jQuery.camelCase( key );
			this.each( function() {

				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = dataUser.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				dataUser.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
					dataUser.set( this, key, value );
				}
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE9
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE9-11+
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0-4.3, Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
			"screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {
	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {
		div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );
	}

	jQuery.extend( support, {
		pixelPosition: function() {

			// This test is executed only once but we still do memoizing
			// since we can use the boxSizingReliable pre-computing.
			// No need to check if the test was already performed, though.
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
			// since that compresses better and they're computed together anyway.
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		},
		reliableMarginRight: function() {

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// This support function is only executed once so no memoizing is needed.
			var ret,
				marginDiv = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +
				"display:block;margin:0;border:0;padding:0";
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			documentElement.appendChild( container );

			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

			documentElement.removeChild( container );
			div.removeChild( marginDiv );

			return ret;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
		ret = jQuery.style( elem, name );
	}

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = dataPriv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = dataPriv.access(
					elem,
					"olddisplay",
					defaultDisplay( elem.nodeName )
				);
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				dataPriv.set(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = dataPriv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;

			dataPriv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
		opt.duration : opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE8-11+
			// IE throws exception if url is malformed, e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE8-11+
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


jQuery.expr.filters.hidden = function( elem ) {
	return !jQuery.expr.filters.visible( elem );
};
jQuery.expr.filters.visible = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	// Use OR instead of AND as the element is not visible if either is true
	// See tickets #10406 and #13132
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE9
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE9
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		box = elem.getBoundingClientRect();
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},
	size: function() {
		return this.length;
	}
} );

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ 0:
/*!*************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./assets/js/jquery-2.1.1.js ./assets/js/common.js ./assets/js/royal_preloader.min.js ./assets/js/retina-1.1.0.min.js ./assets/js/jquery.easing.js ./assets/js/header-anime.js ./assets/js/charming.min.js ./assets/js/anime.min.js ./assets/js/nav-anime.js ***!
  \*************************************************************************************************************************************************************************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./assets/js/jquery-2.1.1.js */"./assets/js/jquery-2.1.1.js");
__webpack_require__(/*! ./assets/js/common.js */"./assets/js/common.js");
__webpack_require__(/*! ./assets/js/royal_preloader.min.js */"./assets/js/royal_preloader.min.js");
__webpack_require__(/*! ./assets/js/retina-1.1.0.min.js */"./assets/js/retina-1.1.0.min.js");
__webpack_require__(/*! ./assets/js/jquery.easing.js */"./assets/js/jquery.easing.js");
__webpack_require__(/*! ./assets/js/header-anime.js */"./assets/js/header-anime.js");
__webpack_require__(/*! ./assets/js/charming.min.js */"./assets/js/charming.min.js");
__webpack_require__(/*! ./assets/js/anime.min.js */"./assets/js/anime.min.js");
module.exports = __webpack_require__(/*! ./assets/js/nav-anime.js */"./assets/js/nav-anime.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYmE1MzQyZGRmMDVmZmJhODVkNGIiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2FuaW1lLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvY2hhcm1pbmcubWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2hlYWRlci1hbmltZS5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvanF1ZXJ5LTIuMS4xLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9qcXVlcnkuZWFzaW5nLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9uYXYtYW5pbWUuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JldGluYS0xLjEuMC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3JveWFsX3ByZWxvYWRlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIl0sIm5hbWVzIjpbIiRqc2NvbXAkdGhpcyIsInUiLCJyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFuaW1lIiwiYSIsImciLCJjb2wiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJiIiwicmVkdWNlIiwiYyIsImNvbmNhdCIsImFyciIsInYiLCJzdHIiLCJOb2RlTGlzdCIsIkhUTUxDb2xsZWN0aW9uIiwic2xpY2UiLCJjYWxsIiwiRSIsInNvbWUiLCJ6IiwiRiIsImQiLCJoYXNPd25Qcm9wZXJ0eSIsIkEiLCJ1bmQiLCJSIiwicmVwbGFjZSIsImgiLCJleGVjIiwicGFyc2VJbnQiLCJTIiwiZSIsImsiLCJ3IiwiVCIsImluZGV4T2YiLCJHIiwiZm5jIiwidGFyZ2V0IiwiaWQiLCJ0b3RhbCIsIkIiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidG9Mb3dlckNhc2UiLCJIIiwiZG9tIiwiVSIsImdldEF0dHJpYnV0ZSIsInN2ZyIsIlYiLCJ0cmFuc2Zvcm0iLCJwdXNoIiwiZmlsdGVyIiwibGVuZ3RoIiwiSSIsIkoiLCJwYXJzZUZsb2F0IiwiQyIsIm9iaiIsIlciLCJlbCIsImdldFBvaW50QXRMZW5ndGgiLCJwcm9wZXJ0eSIsIngiLCJ5IiwiTWF0aCIsImF0YW4yIiwiUEkiLCJLIiwidG90YWxMZW5ndGgiLCJyZ2IiLCJoZXgiLCJoc2wiLCJzdWJzdHIiLCJvcmlnaW5hbCIsIm51bWJlcnMiLCJtYXRjaCIsIm1hcCIsIk51bWJlciIsInN0cmluZ3MiLCJzcGxpdCIsIlgiLCJMIiwiWSIsIloiLCJkdXJhdGlvbiIsInZhbHVlIiwiZGVsYXkiLCJhYSIsImJhIiwiYXBwbHkiLCJNIiwiY2EiLCJ0d2VlbnMiLCJuYW1lIiwidG8iLCJuIiwiaXNQYXRoIiwiZnJvbSIsInN0YXJ0IiwiZW5kIiwib2Zmc2V0IiwiZWFzaW5nIiwiZWxhc3RpY2l0eSIsIm1pbiIsIm1heCIsInJvdW5kIiwiZGEiLCJ0eXBlIiwiYW5pbWF0YWJsZSIsIk4iLCJlYSIsImZhIiwiZ2EiLCJ0YXJnZXRzIiwiYW5pbWF0YWJsZXMiLCJhbmltYXRpb25zIiwibSIsIndpbmRvdyIsIlByb21pc2UiLCJQIiwiZiIsInJldmVyc2VkIiwidHdlZW4iLCJpc1BhdGgkMCIsImVhc2VkIiwiaGEiLCJjdXJyZW50VmFsdWUiLCJEIiwiYm9keSIsImpvaW4iLCJjdXJyZW50VGltZSIsInByb2dyZXNzIiwicmVtYWluaW5nIiwiTyIsInAiLCJxIiwiYmVnYW4iLCJ0IiwiZGlyZWN0aW9uIiwicGF1c2UiLCJRIiwiY29tcGxldGVkIiwibCIsImNoaWxkcmVuIiwic2VlayIsInJlc2V0IiwibG9vcCIsInBhdXNlZCIsInRpY2siLCJzcGVlZCIsInNwbGljZSIsInBsYXkiLCJpYSIsInJldmVyc2UiLCJyZXN0YXJ0IiwiZmluaXNoZWQiLCJhdXRvcGxheSIsInVwZGF0ZSIsImJlZ2luIiwicnVuIiwiY29tcGxldGUiLCJBcnJheSIsImlzQXJyYXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIlNWR0VsZW1lbnQiLCJub2RlVHlwZSIsInRlc3QiLCJGbG9hdDMyQXJyYXkiLCJhYnMiLCJwb3ciLCJzaW4iLCJhc2luIiwiSW4iLCJPdXQiLCJJbk91dCIsImxpbmVhciIsImZvckVhY2giLCJjc3MiLCJhdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJvYmplY3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInZlcnNpb24iLCJydW5uaW5nIiwicmVtb3ZlIiwiZ2V0VmFsdWUiLCJwYXRoIiwiZ2V0VG90YWxMZW5ndGgiLCJzZXREYXNob2Zmc2V0IiwiYmV6aWVyIiwiZWFzaW5ncyIsInRpbWVsaW5lIiwiYWRkIiwicmFuZG9tIiwiZmxvb3IiLCJjaGFybWluZyIsInRhZ05hbWUiLCJvIiwiY2xhc3NQcmVmaXgiLCJwYXJlbnROb2RlIiwibm9kZVZhbHVlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsImNoaWxkTm9kZXMiLCJOb2RlIiwiVEVYVF9OT0RFIiwiJCIsInJlcXVpcmUiLCJnbG9iYWwiLCJqUXVlcnkiLCJjbGFzc1JlZyIsIlJlZ0V4cCIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImRvY3VtZW50RWxlbWVudCIsImVsZW0iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInRvZ2dsZUNsYXNzIiwiZm4iLCJjbGFzc2llIiwiaGFzIiwidG9nZ2xlIiwiZGVmaW5lIiwiY2JwQW5pbWF0ZWRIZWFkZXIiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsIkVycm9yIiwiaSIsImoiLCJpbml0IiwidG9VcHBlckNhc2UiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInNlbGVjdG9yIiwidG9BcnJheSIsImdldCIsInB1c2hTdGFjayIsIm1lcmdlIiwicHJldk9iamVjdCIsImNvbnRleHQiLCJlYWNoIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJzb3J0IiwiZXh0ZW5kIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsImVycm9yIiwibm9vcCIsImlzV2luZG93IiwiaXNOdW1lcmljIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJldmFsIiwidHJpbSIsInRleHQiLCJoZWFkIiwiY2FtZWxDYXNlIiwibm9kZU5hbWUiLCJzIiwibWFrZUFycmF5IiwiaW5BcnJheSIsImdyZXAiLCJndWlkIiwicHJveHkiLCJub3ciLCJEYXRlIiwic3VwcG9ydCIsImdiIiwicG9wIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJfIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJlYiIsImZiIiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwicWIiLCJvYiIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJoYiIsImliIiwiamIiLCJhdHRySGFuZGxlIiwia2IiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwibGIiLCJtYiIsIm5iIiwiaXNYTUwiLCJzZXREb2N1bWVudCIsImRlZmF1bHRWaWV3IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJhdHRyaWJ1dGVzIiwiY3JlYXRlQ29tbWVudCIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic29ydERldGFjaGVkIiwidW5zaGlmdCIsImF0dHIiLCJzcGVjaWZpZWQiLCJ1bmlxdWVTb3J0IiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJnZXRUZXh0IiwidGV4dENvbnRlbnQiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsImRpciIsInByZUZpbHRlciIsImxhc3RDaGlsZCIsInBzZXVkb3MiLCJzZXRGaWx0ZXJzIiwibm90IiwiaW5uZXJUZXh0IiwibGFuZyIsImxvY2F0aW9uIiwiaGFzaCIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsInBhcmVudCIsImhlYWRlciIsImlucHV0IiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJudGgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJwYiIsImZpbHRlcnMiLCJ0b2tlbml6ZSIsInJiIiwic2IiLCJ0YiIsInViIiwidmIiLCJ3YiIsInhiIiwiY29tcGlsZSIsInNlbGVjdCIsImRlZmF1bHRWYWx1ZSIsImV4cHIiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImlzIiwicGFyc2VIVE1MIiwicmVhZHkiLCJjb250ZW50cyIsIm5leHQiLCJwcmV2Iiwic2libGluZyIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsIkNhbGxiYWNrcyIsIm9uY2UiLCJtZW1vcnkiLCJzdG9wT25GYWxzZSIsImRpc2FibGUiLCJsb2NrIiwibG9ja2VkIiwiZmlyZVdpdGgiLCJmaXJlIiwiZmlyZWQiLCJEZWZlcnJlZCIsInN0YXRlIiwiYWx3YXlzIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJub3RpZnkiLCJwaXBlIiwid2hlbiIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsInRyaWdnZXJIYW5kbGVyIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJhY2Nlc3MiLCJhY2NlcHREYXRhIiwiZGVmaW5lUHJvcGVydHkiLCJjYWNoZSIsInVpZCIsImFjY2VwdHMiLCJrZXkiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2V0IiwiaGFzRGF0YSIsImRpc2NhcmQiLCJwYXJzZUpTT04iLCJkYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJxdWV1ZSIsImRlcXVldWUiLCJfcXVldWVIb29rcyIsInN0b3AiLCJjbGVhclF1ZXVlIiwic291cmNlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsImZvY3VzaW5CdWJibGVzIiwiZXZlbnQiLCJoYW5kbGVyIiwiZXZlbnRzIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJuYW1lc3BhY2VfcmUiLCJyZXN1bHQiLCJub0J1YmJsZSIsInBhcmVudFdpbmRvdyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfZGVmYXVsdCIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJoYW5kbGVycyIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZU9iaiIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsInByb3BzIiwiZml4SG9va3MiLCJrZXlIb29rcyIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwibW91c2VIb29rcyIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwiY2xpZW50VG9wIiwibG9hZCIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsIm9yaWdpbmFsRXZlbnQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiaXNTaW11bGF0ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidGltZVN0YW1wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkVGFyZ2V0Iiwib24iLCJvbmUiLCJvcHRpb24iLCJ0aGVhZCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNsb25lIiwiYnVpbGRGcmFnbWVudCIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImJlZm9yZSIsImFmdGVyIiwiaHRtbCIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiZGV0YWNoIiwic3JjIiwiX2V2YWxVcmwiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsIndyaXRlIiwiY2xvc2UiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJ5YiIsImNzc1RleHQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5SaWdodCIsInN3YXAiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInBvc2l0aW9uIiwidmlzaWJpbGl0eSIsIkRiIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJKYiIsImNzc0hvb2tzIiwib3BhY2l0eSIsImNzc051bWJlciIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImNzc1Byb3BzIiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsImV4cGFuZCIsInNob3ciLCJoaWRlIiwiS2IiLCJUd2VlbiIsInByb3AiLCJvcHRpb25zIiwiY3VyIiwidW5pdCIsInByb3BIb29rcyIsInBvcyIsInN0ZXAiLCJmeCIsInN3aW5nIiwiY29zIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiVmIiLCJSYiIsImNyZWF0ZVR3ZWVuIiwiU2IiLCJUYiIsImhlaWdodCIsIlViIiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImhpZGRlbiIsIldiIiwiWGIiLCJzdGFydFRpbWUiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsInJlamVjdFdpdGgiLCJ0aW1lciIsImFuaW0iLCJBbmltYXRpb24iLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWRzIiwib2xkIiwiZmFkZVRvIiwiYW5pbWF0ZSIsImZpbmlzaCIsInRpbWVycyIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIlliIiwiWmIiLCIkYiIsInJlbW92ZUF0dHIiLCJhdHRySG9va3MiLCJwcm9wRml4IiwiX2IiLCJyZW1vdmVQcm9wIiwiaGFzQXR0cmlidXRlIiwiYWMiLCJiYyIsInZhbCIsInZhbEhvb2tzIiwiaG92ZXIiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiY2MiLCJkYyIsIkpTT04iLCJwYXJzZSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwiZGF0YVR5cGVzIiwidGMiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsInVjIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJ2YyIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImRhdGFUeXBlIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJ4bWwiLCJqc29uIiwiYWpheFNldHVwIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4Iiwic3RhdHVzQ29kZSIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdWNjZXNzIiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJwYXJhbSIsInRyYWRpdGlvbmFsIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInRpbWVvdXQiLCJzZW5kIiwic3RhdHVzVGV4dCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ3cmFwIiwidW53cmFwIiwidmlzaWJsZSIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkFjdGl2ZVhPYmplY3QiLCJjb3JzIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsInJlc3BvbnNlVGV4dCIsInNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiR2MiLCJIYyIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIkljIiwiYW5pbWF0ZWQiLCJKYyIsIktjIiwic2V0T2Zmc2V0IiwibGVmdCIsInVzaW5nIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiY29udGVudCIsInNpemUiLCJhbmRTZWxmIiwiTGMiLCJNYyIsIm5vQ29uZmxpY3QiLCJkZWYiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwic3FydCIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwidW5kZWZpbmVkIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsIm5hdmRlbW9zIiwiY3VycmVudCIsImZpbmRJbmRleCIsIm5hdmlnYXRlIiwibGlua0VsIiwibGluayIsImV2IiwiaXRlbXMiLCJJdGVtIiwiRE9NIiwibmFtZUxldHRlcnMiLCJpbml0RXZlbnRzIiwibW91c2VlbnRlckZuIiwibW91c2VUaW1lb3V0IiwiaXNBY3RpdmUiLCJzY2FsZSIsInRyYW5zbGF0ZVgiLCJlbEJvdW5kcyIsIngxIiwieTEiLCJ0YXJnZXRCb3VuZHMiLCJ4MiIsInkyIiwiZGlzdCIsIm1heERpc3QiLCJtYXhUWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGVaIiwibW91c2VsZWF2ZUZuIiwiaXRlbSIsImNvbmZpZyIsImNoZWNrX21pbWVfdHlwZSIsIlJldGluYSIsImNvbmZpZ3VyZSIsImV4aXN0aW5nX29ubG9hZCIsIkZ1bmN0aW9uIiwiaW1hZ2VzIiwicmV0aW5hSW1hZ2VzIiwiUmV0aW5hSW1hZ2UiLCJpc1JldGluYSIsIm1lZGlhUXVlcnkiLCJkZXZpY2VQaXhlbFJhdGlvIiwibWF0Y2hNZWRpYSIsIlJldGluYUltYWdlUGF0aCIsImF0XzJ4X3BhdGgiLCJwZXJmb3JtX2NoZWNrIiwiY29uZmlybWVkX3BhdGhzIiwiaXNfZXh0ZXJuYWwiLCJkb21haW4iLCJjaGVja18yeF92YXJpYW50IiwiY2FsbGJhY2siLCJodHRwIiwidGhhdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImhhc1ZhcmlhbnQiLCJkb2NDb29raWVzIiwiZ2V0SXRlbSIsImhhc0l0ZW0iLCJ1bmVzY2FwZSIsImNvb2tpZSIsImVzY2FwZSIsInNldEl0ZW0iLCJJbmZpbml0eSIsInRvR01UU3RyaW5nIiwicmVtb3ZlSXRlbSIsIkpRIiwicmVxdWVzdEFuaW1GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsInRyYW5zaXRpb25FbmQiLCJSb3lhbF9QcmVsb2FkZXIiLCJfb3ZlcmxheSIsIl9sb2FkZXIiLCJfbmFtZSIsIl9wZXJjZW50YWdlIiwiX29uX2NvbXBsZXRlIiwiX3RleHRfbG9hZGVyIiwiX3RleHRfbG9hZGVyX292ZXJsYXkiLCJfbG9nb19sb2FkZXIiLCJfbG9nb19sb2FkZXJfbWV0ZXIiLCJfdG90YWwiLCJfbG9hZGVkIiwiX2ltYWdlX3F1ZXVlIiwiX3BlcmNlbnRhZ2VfbG9hZGVkIiwiX21vZGUiLCJfdGV4dCIsIl90ZXh0X2NvbG91ciIsIl9pbWFnZXMiLCJfc2hvd19wcm9ncmVzcyIsIl9zaG93X3BlcmNlbnRhZ2UiLCJfYmFja2dyb3VuZCIsIl9sb2dvIiwiX2xvZ29fc2l6ZSIsIl9jb29raWUiLCJfdGltZW91dCIsIl9pbml0IiwiZ2V0VGltZSIsIl9idWlsZCIsIl9sb2FkIiwiX2hleFRvUmdiIiwiY29sb3IiLCJfaHRtbGVudGl0aWVzIiwiY2hhckF0IiwiX2xpbmVfbG9hZGVyIiwiX3Byb2dyZXNzX2xvYWRlciIsIl9wcm9ncmVzc19sb2FkZXJfbWV0ZXIiLCJfaW1hZ2VPbkxvYWQiLCJJbWFnZSIsIl9hbmltYXRlUGVyY2VudGFnZSIsIl9sb2FkRmluaXNoIiwiX3Byb2Nlc3NRdWV1ZSIsIl9yZVF1ZXVlIiwibW9kZSIsInRleHRfY29sb3VyIiwic2hvd1Byb2dyZXNzIiwic2hvd1BlcmNlbnRhZ2UiLCJiYWNrZ3JvdW5kIiwibG9nbyIsImxvZ29fc2l6ZSIsIm9uQ29tcGxldGUiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDN0RBOzs7O0FBSUEsSUFBSUEsZUFBYSxJQUFqQjtBQUNBLENBQUMsVUFBU0MsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUF1QyxpQ0FBTyxFQUFQLG9DQUFVQSxDQUFWO0FBQUE7QUFBQTtBQUFBLG9HQUF2QyxHQUFvRCxxQkFBa0JDLE1BQWxCLHlDQUFrQkEsTUFBbEIsTUFBMEJBLE9BQU9DLE9BQWpDLEdBQXlDRCxPQUFPQyxPQUFQLEdBQWVGLEdBQXhELEdBQTRERCxFQUFFSSxLQUFGLEdBQVFILEdBQXhIO0FBQTRILENBQTNJLEVBQTZJLElBQTdJLEVBQWtKLFlBQVU7QUFBQyxXQUFTRCxDQUFULENBQVdLLENBQVgsRUFBYTtBQUFDLFFBQUcsQ0FBQ0MsRUFBRUMsR0FBRixDQUFNRixDQUFOLENBQUosRUFBYSxJQUFHO0FBQUMsYUFBT0csU0FBU0MsZ0JBQVQsQ0FBMEJKLENBQTFCLENBQVA7QUFBb0MsS0FBeEMsQ0FBd0Ms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Q0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7Ozs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFlBQVk7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxZQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLGdCQUFnQixJQUFJOztBQUVwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0MsSUFBSTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGVBQWU7O0FBRWYsU0FBUzs7QUFFVDtBQUNBLFFBQVEsaUNBQWlDO0FBQ3pDLFFBQVEsb0JBQW9CO0FBQzVCLFFBQVEsc0NBQXNDO0FBQzlDLFFBQVE7QUFDUixFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYSxFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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QUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsUUFBUSxTQUFTO0FBQ2pCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxpREFBaUQ7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQsVUFBVSx3Q0FBd0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBLENBQUM7Ozs7QUFJRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSxRQUFRLEdBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTs7OztBQUlBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLE9BQU87QUFDaEIseUJBQXlCLHdCQUF3Qjs7QUFFakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGNBQWM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixPQUFPO0FBQ1A7QUFDQSxNQUFNO0FBQ04sS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjs7QUFFQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsYUFBYTtBQUNwQyxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0IsRUFBRTtBQUNyQyxlQUFlLHFDQUFxQyxFQUFFO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7O0FBRVg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLCtEQUErRDtBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGNBQWM7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtCQUErQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLHdEQUF3RDtBQUMvRTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBLGFBQWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQyxjQUFjO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxVQUFVLFNBQVMsTUFBTSxhQUFhO0FBQzNFLGFBQWEsZUFBZTtBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLDJCQUEyQixzQkFBc0I7QUFDbkYsc0JBQXNCLGNBQWM7QUFDcEMsZ0JBQWdCLFdBQVcsWUFBWTtBQUN2QyxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLFNBQVMsUUFBUSxRQUFRO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0MsdUJBQXVCO0FBQzNELG1CQUFtQixTQUFTLFNBQVM7QUFDckM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLCtEQUErRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsUUFBUSxPQUFPOztBQUVmO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsZ0JBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdC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Q0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUEsSUFBSTtBQUNKOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7O0FBR0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLEtBQUs7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQXFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxvQ0FBb0M7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxNQUFNO0FBQ04sTUFBTTtBQUNOLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CLDREQUE0RCxlQUFlO0FBQzNFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxzREFBc0Q7QUFDcEU7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQSxjQUFjLG1DQUFtQztBQUNqRCxlQUFlLDZEQUE2RDtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFBQTtBQUNGOzs7O0FBSUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7QUNybFREO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDREE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7Ozs7Ozs7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImxhY29sdWRvLWphdmFzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvYnVpbGQvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgYmE1MzQyZGRmMDVmZmJhODVkNGIiLCIvKlxyXG4gMjAxNyBKdWxpYW4gR2FybmllclxyXG4gUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiovXHJcbnZhciAkanNjb21wJHRoaXM9dGhpcztcclxuKGZ1bmN0aW9uKHUscil7XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10scik6XCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXIoKTp1LmFuaW1lPXIoKX0pKHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiB1KGEpe2lmKCFnLmNvbChhKSl0cnl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYSl9Y2F0Y2goYil7fX1mdW5jdGlvbiByKGEpe3JldHVybiBhLnJlZHVjZShmdW5jdGlvbihhLGMpe3JldHVybiBhLmNvbmNhdChnLmFycihjKT9yKGMpOmMpfSxbXSl9ZnVuY3Rpb24gdihhKXtpZihnLmFycihhKSlyZXR1cm4gYTtnLnN0cihhKSYmKGE9dShhKXx8YSk7cmV0dXJuIGEgaW5zdGFuY2VvZiBOb2RlTGlzdHx8YSBpbnN0YW5jZW9mIEhUTUxDb2xsZWN0aW9uP1tdLnNsaWNlLmNhbGwoYSk6W2FdfWZ1bmN0aW9uIEUoYSxiKXtyZXR1cm4gYS5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0pfVxyXG5mdW5jdGlvbiB6KGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSliW2NdPWFbY107cmV0dXJuIGJ9ZnVuY3Rpb24gRihhLGIpe3ZhciBjPXooYSksZDtmb3IoZCBpbiBhKWNbZF09Yi5oYXNPd25Qcm9wZXJ0eShkKT9iW2RdOmFbZF07cmV0dXJuIGN9ZnVuY3Rpb24gQShhLGIpe3ZhciBjPXooYSksZDtmb3IoZCBpbiBiKWNbZF09Zy51bmQoYVtkXSk/YltkXTphW2RdO3JldHVybiBjfWZ1bmN0aW9uIFIoYSl7YT1hLnJlcGxhY2UoL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaSxmdW5jdGlvbihhLGIsYyxoKXtyZXR1cm4gYitiK2MrYytoK2h9KTt2YXIgYj0vXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoYSk7YT1wYXJzZUludChiWzFdLDE2KTt2YXIgYz1wYXJzZUludChiWzJdLDE2KSxiPXBhcnNlSW50KGJbM10sMTYpO3JldHVyblwicmdiKFwiK2ErXCIsXCIrYytcIixcIitiK1wiKVwifWZ1bmN0aW9uIFMoYSl7ZnVuY3Rpb24gYihhLGIsYyl7MD5cclxuYyYmKGMrPTEpOzE8YyYmLS1jO3JldHVybiBjPDEvNj9hKzYqKGItYSkqYzouNT5jP2I6YzwyLzM/YSsoYi1hKSooMi8zLWMpKjY6YX12YXIgYz0vaHNsXFwoKFxcZCspLFxccyooW1xcZC5dKyklLFxccyooW1xcZC5dKyklXFwpL2cuZXhlYyhhKTthPXBhcnNlSW50KGNbMV0pLzM2MDt2YXIgZD1wYXJzZUludChjWzJdKS8xMDAsYz1wYXJzZUludChjWzNdKS8xMDA7aWYoMD09ZClkPWM9YT1jO2Vsc2V7dmFyIGU9LjU+Yz9jKigxK2QpOmMrZC1jKmQsaz0yKmMtZSxkPWIoayxlLGErMS8zKSxjPWIoayxlLGEpO2E9YihrLGUsYS0xLzMpfXJldHVyblwicmdiKFwiKzI1NSpkK1wiLFwiKzI1NSpjK1wiLFwiKzI1NSphK1wiKVwifWZ1bmN0aW9uIHcoYSl7aWYoYT0vKFtcXCtcXC1dP1swLTkjXFwuXSspKCV8cHh8cHR8ZW18cmVtfGlufGNtfG1tfGV4fHBjfHZ3fHZofGRlZ3xyYWR8dHVybik/Ly5leGVjKGEpKXJldHVybiBhWzJdfWZ1bmN0aW9uIFQoYSl7aWYoLTE8YS5pbmRleE9mKFwidHJhbnNsYXRlXCIpKXJldHVyblwicHhcIjtcclxuaWYoLTE8YS5pbmRleE9mKFwicm90YXRlXCIpfHwtMTxhLmluZGV4T2YoXCJza2V3XCIpKXJldHVyblwiZGVnXCJ9ZnVuY3Rpb24gRyhhLGIpe3JldHVybiBnLmZuYyhhKT9hKGIudGFyZ2V0LGIuaWQsYi50b3RhbCk6YX1mdW5jdGlvbiBCKGEsYil7aWYoYiBpbiBhLnN0eWxlKXJldHVybiBnZXRDb21wdXRlZFN0eWxlKGEpLmdldFByb3BlcnR5VmFsdWUoYi5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKSl8fFwiMFwifWZ1bmN0aW9uIEgoYSxiKXtpZihnLmRvbShhKSYmRShVLGIpKXJldHVyblwidHJhbnNmb3JtXCI7aWYoZy5kb20oYSkmJihhLmdldEF0dHJpYnV0ZShiKXx8Zy5zdmcoYSkmJmFbYl0pKXJldHVyblwiYXR0cmlidXRlXCI7aWYoZy5kb20oYSkmJlwidHJhbnNmb3JtXCIhPT1iJiZCKGEsYikpcmV0dXJuXCJjc3NcIjtpZihudWxsIT1hW2JdKXJldHVyblwib2JqZWN0XCJ9ZnVuY3Rpb24gVihhLGIpe3ZhciBjPVQoYiksYz0tMTxiLmluZGV4T2YoXCJzY2FsZVwiKT9cclxuMTowK2M7YT1hLnN0eWxlLnRyYW5zZm9ybTtpZighYSlyZXR1cm4gYztmb3IodmFyIGQ9W10sZT1bXSxrPVtdLGg9LyhcXHcrKVxcKCguKz8pXFwpL2c7ZD1oLmV4ZWMoYSk7KWUucHVzaChkWzFdKSxrLnB1c2goZFsyXSk7YT1rLmZpbHRlcihmdW5jdGlvbihhLGMpe3JldHVybiBlW2NdPT09Yn0pO3JldHVybiBhLmxlbmd0aD9hWzBdOmN9ZnVuY3Rpb24gSShhLGIpe3N3aXRjaChIKGEsYikpe2Nhc2UgXCJ0cmFuc2Zvcm1cIjpyZXR1cm4gVihhLGIpO2Nhc2UgXCJjc3NcIjpyZXR1cm4gQihhLGIpO2Nhc2UgXCJhdHRyaWJ1dGVcIjpyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoYil9cmV0dXJuIGFbYl18fDB9ZnVuY3Rpb24gSihhLGIpe3ZhciBjPS9eKFxcKj18XFwrPXwtPSkvLmV4ZWMoYSk7aWYoIWMpcmV0dXJuIGE7Yj1wYXJzZUZsb2F0KGIpO2E9cGFyc2VGbG9hdChhLnJlcGxhY2UoY1swXSxcIlwiKSk7c3dpdGNoKGNbMF1bMF0pe2Nhc2UgXCIrXCI6cmV0dXJuIGIrYTtjYXNlIFwiLVwiOnJldHVybiBiLWE7Y2FzZSBcIipcIjpyZXR1cm4gYipcclxuYX19ZnVuY3Rpb24gQyhhKXtyZXR1cm4gZy5vYmooYSkmJmEuaGFzT3duUHJvcGVydHkoXCJ0b3RhbExlbmd0aFwiKX1mdW5jdGlvbiBXKGEsYil7ZnVuY3Rpb24gYyhjKXtjPXZvaWQgMD09PWM/MDpjO3JldHVybiBhLmVsLmdldFBvaW50QXRMZW5ndGgoMTw9YitjP2IrYzowKX12YXIgZD1jKCksZT1jKC0xKSxrPWMoMSk7c3dpdGNoKGEucHJvcGVydHkpe2Nhc2UgXCJ4XCI6cmV0dXJuIGQueDtjYXNlIFwieVwiOnJldHVybiBkLnk7Y2FzZSBcImFuZ2xlXCI6cmV0dXJuIDE4MCpNYXRoLmF0YW4yKGsueS1lLnksay54LWUueCkvTWF0aC5QSX19ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPS8tP1xcZCpcXC4/XFxkKy9nO2E9QyhhKT9hLnRvdGFsTGVuZ3RoOmE7aWYoZy5jb2woYSkpYj1nLnJnYihhKT9hOmcuaGV4KGEpP1IoYSk6Zy5oc2woYSk/UyhhKTp2b2lkIDA7ZWxzZXt2YXIgZD13KGEpO2E9ZD9hLnN1YnN0cigwLGEubGVuZ3RoLWQubGVuZ3RoKTphO2I9Yj9hK2I6YX1iKz1cIlwiO3JldHVybntvcmlnaW5hbDpiLFxyXG5udW1iZXJzOmIubWF0Y2goYyk/Yi5tYXRjaChjKS5tYXAoTnVtYmVyKTpbMF0sc3RyaW5nczpiLnNwbGl0KGMpfX1mdW5jdGlvbiBYKGEsYil7cmV0dXJuIGIucmVkdWNlKGZ1bmN0aW9uKGIsZCxlKXtyZXR1cm4gYithW2UtMV0rZH0pfWZ1bmN0aW9uIEwoYSl7cmV0dXJuKGE/cihnLmFycihhKT9hLm1hcCh2KTp2KGEpKTpbXSkuZmlsdGVyKGZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gZC5pbmRleE9mKGEpPT09Y30pfWZ1bmN0aW9uIFkoYSl7dmFyIGI9TChhKTtyZXR1cm4gYi5tYXAoZnVuY3Rpb24oYSxkKXtyZXR1cm57dGFyZ2V0OmEsaWQ6ZCx0b3RhbDpiLmxlbmd0aH19KX1mdW5jdGlvbiBaKGEsYil7dmFyIGM9eihiKTtpZihnLmFycihhKSl7dmFyIGQ9YS5sZW5ndGg7MiE9PWR8fGcub2JqKGFbMF0pP2cuZm5jKGIuZHVyYXRpb24pfHwoYy5kdXJhdGlvbj1iLmR1cmF0aW9uL2QpOmE9e3ZhbHVlOmF9fXJldHVybiB2KGEpLm1hcChmdW5jdGlvbihhLGMpe2M9Yz8wOmIuZGVsYXk7XHJcbmE9Zy5vYmooYSkmJiFDKGEpP2E6e3ZhbHVlOmF9O2cudW5kKGEuZGVsYXkpJiYoYS5kZWxheT1jKTtyZXR1cm4gYX0pLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gQShhLGMpfSl9ZnVuY3Rpb24gYWEoYSxiKXt2YXIgYz17fSxkO2ZvcihkIGluIGEpe3ZhciBlPUcoYVtkXSxiKTtnLmFycihlKSYmKGU9ZS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIEcoYSxiKX0pLDE9PT1lLmxlbmd0aCYmKGU9ZVswXSkpO2NbZF09ZX1jLmR1cmF0aW9uPXBhcnNlRmxvYXQoYy5kdXJhdGlvbik7Yy5kZWxheT1wYXJzZUZsb2F0KGMuZGVsYXkpO3JldHVybiBjfWZ1bmN0aW9uIGJhKGEpe3JldHVybiBnLmFycihhKT94LmFwcGx5KHRoaXMsYSk6TVthXX1mdW5jdGlvbiBjYShhLGIpe3ZhciBjO3JldHVybiBhLnR3ZWVucy5tYXAoZnVuY3Rpb24oZCl7ZD1hYShkLGIpO3ZhciBlPWQudmFsdWUsaz1JKGIudGFyZ2V0LGEubmFtZSksaD1jP2MudG8ub3JpZ2luYWw6ayxoPWcuYXJyKGUpP2VbMF06aCxuPUooZy5hcnIoZSk/XHJcbmVbMV06ZSxoKSxrPXcobil8fHcoaCl8fHcoayk7ZC5pc1BhdGg9QyhlKTtkLmZyb209SyhoLGspO2QudG89SyhuLGspO2Quc3RhcnQ9Yz9jLmVuZDphLm9mZnNldDtkLmVuZD1kLnN0YXJ0K2QuZGVsYXkrZC5kdXJhdGlvbjtkLmVhc2luZz1iYShkLmVhc2luZyk7ZC5lbGFzdGljaXR5PSgxRTMtTWF0aC5taW4oTWF0aC5tYXgoZC5lbGFzdGljaXR5LDEpLDk5OSkpLzFFMztnLmNvbChkLmZyb20ub3JpZ2luYWwpJiYoZC5yb3VuZD0xKTtyZXR1cm4gYz1kfSl9ZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm4gcihhLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYi5tYXAoZnVuY3Rpb24oYil7dmFyIGM9SChhLnRhcmdldCxiLm5hbWUpO2lmKGMpe3ZhciBkPWNhKGIsYSk7Yj17dHlwZTpjLHByb3BlcnR5OmIubmFtZSxhbmltYXRhYmxlOmEsdHdlZW5zOmQsZHVyYXRpb246ZFtkLmxlbmd0aC0xXS5lbmQsZGVsYXk6ZFswXS5kZWxheX19ZWxzZSBiPXZvaWQgMDtyZXR1cm4gYn0pfSkpLmZpbHRlcihmdW5jdGlvbihhKXtyZXR1cm4hZy51bmQoYSl9KX1cclxuZnVuY3Rpb24gTihhLGIsYyl7dmFyIGQ9XCJkZWxheVwiPT09YT9NYXRoLm1pbjpNYXRoLm1heDtyZXR1cm4gYi5sZW5ndGg/ZC5hcHBseShNYXRoLGIubWFwKGZ1bmN0aW9uKGIpe3JldHVybiBiW2FdfSkpOmNbYV19ZnVuY3Rpb24gZWEoYSl7dmFyIGI9RihmYSxhKSxjPUYoZ2EsYSksZD1ZKGEudGFyZ2V0cyksZT1bXSxnPUEoYixjKSxoO2ZvcihoIGluIGEpZy5oYXNPd25Qcm9wZXJ0eShoKXx8XCJ0YXJnZXRzXCI9PT1ofHxlLnB1c2goe25hbWU6aCxvZmZzZXQ6Zy5vZmZzZXQsdHdlZW5zOlooYVtoXSxjKX0pO2E9ZGEoZCxlKTtyZXR1cm4gQShiLHthbmltYXRhYmxlczpkLGFuaW1hdGlvbnM6YSxkdXJhdGlvbjpOKFwiZHVyYXRpb25cIixhLGMpLGRlbGF5Ok4oXCJkZWxheVwiLGEsYyl9KX1mdW5jdGlvbiBtKGEpe2Z1bmN0aW9uIGIoKXtyZXR1cm4gd2luZG93LlByb21pc2UmJm5ldyBQcm9taXNlKGZ1bmN0aW9uKGEpe3JldHVybiBQPWF9KX1mdW5jdGlvbiBjKGEpe3JldHVybiBmLnJldmVyc2VkP1xyXG5mLmR1cmF0aW9uLWE6YX1mdW5jdGlvbiBkKGEpe2Zvcih2YXIgYj0wLGM9e30sZD1mLmFuaW1hdGlvbnMsZT17fTtiPGQubGVuZ3RoOyl7dmFyIGc9ZFtiXSxoPWcuYW5pbWF0YWJsZSxuPWcudHdlZW5zO2UudHdlZW49bi5maWx0ZXIoZnVuY3Rpb24oYil7cmV0dXJuIGE8Yi5lbmR9KVswXXx8bltuLmxlbmd0aC0xXTtlLmlzUGF0aCQwPWUudHdlZW4uaXNQYXRoO2Uucm91bmQ9ZS50d2Vlbi5yb3VuZDtlLmVhc2VkPWUudHdlZW4uZWFzaW5nKE1hdGgubWluKE1hdGgubWF4KGEtZS50d2Vlbi5zdGFydC1lLnR3ZWVuLmRlbGF5LDApLGUudHdlZW4uZHVyYXRpb24pL2UudHdlZW4uZHVyYXRpb24sZS50d2Vlbi5lbGFzdGljaXR5KTtuPVgoZS50d2Vlbi50by5udW1iZXJzLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXtjPWEuaXNQYXRoJDA/MDphLnR3ZWVuLmZyb20ubnVtYmVyc1tjXTtiPWMrYS5lYXNlZCooYi1jKTthLmlzUGF0aCQwJiYoYj1XKGEudHdlZW4udmFsdWUsXHJcbmIpKTthLnJvdW5kJiYoYj1NYXRoLnJvdW5kKGIqYS5yb3VuZCkvYS5yb3VuZCk7cmV0dXJuIGJ9fShlKSksZS50d2Vlbi50by5zdHJpbmdzKTtoYVtnLnR5cGVdKGgudGFyZ2V0LGcucHJvcGVydHksbixjLGguaWQpO2cuY3VycmVudFZhbHVlPW47YisrO2U9e2lzUGF0aCQwOmUuaXNQYXRoJDAsdHdlZW46ZS50d2VlbixlYXNlZDplLmVhc2VkLHJvdW5kOmUucm91bmR9fWlmKGMpZm9yKHZhciBrIGluIGMpRHx8KEQ9Qihkb2N1bWVudC5ib2R5LFwidHJhbnNmb3JtXCIpP1widHJhbnNmb3JtXCI6XCItd2Via2l0LXRyYW5zZm9ybVwiKSxmLmFuaW1hdGFibGVzW2tdLnRhcmdldC5zdHlsZVtEXT1jW2tdLmpvaW4oXCIgXCIpO2YuY3VycmVudFRpbWU9YTtmLnByb2dyZXNzPWEvZi5kdXJhdGlvbioxMDB9ZnVuY3Rpb24gZShhKXtpZihmW2FdKWZbYV0oZil9ZnVuY3Rpb24gZygpe2YucmVtYWluaW5nJiYhMCE9PWYucmVtYWluaW5nJiZmLnJlbWFpbmluZy0tfWZ1bmN0aW9uIGgoYSl7dmFyIGg9Zi5kdXJhdGlvbixcclxuaz1mLm9mZnNldCxtPWYuZGVsYXksTz1mLmN1cnJlbnRUaW1lLHA9Zi5yZXZlcnNlZCxxPWMoYSkscT1NYXRoLm1pbihNYXRoLm1heChxLDApLGgpO3E+ayYmcTxoPyhkKHEpLCFmLmJlZ2FuJiZxPj1tJiYoZi5iZWdhbj0hMCxlKFwiYmVnaW5cIikpLGUoXCJydW5cIikpOihxPD1rJiYwIT09TyYmKGQoMCkscCYmZygpKSxxPj1oJiZPIT09aCYmKGQoaCkscHx8ZygpKSk7YT49aCYmKGYucmVtYWluaW5nPyh0PW4sXCJhbHRlcm5hdGVcIj09PWYuZGlyZWN0aW9uJiYoZi5yZXZlcnNlZD0hZi5yZXZlcnNlZCkpOihmLnBhdXNlKCksUCgpLFE9YigpLGYuY29tcGxldGVkfHwoZi5jb21wbGV0ZWQ9ITAsZShcImNvbXBsZXRlXCIpKSksbD0wKTtpZihmLmNoaWxkcmVuKWZvcihhPWYuY2hpbGRyZW4saD0wO2g8YS5sZW5ndGg7aCsrKWFbaF0uc2VlayhxKTtlKFwidXBkYXRlXCIpfWE9dm9pZCAwPT09YT97fTphO3ZhciBuLHQsbD0wLFA9bnVsbCxRPWIoKSxmPWVhKGEpO2YucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgYT1cclxuZi5kaXJlY3Rpb24sYj1mLmxvb3A7Zi5jdXJyZW50VGltZT0wO2YucHJvZ3Jlc3M9MDtmLnBhdXNlZD0hMDtmLmJlZ2FuPSExO2YuY29tcGxldGVkPSExO2YucmV2ZXJzZWQ9XCJyZXZlcnNlXCI9PT1hO2YucmVtYWluaW5nPVwiYWx0ZXJuYXRlXCI9PT1hJiYxPT09Yj8yOmJ9O2YudGljaz1mdW5jdGlvbihhKXtuPWE7dHx8KHQ9bik7aCgobCtuLXQpKm0uc3BlZWQpfTtmLnNlZWs9ZnVuY3Rpb24oYSl7aChjKGEpKX07Zi5wYXVzZT1mdW5jdGlvbigpe3ZhciBhPXAuaW5kZXhPZihmKTstMTxhJiZwLnNwbGljZShhLDEpO2YucGF1c2VkPSEwfTtmLnBsYXk9ZnVuY3Rpb24oKXtmLnBhdXNlZCYmKGYucGF1c2VkPSExLHQ9MCxsPWYuY29tcGxldGVkPzA6YyhmLmN1cnJlbnRUaW1lKSxwLnB1c2goZikseXx8aWEoKSl9O2YucmV2ZXJzZT1mdW5jdGlvbigpe2YucmV2ZXJzZWQ9IWYucmV2ZXJzZWQ7dD0wO2w9YyhmLmN1cnJlbnRUaW1lKX07Zi5yZXN0YXJ0PWZ1bmN0aW9uKCl7Zi5wYXVzZSgpO1xyXG5mLnJlc2V0KCk7Zi5wbGF5KCl9O2YuZmluaXNoZWQ9UTtmLnJlc2V0KCk7Zi5hdXRvcGxheSYmZi5wbGF5KCk7cmV0dXJuIGZ9dmFyIGZhPXt1cGRhdGU6dm9pZCAwLGJlZ2luOnZvaWQgMCxydW46dm9pZCAwLGNvbXBsZXRlOnZvaWQgMCxsb29wOjEsZGlyZWN0aW9uOlwibm9ybWFsXCIsYXV0b3BsYXk6ITAsb2Zmc2V0OjB9LGdhPXtkdXJhdGlvbjoxRTMsZGVsYXk6MCxlYXNpbmc6XCJlYXNlT3V0RWxhc3RpY1wiLGVsYXN0aWNpdHk6NTAwLHJvdW5kOjB9LFU9XCJ0cmFuc2xhdGVYIHRyYW5zbGF0ZVkgdHJhbnNsYXRlWiByb3RhdGUgcm90YXRlWCByb3RhdGVZIHJvdGF0ZVogc2NhbGUgc2NhbGVYIHNjYWxlWSBzY2FsZVogc2tld1ggc2tld1lcIi5zcGxpdChcIiBcIiksRCxnPXthcnI6ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoYSl9LG9iajpmdW5jdGlvbihhKXtyZXR1cm4tMTxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkuaW5kZXhPZihcIk9iamVjdFwiKX0sc3ZnOmZ1bmN0aW9uKGEpe3JldHVybiBhIGluc3RhbmNlb2ZcclxuU1ZHRWxlbWVudH0sZG9tOmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVUeXBlfHxnLnN2ZyhhKX0sc3RyOmZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYX0sZm5jOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfSx1bmQ6ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhfSxoZXg6ZnVuY3Rpb24oYSl7cmV0dXJuLyheI1swLTlBLUZdezZ9JCl8KF4jWzAtOUEtRl17M30kKS9pLnRlc3QoYSl9LHJnYjpmdW5jdGlvbihhKXtyZXR1cm4vXnJnYi8udGVzdChhKX0saHNsOmZ1bmN0aW9uKGEpe3JldHVybi9eaHNsLy50ZXN0KGEpfSxjb2w6ZnVuY3Rpb24oYSl7cmV0dXJuIGcuaGV4KGEpfHxnLnJnYihhKXx8Zy5oc2woYSl9fSx4PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGMsZCl7cmV0dXJuKCgoMS0zKmQrMypjKSphKygzKmQtNipjKSkqYSszKmMpKmF9cmV0dXJuIGZ1bmN0aW9uKGIsYyxkLGUpe2lmKDA8PWImJjE+PWImJlxyXG4wPD1kJiYxPj1kKXt2YXIgZz1uZXcgRmxvYXQzMkFycmF5KDExKTtpZihiIT09Y3x8ZCE9PWUpZm9yKHZhciBoPTA7MTE+aDsrK2gpZ1toXT1hKC4xKmgsYixkKTtyZXR1cm4gZnVuY3Rpb24oaCl7aWYoYj09PWMmJmQ9PT1lKXJldHVybiBoO2lmKDA9PT1oKXJldHVybiAwO2lmKDE9PT1oKXJldHVybiAxO2Zvcih2YXIgaz0wLGw9MTsxMCE9PWwmJmdbbF08PWg7KytsKWsrPS4xOy0tbDt2YXIgbD1rKyhoLWdbbF0pLyhnW2wrMV0tZ1tsXSkqLjEsbj0zKigxLTMqZCszKmIpKmwqbCsyKigzKmQtNipiKSpsKzMqYjtpZiguMDAxPD1uKXtmb3Ioaz0wOzQ+azsrK2spe249MyooMS0zKmQrMypiKSpsKmwrMiooMypkLTYqYikqbCszKmI7aWYoMD09PW4pYnJlYWs7dmFyIG09YShsLGIsZCktaCxsPWwtbS9ufWg9bH1lbHNlIGlmKDA9PT1uKWg9bDtlbHNle3ZhciBsPWssaz1rKy4xLGY9MDtkbyBtPWwrKGstbCkvMixuPWEobSxiLGQpLWgsMDxuP2s9bTpsPW07d2hpbGUoMWUtNzxNYXRoLmFicyhuKSYmXHJcbjEwPisrZik7aD1tfXJldHVybiBhKGgsYyxlKX19fX0oKSxNPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe3JldHVybiAwPT09YXx8MT09PWE/YTotTWF0aC5wb3coMiwxMCooYS0xKSkqTWF0aC5zaW4oMiooYS0xLWIvKDIqTWF0aC5QSSkqTWF0aC5hc2luKDEpKSpNYXRoLlBJL2IpfXZhciBiPVwiUXVhZCBDdWJpYyBRdWFydCBRdWludCBTaW5lIEV4cG8gQ2lyYyBCYWNrIEVsYXN0aWNcIi5zcGxpdChcIiBcIiksYz17SW46W1suNTUsLjA4NSwuNjgsLjUzXSxbLjU1LC4wNTUsLjY3NSwuMTldLFsuODk1LC4wMywuNjg1LC4yMl0sWy43NTUsLjA1LC44NTUsLjA2XSxbLjQ3LDAsLjc0NSwuNzE1XSxbLjk1LC4wNSwuNzk1LC4wMzVdLFsuNiwuMDQsLjk4LC4zMzVdLFsuNiwtLjI4LC43MzUsLjA0NV0sYV0sT3V0OltbLjI1LC40NiwuNDUsLjk0XSxbLjIxNSwuNjEsLjM1NSwxXSxbLjE2NSwuODQsLjQ0LDFdLFsuMjMsMSwuMzIsMV0sWy4zOSwuNTc1LC41NjUsMV0sWy4xOSwxLC4yMiwxXSxcclxuWy4wNzUsLjgyLC4xNjUsMV0sWy4xNzUsLjg4NSwuMzIsMS4yNzVdLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIDEtYSgxLWIsYyl9XSxJbk91dDpbWy40NTUsLjAzLC41MTUsLjk1NV0sWy42NDUsLjA0NSwuMzU1LDFdLFsuNzcsMCwuMTc1LDFdLFsuODYsMCwuMDcsMV0sWy40NDUsLjA1LC41NSwuOTVdLFsxLDAsMCwxXSxbLjc4NSwuMTM1LC4xNSwuODZdLFsuNjgsLS41NSwuMjY1LDEuNTVdLGZ1bmN0aW9uKGIsYyl7cmV0dXJuLjU+Yj9hKDIqYixjKS8yOjEtYSgtMipiKzIsYykvMn1dfSxkPXtsaW5lYXI6eCguMjUsLjI1LC43NSwuNzUpfSxlPXt9LGs7Zm9yKGsgaW4gYyllLnR5cGU9ayxjW2UudHlwZV0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyxlKXtkW1wiZWFzZVwiK2EudHlwZStiW2VdXT1nLmZuYyhjKT9jOnguYXBwbHkoJGpzY29tcCR0aGlzLGMpfX0oZSkpLGU9e3R5cGU6ZS50eXBlfTtyZXR1cm4gZH0oKSxoYT17Y3NzOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5zdHlsZVtiXT1cclxuY30sYXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoYixjKX0sb2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYVtiXT1jfSx0cmFuc2Zvcm06ZnVuY3Rpb24oYSxiLGMsZCxlKXtkW2VdfHwoZFtlXT1bXSk7ZFtlXS5wdXNoKGIrXCIoXCIrYytcIilcIil9fSxwPVtdLHk9MCxpYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt5PXJlcXVlc3RBbmltYXRpb25GcmFtZShiKX1mdW5jdGlvbiBiKGIpe3ZhciBjPXAubGVuZ3RoO2lmKGMpe2Zvcih2YXIgZT0wO2U8YzspcFtlXSYmcFtlXS50aWNrKGIpLGUrKzthKCl9ZWxzZSBjYW5jZWxBbmltYXRpb25GcmFtZSh5KSx5PTB9cmV0dXJuIGF9KCk7bS52ZXJzaW9uPVwiMi4wLjFcIjttLnNwZWVkPTE7bS5ydW5uaW5nPXA7bS5yZW1vdmU9ZnVuY3Rpb24oYSl7YT1MKGEpO2Zvcih2YXIgYj1wLmxlbmd0aC0xOzA8PWI7Yi0tKWZvcih2YXIgYz1wW2JdLGQ9Yy5hbmltYXRpb25zLGU9ZC5sZW5ndGgtMTswPD1lO2UtLSlFKGEsXHJcbmRbZV0uYW5pbWF0YWJsZS50YXJnZXQpJiYoZC5zcGxpY2UoZSwxKSxkLmxlbmd0aHx8Yy5wYXVzZSgpKX07bS5nZXRWYWx1ZT1JO20ucGF0aD1mdW5jdGlvbihhLGIpe3ZhciBjPWcuc3RyKGEpP3UoYSlbMF06YSxkPWJ8fDEwMDtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJue2VsOmMscHJvcGVydHk6YSx0b3RhbExlbmd0aDpjLmdldFRvdGFsTGVuZ3RoKCkqKGQvMTAwKX19fTttLnNldERhc2hvZmZzZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5nZXRUb3RhbExlbmd0aCgpO2Euc2V0QXR0cmlidXRlKFwic3Ryb2tlLWRhc2hhcnJheVwiLGIpO3JldHVybiBifTttLmJlemllcj14O20uZWFzaW5ncz1NO20udGltZWxpbmU9ZnVuY3Rpb24oYSl7dmFyIGI9bShhKTtiLmR1cmF0aW9uPTA7Yi5jaGlsZHJlbj1bXTtiLmFkZD1mdW5jdGlvbihhKXt2KGEpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9YS5vZmZzZXQsZD1iLmR1cmF0aW9uO2EuYXV0b3BsYXk9ITE7YS5vZmZzZXQ9Zy51bmQoYyk/XHJcbmQ6SihjLGQpO2E9bShhKTthLmR1cmF0aW9uPmQmJihiLmR1cmF0aW9uPWEuZHVyYXRpb24pO2IuY2hpbGRyZW4ucHVzaChhKX0pO3JldHVybiBifTtyZXR1cm4gYn07bS5yYW5kb209ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWErMSkpK2F9O3JldHVybiBtfSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL2FuaW1lLm1pbi5qcyIsIiFmdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiPT10eXBlb2YgbW9kdWxlP3RoaXMuY2hhcm1pbmc9ZTptb2R1bGUuZXhwb3J0cz1lfShmdW5jdGlvbihlLG4pe1widXNlIHN0cmljdFwiO249bnx8e307dmFyIHQ9bi50YWdOYW1lfHxcInNwYW5cIixvPW51bGwhPW4uY2xhc3NQcmVmaXg/bi5jbGFzc1ByZWZpeDpcImNoYXJcIixyPTEsYT1mdW5jdGlvbihlKXtmb3IodmFyIG49ZS5wYXJlbnROb2RlLGE9ZS5ub2RlVmFsdWUsYz1hLmxlbmd0aCxsPS0xOysrbDxjOyl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KTtvJiYoZC5jbGFzc05hbWU9bytyLHIrKyksZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhW2xdKSksbi5pbnNlcnRCZWZvcmUoZCxlKX1uLnJlbW92ZUNoaWxkKGUpfTtyZXR1cm4gZnVuY3Rpb24gYyhlKXtmb3IodmFyIG49W10uc2xpY2UuY2FsbChlLmNoaWxkTm9kZXMpLHQ9bi5sZW5ndGgsbz0tMTsrK288dDspYyhuW29dKTtlLm5vZGVUeXBlPT09Tm9kZS5URVhUX05PREUmJmEoZSl9KGUpLGV9KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvanMvY2hhcm1pbmcubWluLmpzIiwiLy8gcmVxdWlyZSBqUXVlcnkgbm9ybWFsbHlcclxuY29uc3QgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5cclxuLy8gY3JlYXRlIGdsb2JhbCAkIGFuZCBqUXVlcnkgdmFyaWFibGVzXHJcbmdsb2JhbC4kID0gZ2xvYmFsLmpRdWVyeSA9ICQ7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9jb21tb24uanMiLCJcclxuLyohXHJcbiAqIGNsYXNzaWUgLSBjbGFzcyBoZWxwZXIgZnVuY3Rpb25zXHJcbiAqIGZyb20gYm9uem8gaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib256b1xyXG4gKiBcclxuICogY2xhc3NpZS5oYXMoIGVsZW0sICdteS1jbGFzcycgKSAtPiB0cnVlL2ZhbHNlXHJcbiAqIGNsYXNzaWUuYWRkKCBlbGVtLCAnbXktbmV3LWNsYXNzJyApXHJcbiAqIGNsYXNzaWUucmVtb3ZlKCBlbGVtLCAnbXktdW53YW50ZWQtY2xhc3MnIClcclxuICogY2xhc3NpZS50b2dnbGUoIGVsZW0sICdteS1jbGFzcycgKVxyXG4gKi9cclxuXHJcbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUgKi9cclxuLypnbG9iYWwgZGVmaW5lOiBmYWxzZSAqL1xyXG5cclxuKCBmdW5jdGlvbiggd2luZG93ICkge1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gY2xhc3MgaGVscGVyIGZ1bmN0aW9ucyBmcm9tIGJvbnpvIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvYm9uem9cclxuXHJcbmZ1bmN0aW9uIGNsYXNzUmVnKCBjbGFzc05hbWUgKSB7XHJcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoXnxcXFxccyspXCIgKyBjbGFzc05hbWUgKyBcIihcXFxccyt8JClcIik7XHJcbn1cclxuXHJcbi8vIGNsYXNzTGlzdCBzdXBwb3J0IGZvciBjbGFzcyBtYW5hZ2VtZW50XHJcbi8vIGFsdGhvIHRvIGJlIGZhaXIsIHRoZSBhcGkgc3Vja3MgYmVjYXVzZSBpdCB3b24ndCBhY2NlcHQgbXVsdGlwbGUgY2xhc3NlcyBhdCBvbmNlXHJcbnZhciBoYXNDbGFzcywgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzO1xyXG5cclxuaWYgKCAnY2xhc3NMaXN0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKSB7XHJcbiAgaGFzQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyggYyApO1xyXG4gIH07XHJcbiAgYWRkQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIGVsZW0uY2xhc3NMaXN0LmFkZCggYyApO1xyXG4gIH07XHJcbiAgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSggYyApO1xyXG4gIH07XHJcbn1cclxuZWxzZSB7XHJcbiAgaGFzQ2xhc3MgPSBmdW5jdGlvbiggZWxlbSwgYyApIHtcclxuICAgIHJldHVybiBjbGFzc1JlZyggYyApLnRlc3QoIGVsZW0uY2xhc3NOYW1lICk7XHJcbiAgfTtcclxuICBhZGRDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xyXG4gICAgaWYgKCAhaGFzQ2xhc3MoIGVsZW0sIGMgKSApIHtcclxuICAgICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZSArICcgJyArIGM7XHJcbiAgICB9XHJcbiAgfTtcclxuICByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtLCBjICkge1xyXG4gICAgZWxlbS5jbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZS5yZXBsYWNlKCBjbGFzc1JlZyggYyApLCAnICcgKTtcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyggZWxlbSwgYyApIHtcclxuICB2YXIgZm4gPSBoYXNDbGFzcyggZWxlbSwgYyApID8gcmVtb3ZlQ2xhc3MgOiBhZGRDbGFzcztcclxuICBmbiggZWxlbSwgYyApO1xyXG59XHJcblxyXG52YXIgY2xhc3NpZSA9IHtcclxuICAvLyBmdWxsIG5hbWVzXHJcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxyXG4gIGFkZENsYXNzOiBhZGRDbGFzcyxcclxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXHJcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxyXG4gIC8vIHNob3J0IG5hbWVzXHJcbiAgaGFzOiBoYXNDbGFzcyxcclxuICBhZGQ6IGFkZENsYXNzLFxyXG4gIHJlbW92ZTogcmVtb3ZlQ2xhc3MsXHJcbiAgdG9nZ2xlOiB0b2dnbGVDbGFzc1xyXG59O1xyXG5cclxuLy8gdHJhbnNwb3J0XHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xyXG4gIC8vIEFNRFxyXG4gIGRlZmluZSggY2xhc3NpZSApO1xyXG59IGVsc2Uge1xyXG4gIC8vIGJyb3dzZXIgZ2xvYmFsXHJcbiAgd2luZG93LmNsYXNzaWUgPSBjbGFzc2llO1xyXG59XHJcblxyXG59KSggd2luZG93ICk7XHJcblxyXG5cclxuLyoqXHJcbiAqIGNicEFuaW1hdGVkSGVhZGVyLm1pbi5qcyB2MS4wLjBcclxuICogaHR0cDovL3d3dy5jb2Ryb3BzLmNvbVxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcbiAqIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbiAqIFxyXG4gKiBDb3B5cmlnaHQgMjAxMywgQ29kcm9wc1xyXG4gKiBodHRwOi8vd3d3LmNvZHJvcHMuY29tXHJcbiAqL1xyXG52YXIgY2JwQW5pbWF0ZWRIZWFkZXI9KGZ1bmN0aW9uKCl7dmFyIGI9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGc9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYnAtYWYtaGVhZGVyXCIpLGU9ZmFsc2UsYT0xMDA7ZnVuY3Rpb24gZigpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsZnVuY3Rpb24oaCl7aWYoIWUpe2U9dHJ1ZTtzZXRUaW1lb3V0KGQsMjUwKX19LGZhbHNlKX1mdW5jdGlvbiBkKCl7dmFyIGg9YygpO2lmKGg+PWEpe2NsYXNzaWUuYWRkKGcsXCJjYnAtYWYtaGVhZGVyLXNocmlua1wiKX1lbHNle2NsYXNzaWUucmVtb3ZlKGcsXCJjYnAtYWYtaGVhZGVyLXNocmlua1wiKX1lPWZhbHNlfWZ1bmN0aW9uIGMoKXtyZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0fHxiLnNjcm9sbFRvcH1mKCl9KSgpO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvanMvaGVhZGVyLWFuaW1lLmpzIiwiLyohIGpRdWVyeSB2Mi4xLjEgfCAoYykgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xyXG4hZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YS5kb2N1bWVudD9iKGEsITApOmZ1bmN0aW9uKGEpe2lmKCFhLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIGIoYSl9OmIoYSl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPWMuc2xpY2UsZT1jLmNvbmNhdCxmPWMucHVzaCxnPWMuaW5kZXhPZixoPXt9LGk9aC50b1N0cmluZyxqPWguaGFzT3duUHJvcGVydHksaz17fSxsPWEuZG9jdW1lbnQsbT1cIjIuMS4xXCIsbj1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgbi5mbi5pbml0KGEsYil9LG89L15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLHA9L14tbXMtLyxxPS8tKFtcXGRhLXpdKS9naSxyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX07bi5mbj1uLnByb3RvdHlwZT17anF1ZXJ5Om0sY29uc3RydWN0b3I6bixzZWxlY3RvcjpcIlwiLGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gZC5jYWxsKHRoaXMpfSxnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/MD5hP3RoaXNbYSt0aGlzLmxlbmd0aF06dGhpc1thXTpkLmNhbGwodGhpcyl9LHB1c2hTdGFjazpmdW5jdGlvbihhKXt2YXIgYj1uLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSxhKTtyZXR1cm4gYi5wcmV2T2JqZWN0PXRoaXMsYi5jb250ZXh0PXRoaXMuY29udGV4dCxifSxlYWNoOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uZWFjaCh0aGlzLGEsYil9LG1hcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobi5tYXAodGhpcyxmdW5jdGlvbihiLGMpe3JldHVybiBhLmNhbGwoYixjLGIpfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhkLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9LGZpcnN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoMCl9LGxhc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgtMSl9LGVxOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMubGVuZ3RoLGM9K2ErKDA+YT9iOjApO3JldHVybiB0aGlzLnB1c2hTdGFjayhjPj0wJiZiPmM/W3RoaXNbY11dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcihudWxsKX0scHVzaDpmLHNvcnQ6Yy5zb3J0LHNwbGljZTpjLnNwbGljZX0sbi5leHRlbmQ9bi5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZz1hcmd1bWVudHNbMF18fHt9LGg9MSxpPWFyZ3VtZW50cy5sZW5ndGgsaj0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBnJiYoaj1nLGc9YXJndW1lbnRzW2hdfHx7fSxoKyspLFwib2JqZWN0XCI9PXR5cGVvZiBnfHxuLmlzRnVuY3Rpb24oZyl8fChnPXt9KSxoPT09aSYmKGc9dGhpcyxoLS0pO2k+aDtoKyspaWYobnVsbCE9KGE9YXJndW1lbnRzW2hdKSlmb3IoYiBpbiBhKWM9Z1tiXSxkPWFbYl0sZyE9PWQmJihqJiZkJiYobi5pc1BsYWluT2JqZWN0KGQpfHwoZT1uLmlzQXJyYXkoZCkpKT8oZT8oZT0hMSxmPWMmJm4uaXNBcnJheShjKT9jOltdKTpmPWMmJm4uaXNQbGFpbk9iamVjdChjKT9jOnt9LGdbYl09bi5leHRlbmQoaixmLGQpKTp2b2lkIDAhPT1kJiYoZ1tiXT1kKSk7cmV0dXJuIGd9LG4uZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKG0rTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoYSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT09bi50eXBlKGEpfSxpc0FycmF5OkFycmF5LmlzQXJyYXksaXNXaW5kb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEmJmE9PT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3JldHVybiFuLmlzQXJyYXkoYSkmJmEtcGFyc2VGbG9hdChhKT49MH0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiIT09bi50eXBlKGEpfHxhLm5vZGVUeXBlfHxuLmlzV2luZG93KGEpPyExOmEuY29uc3RydWN0b3ImJiFqLmNhbGwoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXCJpc1Byb3RvdHlwZU9mXCIpPyExOiEwfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2ZvcihiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9LHR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/YStcIlwiOlwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2hbaS5jYWxsKGEpXXx8XCJvYmplY3RcIjp0eXBlb2YgYX0sZ2xvYmFsRXZhbDpmdW5jdGlvbihhKXt2YXIgYixjPWV2YWw7YT1uLnRyaW0oYSksYSYmKDE9PT1hLmluZGV4T2YoXCJ1c2Ugc3RyaWN0XCIpPyhiPWwuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxiLnRleHQ9YSxsLmhlYWQuYXBwZW5kQ2hpbGQoYikucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSk6YyhhKSl9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHAsXCJtcy1cIikucmVwbGFjZShxLHIpfSxub2RlTmFtZTpmdW5jdGlvbihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9MCxmPWEubGVuZ3RoLGc9cyhhKTtpZihjKXtpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmFwcGx5KGFbZV0sYyksZD09PSExKWJyZWFrfWVsc2UgZm9yKGUgaW4gYSlpZihkPWIuYXBwbHkoYVtlXSxjKSxkPT09ITEpYnJlYWt9ZWxzZSBpZihnKXtmb3IoO2Y+ZTtlKyspaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVha31lbHNlIGZvcihlIGluIGEpaWYoZD1iLmNhbGwoYVtlXSxlLGFbZV0pLGQ9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOihhK1wiXCIpLnJlcGxhY2UobyxcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJihzKE9iamVjdChhKSk/bi5tZXJnZShjLFwic3RyaW5nXCI9PXR5cGVvZiBhP1thXTphKTpmLmNhbGwoYyxhKSksY30saW5BcnJheTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG51bGw9PWI/LTE6Zy5jYWxsKGIsYSxjKX0sbWVyZ2U6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9K2IubGVuZ3RoLGQ9MCxlPWEubGVuZ3RoO2M+ZDtkKyspYVtlKytdPWJbZF07cmV0dXJuIGEubGVuZ3RoPWUsYX0sZ3JlcDpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkLGU9W10sZj0wLGc9YS5sZW5ndGgsaD0hYztnPmY7ZisrKWQ9IWIoYVtmXSxmKSxkIT09aCYmZS5wdXNoKGFbZl0pO3JldHVybiBlfSxtYXA6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGY9MCxnPWEubGVuZ3RoLGg9cyhhKSxpPVtdO2lmKGgpZm9yKDtnPmY7ZisrKWQ9YihhW2ZdLGYsYyksbnVsbCE9ZCYmaS5wdXNoKGQpO2Vsc2UgZm9yKGYgaW4gYSlkPWIoYVtmXSxmLGMpLG51bGwhPWQmJmkucHVzaChkKTtyZXR1cm4gZS5hcHBseShbXSxpKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGEsYil7dmFyIGMsZSxmO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBiJiYoYz1hW2JdLGI9YSxhPWMpLG4uaXNGdW5jdGlvbihhKT8oZT1kLmNhbGwoYXJndW1lbnRzLDIpLGY9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGUuY29uY2F0KGQuY2FsbChhcmd1bWVudHMpKSl9LGYuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxuLmd1aWQrKyxmKTp2b2lkIDB9LG5vdzpEYXRlLm5vdyxzdXBwb3J0Omt9KSxuLmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7aFtcIltvYmplY3QgXCIrYitcIl1cIl09Yi50b0xvd2VyQ2FzZSgpfSk7ZnVuY3Rpb24gcyhhKXt2YXIgYj1hLmxlbmd0aCxjPW4udHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCI9PT1jfHxuLmlzV2luZG93KGEpPyExOjE9PT1hLm5vZGVUeXBlJiZiPyEwOlwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYX12YXIgdD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1PVwic2l6emxlXCIrLW5ldyBEYXRlLHY9YS5kb2N1bWVudCx3PTAseD0wLHk9Z2IoKSx6PWdiKCksQT1nYigpLEI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWImJihsPSEwKSwwfSxDPVwidW5kZWZpbmVkXCIsRD0xPDwzMSxFPXt9Lmhhc093blByb3BlcnR5LEY9W10sRz1GLnBvcCxIPUYucHVzaCxJPUYucHVzaCxKPUYuc2xpY2UsSz1GLmluZGV4T2Z8fGZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9dGhpcy5sZW5ndGg7Yz5iO2IrKylpZih0aGlzW2JdPT09YSlyZXR1cm4gYjtyZXR1cm4tMX0sTD1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsTT1cIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsTj1cIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLE89Ti5yZXBsYWNlKFwid1wiLFwidyNcIiksUD1cIlxcXFxbXCIrTStcIiooXCIrTitcIikoPzpcIitNK1wiKihbKl4kfCF+XT89KVwiK00rXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIitPK1wiKSl8KVwiK00rXCIqXFxcXF1cIixRPVwiOihcIitOK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitQK1wiKSopfC4qKVxcXFwpfClcIixSPW5ldyBSZWdFeHAoXCJeXCIrTStcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrTStcIiskXCIsXCJnXCIpLFM9bmV3IFJlZ0V4cChcIl5cIitNK1wiKixcIitNK1wiKlwiKSxUPW5ldyBSZWdFeHAoXCJeXCIrTStcIiooWz4rfl18XCIrTStcIilcIitNK1wiKlwiKSxVPW5ldyBSZWdFeHAoXCI9XCIrTStcIiooW15cXFxcXSdcXFwiXSo/KVwiK00rXCIqXFxcXF1cIixcImdcIiksVj1uZXcgUmVnRXhwKFEpLFc9bmV3IFJlZ0V4cChcIl5cIitPK1wiJFwiKSxYPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrTitcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitOK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrTi5yZXBsYWNlKFwid1wiLFwidypcIikrXCIpXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitQKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitRKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitNK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrTStcIiooPzooWystXXwpXCIrTStcIiooXFxcXGQrKXwpKVwiK00rXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrTCtcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK00rXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK00rXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK00rXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFk9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxaPS9eaFxcZCQvaSwkPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXz0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxhYj0vWyt+XS8sYmI9Lyd8XFxcXC9nLGNiPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitNK1wiP3woXCIrTStcIil8LilcIixcImlnXCIpLGRiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cIjB4XCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjowPmQ/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9O3RyeXtJLmFwcGx5KEY9Si5jYWxsKHYuY2hpbGROb2Rlcyksdi5jaGlsZE5vZGVzKSxGW3YuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGViKXtJPXthcHBseTpGLmxlbmd0aD9mdW5jdGlvbihhLGIpe0guYXBwbHkoYSxKLmNhbGwoYikpfTpmdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoLGQ9MDt3aGlsZShhW2MrK109YltkKytdKTthLmxlbmd0aD1jLTF9fX1mdW5jdGlvbiBmYihhLGIsZCxlKXt2YXIgZixoLGosayxsLG8scixzLHcseDtpZigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixkPWR8fFtdLCFhfHxcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gZDtpZigxIT09KGs9Yi5ub2RlVHlwZSkmJjkhPT1rKXJldHVybltdO2lmKHAmJiFlKXtpZihmPV8uZXhlYyhhKSlpZihqPWZbMV0pe2lmKDk9PT1rKXtpZihoPWIuZ2V0RWxlbWVudEJ5SWQoaiksIWh8fCFoLnBhcmVudE5vZGUpcmV0dXJuIGQ7aWYoaC5pZD09PWopcmV0dXJuIGQucHVzaChoKSxkfWVsc2UgaWYoYi5vd25lckRvY3VtZW50JiYoaD1iLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaikpJiZ0KGIsaCkmJmguaWQ9PT1qKXJldHVybiBkLnB1c2goaCksZH1lbHNle2lmKGZbMl0pcmV0dXJuIEkuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSxkO2lmKChqPWZbM10pJiZjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gSS5hcHBseShkLGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShqKSksZH1pZihjLnFzYSYmKCFxfHwhcS50ZXN0KGEpKSl7aWYocz1yPXUsdz1iLHg9OT09PWsmJmEsMT09PWsmJlwib2JqZWN0XCIhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpe289ZyhhKSwocj1iLmdldEF0dHJpYnV0ZShcImlkXCIpKT9zPXIucmVwbGFjZShiYixcIlxcXFwkJlwiKTpiLnNldEF0dHJpYnV0ZShcImlkXCIscykscz1cIltpZD0nXCIrcytcIiddIFwiLGw9by5sZW5ndGg7d2hpbGUobC0tKW9bbF09cytxYihvW2xdKTt3PWFiLnRlc3QoYSkmJm9iKGIucGFyZW50Tm9kZSl8fGIseD1vLmpvaW4oXCIsXCIpfWlmKHgpdHJ5e3JldHVybiBJLmFwcGx5KGQsdy5xdWVyeVNlbGVjdG9yQWxsKHgpKSxkfWNhdGNoKHkpe31maW5hbGx5e3J8fGIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gaShhLnJlcGxhY2UoUixcIiQxXCIpLGIsZCxlKX1mdW5jdGlvbiBnYigpe3ZhciBhPVtdO2Z1bmN0aW9uIGIoYyxlKXtyZXR1cm4gYS5wdXNoKGMrXCIgXCIpPmQuY2FjaGVMZW5ndGgmJmRlbGV0ZSBiW2Euc2hpZnQoKV0sYltjK1wiIFwiXT1lfXJldHVybiBifWZ1bmN0aW9uIGhiKGEpe3JldHVybiBhW3VdPSEwLGF9ZnVuY3Rpb24gaWIoYSl7dmFyIGI9bi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGpiKGEsYil7dmFyIGM9YS5zcGxpdChcInxcIiksZT1hLmxlbmd0aDt3aGlsZShlLS0pZC5hdHRySGFuZGxlW2NbZV1dPWJ9ZnVuY3Rpb24ga2IoYSxiKXt2YXIgYz1iJiZhLGQ9YyYmMT09PWEubm9kZVR5cGUmJjE9PT1iLm5vZGVUeXBlJiYofmIuc291cmNlSW5kZXh8fEQpLSh+YS5zb3VyY2VJbmRleHx8RCk7aWYoZClyZXR1cm4gZDtpZihjKXdoaWxlKGM9Yy5uZXh0U2libGluZylpZihjPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIGxiKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbWIoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09Y3x8XCJidXR0b25cIj09PWMpJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBuYihhKXtyZXR1cm4gaGIoZnVuY3Rpb24oYil7cmV0dXJuIGI9K2IsaGIoZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEoW10sYy5sZW5ndGgsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pY1tlPWZbZ11dJiYoY1tlXT0hKGRbZV09Y1tlXSkpfSl9KX1mdW5jdGlvbiBvYihhKXtyZXR1cm4gYSYmdHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUhPT1DJiZhfWM9ZmIuc3VwcG9ydD17fSxmPWZiLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4gYj9cIkhUTUxcIiE9PWIubm9kZU5hbWU6ITF9LG09ZmIuc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZT1hP2Eub3duZXJEb2N1bWVudHx8YTp2LGc9ZS5kZWZhdWx0VmlldztyZXR1cm4gZSE9PW4mJjk9PT1lLm5vZGVUeXBlJiZlLmRvY3VtZW50RWxlbWVudD8obj1lLG89ZS5kb2N1bWVudEVsZW1lbnQscD0hZihlKSxnJiZnIT09Zy50b3AmJihnLmFkZEV2ZW50TGlzdGVuZXI/Zy5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsZnVuY3Rpb24oKXttKCl9LCExKTpnLmF0dGFjaEV2ZW50JiZnLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixmdW5jdGlvbigpe20oKX0pKSxjLmF0dHJpYnV0ZXM9aWIoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9aWIoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZS5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPSQudGVzdChlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpJiZpYihmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8ZGl2IGNsYXNzPSdhJz48L2Rpdj48ZGl2IGNsYXNzPSdhIGknPjwvZGl2PlwiLGEuZmlyc3RDaGlsZC5jbGFzc05hbWU9XCJpXCIsMj09PWEuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImlcIikubGVuZ3RofSksYy5nZXRCeUlkPWliKGZ1bmN0aW9uKGEpe3JldHVybiBvLmFwcGVuZENoaWxkKGEpLmlkPXUsIWUuZ2V0RWxlbWVudHNCeU5hbWV8fCFlLmdldEVsZW1lbnRzQnlOYW1lKHUpLmxlbmd0aH0pLGMuZ2V0QnlJZD8oZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQhPT1DJiZwKXt2YXIgYz1iLmdldEVsZW1lbnRCeUlkKGEpO3JldHVybiBjJiZjLnBhcmVudE5vZGU/W2NdOltdfX0sZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNiLGRiKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0pOihkZWxldGUgZC5maW5kLklELGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShjYixkYik7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUhPT1DJiZhLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtyZXR1cm4gYyYmYy52YWx1ZT09PWJ9fSksZC5maW5kLlRBRz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGEsYil7cmV0dXJuIHR5cGVvZiBiLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09Qz9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOnZvaWQgMH06ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9MCxmPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSk7aWYoXCIqXCI9PT1hKXt3aGlsZShjPWZbZSsrXSkxPT09Yy5ub2RlVHlwZSYmZC5wdXNoKGMpO3JldHVybiBkfXJldHVybiBmfSxkLmZpbmQuQ0xBU1M9Yy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZmdW5jdGlvbihhLGIpe3JldHVybiB0eXBlb2YgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lIT09QyYmcD9iLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSk6dm9pZCAwfSxyPVtdLHE9W10sKGMucXNhPSQudGVzdChlLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGliKGZ1bmN0aW9uKGEpe2EuaW5uZXJIVE1MPVwiPHNlbGVjdCBtc2FsbG93Y2xpcD0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLGEucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2xpcF49JyddXCIpLmxlbmd0aCYmcS5wdXNoKFwiWypeJF09XCIrTStcIiooPzonJ3xcXFwiXFxcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGh8fHEucHVzaChcIlxcXFxbXCIrTStcIiooPzp2YWx1ZXxcIitMK1wiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHEucHVzaChcIjpjaGVja2VkXCIpfSksaWIoZnVuY3Rpb24oYSl7dmFyIGI9ZS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIiksYS5hcHBlbmRDaGlsZChiKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCYmcS5wdXNoKFwibmFtZVwiK00rXCIqWypeJHwhfl0/PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGh8fHEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSxxLnB1c2goXCIsLio6XCIpfSkpLChjLm1hdGNoZXNTZWxlY3Rvcj0kLnRlc3Qocz1vLm1hdGNoZXN8fG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxvLm1vek1hdGNoZXNTZWxlY3Rvcnx8by5vTWF0Y2hlc1NlbGVjdG9yfHxvLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmliKGZ1bmN0aW9uKGEpe2MuZGlzY29ubmVjdGVkTWF0Y2g9cy5jYWxsKGEsXCJkaXZcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixRKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPSQudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fCQudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PWV8fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09ZXx8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9LLmNhbGwoayxhKS1LLmNhbGwoayxiKTowOjQmZD8tMToxKX06ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gbD0hMCwwO3ZhciBjLGQ9MCxmPWEucGFyZW50Tm9kZSxnPWIucGFyZW50Tm9kZSxoPVthXSxpPVtiXTtpZighZnx8IWcpcmV0dXJuIGE9PT1lPy0xOmI9PT1lPzE6Zj8tMTpnPzE6az9LLmNhbGwoayxhKS1LLmNhbGwoayxiKTowO2lmKGY9PT1nKXJldHVybiBrYihhLGIpO2M9YTt3aGlsZShjPWMucGFyZW50Tm9kZSloLnVuc2hpZnQoYyk7Yz1iO3doaWxlKGM9Yy5wYXJlbnROb2RlKWkudW5zaGlmdChjKTt3aGlsZShoW2RdPT09aVtkXSlkKys7cmV0dXJuIGQ/a2IoaFtkXSxpW2RdKTpoW2RdPT09dj8tMTppW2RdPT09dj8xOjB9LGUpOm59LGZiLm1hdGNoZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZmIoYSxudWxsLG51bGwsYil9LGZiLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihhLGIpe2lmKChhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSxiPWIucmVwbGFjZShVLFwiPSckMSddXCIpLCEoIWMubWF0Y2hlc1NlbGVjdG9yfHwhcHx8ciYmci50ZXN0KGIpfHxxJiZxLnRlc3QoYikpKXRyeXt2YXIgZD1zLmNhbGwoYSxiKTtpZihkfHxjLmRpc2Nvbm5lY3RlZE1hdGNofHxhLmRvY3VtZW50JiYxMSE9PWEuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIGR9Y2F0Y2goZSl7fXJldHVybiBmYihiLG4sbnVsbCxbYV0pLmxlbmd0aD4wfSxmYi5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybihhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSx0KGEsYil9LGZiLmF0dHI9ZnVuY3Rpb24oYSxiKXsoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSk7dmFyIGU9ZC5hdHRySGFuZGxlW2IudG9Mb3dlckNhc2UoKV0sZj1lJiZFLmNhbGwoZC5hdHRySGFuZGxlLGIudG9Mb3dlckNhc2UoKSk/ZShhLGIsIXApOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09Zj9mOmMuYXR0cmlidXRlc3x8IXA/YS5nZXRBdHRyaWJ1dGUoYik6KGY9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZi5zcGVjaWZpZWQ/Zi52YWx1ZTpudWxsfSxmYi5lcnJvcj1mdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIithKX0sZmIudW5pcXVlU29ydD1mdW5jdGlvbihhKXt2YXIgYixkPVtdLGU9MCxmPTA7aWYobD0hYy5kZXRlY3REdXBsaWNhdGVzLGs9IWMuc29ydFN0YWJsZSYmYS5zbGljZSgwKSxhLnNvcnQoQiksbCl7d2hpbGUoYj1hW2YrK10pYj09PWFbZl0mJihlPWQucHVzaChmKSk7d2hpbGUoZS0tKWEuc3BsaWNlKGRbZV0sMSl9cmV0dXJuIGs9bnVsbCxhfSxlPWZiLmdldFRleHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1cIlwiLGQ9MCxmPWEubm9kZVR5cGU7aWYoZil7aWYoMT09PWZ8fDk9PT1mfHwxMT09PWYpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhLnRleHRDb250ZW50KXJldHVybiBhLnRleHRDb250ZW50O2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZyljKz1lKGEpfWVsc2UgaWYoMz09PWZ8fDQ9PT1mKXJldHVybiBhLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKGI9YVtkKytdKWMrPWUoYik7cmV0dXJuIGN9LGQ9ZmIuc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86aGIsbWF0Y2g6WCxhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0ucmVwbGFjZShjYixkYiksYVszXT0oYVszXXx8YVs0XXx8YVs1XXx8XCJcIikucmVwbGFjZShjYixkYiksXCJ+PVwiPT09YVsyXSYmKGFbM109XCIgXCIrYVszXStcIiBcIiksYS5zbGljZSgwLDQpfSxDSElMRDpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnRvTG93ZXJDYXNlKCksXCJudGhcIj09PWFbMV0uc2xpY2UoMCwzKT8oYVszXXx8ZmIuZXJyb3IoYVswXSksYVs0XT0rKGFbNF0/YVs1XSsoYVs2XXx8MSk6MiooXCJldmVuXCI9PT1hWzNdfHxcIm9kZFwiPT09YVszXSkpLGFbNV09KyhhWzddK2FbOF18fFwib2RkXCI9PT1hWzNdKSk6YVszXSYmZmIuZXJyb3IoYVswXSksYX0sUFNFVURPOmZ1bmN0aW9uKGEpe3ZhciBiLGM9IWFbNl0mJmFbMl07cmV0dXJuIFguQ0hJTEQudGVzdChhWzBdKT9udWxsOihhWzNdP2FbMl09YVs0XXx8YVs1XXx8XCJcIjpjJiZWLnRlc3QoYykmJihiPWcoYywhMCkpJiYoYj1jLmluZGV4T2YoXCIpXCIsYy5sZW5ndGgtYiktYy5sZW5ndGgpJiYoYVswXT1hWzBdLnNsaWNlKDAsYiksYVsyXT1jLnNsaWNlKDAsYikpLGEuc2xpY2UoMCwzKSl9fSxmaWx0ZXI6e1RBRzpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoY2IsZGIpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1hP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ifX0sQ0xBU1M6ZnVuY3Rpb24oYSl7dmFyIGI9eVthK1wiIFwiXTtyZXR1cm4gYnx8KGI9bmV3IFJlZ0V4cChcIihefFwiK00rXCIpXCIrYStcIihcIitNK1wifCQpXCIpKSYmeShhLGZ1bmN0aW9uKGEpe3JldHVybiBiLnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGEuY2xhc3NOYW1lJiZhLmNsYXNzTmFtZXx8dHlwZW9mIGEuZ2V0QXR0cmlidXRlIT09QyYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWZiLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOmI/KGUrPVwiXCIsXCI9XCI9PT1iP2U9PT1jOlwiIT1cIj09PWI/ZSE9PWM6XCJePVwiPT09Yj9jJiYwPT09ZS5pbmRleE9mKGMpOlwiKj1cIj09PWI/YyYmZS5pbmRleE9mKGMpPi0xOlwiJD1cIj09PWI/YyYmZS5zbGljZSgtYy5sZW5ndGgpPT09YzpcIn49XCI9PT1iPyhcIiBcIitlK1wiIFwiKS5pbmRleE9mKGMpPi0xOlwifD1cIj09PWI/ZT09PWN8fGUuc2xpY2UoMCxjLmxlbmd0aCsxKT09PWMrXCItXCI6ITEpOiEwfX0sQ0hJTEQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm50aFwiIT09YS5zbGljZSgwLDMpLGc9XCJsYXN0XCIhPT1hLnNsaWNlKC00KSxoPVwib2YtdHlwZVwiPT09YjtyZXR1cm4gMT09PWQmJjA9PT1lP2Z1bmN0aW9uKGEpe3JldHVybiEhYS5wYXJlbnROb2RlfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG0sbixvLHA9ZiE9PWc/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIscT1iLnBhcmVudE5vZGUscj1oJiZiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscz0haSYmIWg7aWYocSl7aWYoZil7d2hpbGUocCl7bD1iO3doaWxlKGw9bFtwXSlpZihoP2wubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PWwubm9kZVR5cGUpcmV0dXJuITE7bz1wPVwib25seVwiPT09YSYmIW8mJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihvPVtnP3EuZmlyc3RDaGlsZDpxLmxhc3RDaGlsZF0sZyYmcyl7az1xW3VdfHwocVt1XT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLG09alswXT09PXcmJmpbMl0sbD1uJiZxLmNoaWxkTm9kZXNbbl07d2hpbGUobD0rK24mJmwmJmxbcF18fChtPW49MCl8fG8ucG9wKCkpaWYoMT09PWwubm9kZVR5cGUmJisrbSYmbD09PWIpe2tbYV09W3csbixtXTticmVha319ZWxzZSBpZihzJiYoaj0oYlt1XXx8KGJbdV09e30pKVthXSkmJmpbMF09PT13KW09alsxXTtlbHNlIHdoaWxlKGw9KytuJiZsJiZsW3BdfHwobT1uPTApfHxvLnBvcCgpKWlmKChoP2wubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PWwubm9kZVR5cGUpJiYrK20mJihzJiYoKGxbdV18fChsW3VdPXt9KSlbYV09W3csbV0pLGw9PT1iKSlicmVhaztyZXR1cm4gbS09ZSxtPT09ZHx8bSVkPT09MCYmbS9kPj0wfX19LFBTRVVETzpmdW5jdGlvbihhLGIpe3ZhciBjLGU9ZC5wc2V1ZG9zW2FdfHxkLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXXx8ZmIuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLFwiXCIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/aGIoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUsuY2FsbChhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDpoYihmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9aChhLnJlcGxhY2UoUixcIiQxXCIpKTtyZXR1cm4gZFt1XT9oYihmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSwhYy5wb3AoKX19KSxoYXM6aGIoZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBmYihhLGIpLmxlbmd0aD4wfX0pLGNvbnRhaW5zOmhiKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4oYi50ZXh0Q29udGVudHx8Yi5pbm5lclRleHR8fGUoYikpLmluZGV4T2YoYSk+LTF9fSksbGFuZzpoYihmdW5jdGlvbihhKXtyZXR1cm4gVy50ZXN0KGF8fFwiXCIpfHxmYi5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK2EpLGE9YS5yZXBsYWNlKGNiLGRiKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGIpe3ZhciBjO2RvIGlmKGM9cD9iLmxhbmc6Yi5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8Yi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybiBjPWMudG9Mb3dlckNhc2UoKSxjPT09YXx8MD09PWMuaW5kZXhPZihhK1wiLVwiKTt3aGlsZSgoYj1iLnBhcmVudE5vZGUpJiYxPT09Yi5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGIpe3ZhciBjPWEubG9jYXRpb24mJmEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyYmYy5zbGljZSgxKT09PWIuaWR9LHJvb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1vfSxmb2N1czpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW4uYWN0aXZlRWxlbWVudCYmKCFuLmhhc0ZvY3VzfHxuLmhhc0ZvY3VzKCkpJiYhIShhLnR5cGV8fGEuaHJlZnx8fmEudGFiSW5kZXgpfSxlbmFibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITF9LGRpc2FibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITB9LGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJiEhYS5jaGVja2VkfHxcIm9wdGlvblwiPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFoudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFkudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiZcImJ1dHRvblwiPT09YS50eXBlfHxcImJ1dHRvblwiPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm5cImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09YS50eXBlJiYobnVsbD09KGI9YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpuYihmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6bmIoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOm5iKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bMD5jP2MrYjpjXX0pLGV2ZW46bmIoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6bmIoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpuYihmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA+Yz9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0Om5iKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9MD5jP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1sYihiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1tYihiKTtmdW5jdGlvbiBwYigpe31wYi5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IHBiLGc9ZmIudG9rZW5pemU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGYsZyxoLGksaixrPXpbYStcIiBcIl07aWYoaylyZXR1cm4gYj8wOmsuc2xpY2UoMCk7aD1hLGk9W10saj1kLnByZUZpbHRlcjt3aGlsZShoKXsoIWN8fChlPVMuZXhlYyhoKSkpJiYoZSYmKGg9aC5zbGljZShlWzBdLmxlbmd0aCl8fGgpLGkucHVzaChmPVtdKSksYz0hMSwoZT1ULmV4ZWMoaCkpJiYoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZVswXS5yZXBsYWNlKFIsXCIgXCIpfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7Zm9yKGcgaW4gZC5maWx0ZXIpIShlPVhbZ10uZXhlYyhoKSl8fGpbZ10mJiEoZT1qW2ddKGUpKXx8KGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmcsbWF0Y2hlczplfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7aWYoIWMpYnJlYWt9cmV0dXJuIGI/aC5sZW5ndGg6aD9mYi5lcnJvcihhKTp6KGEsaSkuc2xpY2UoMCl9O2Z1bmN0aW9uIHFiKGEpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGgsZD1cIlwiO2M+YjtiKyspZCs9YVtiXS52YWx1ZTtyZXR1cm4gZH1mdW5jdGlvbiByYihhLGIsYyl7dmFyIGQ9Yi5kaXIsZT1jJiZcInBhcmVudE5vZGVcIj09PWQsZj14Kys7cmV0dXJuIGIuZmlyc3Q/ZnVuY3Rpb24oYixjLGYpe3doaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZSlyZXR1cm4gYShiLGMsZil9OmZ1bmN0aW9uKGIsYyxnKXt2YXIgaCxpLGo9W3csZl07aWYoZyl7d2hpbGUoYj1iW2RdKWlmKCgxPT09Yi5ub2RlVHlwZXx8ZSkmJmEoYixjLGcpKXJldHVybiEwfWVsc2Ugd2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxlKXtpZihpPWJbdV18fChiW3VdPXt9KSwoaD1pW2RdKSYmaFswXT09PXcmJmhbMV09PT1mKXJldHVybiBqWzJdPWhbMl07aWYoaVtkXT1qLGpbMl09YShiLGMsZykpcmV0dXJuITB9fX1mdW5jdGlvbiBzYihhKXtyZXR1cm4gYS5sZW5ndGg+MT9mdW5jdGlvbihiLGMsZCl7dmFyIGU9YS5sZW5ndGg7d2hpbGUoZS0tKWlmKCFhW2VdKGIsYyxkKSlyZXR1cm4hMTtyZXR1cm4hMH06YVswXX1mdW5jdGlvbiB0YihhLGIsYyl7Zm9yKHZhciBkPTAsZT1iLmxlbmd0aDtlPmQ7ZCsrKWZiKGEsYltkXSxjKTtyZXR1cm4gY31mdW5jdGlvbiB1YihhLGIsYyxkLGUpe2Zvcih2YXIgZixnPVtdLGg9MCxpPWEubGVuZ3RoLGo9bnVsbCE9YjtpPmg7aCsrKShmPWFbaF0pJiYoIWN8fGMoZixkLGUpKSYmKGcucHVzaChmKSxqJiZiLnB1c2goaCkpO3JldHVybiBnfWZ1bmN0aW9uIHZiKGEsYixjLGQsZSxmKXtyZXR1cm4gZCYmIWRbdV0mJihkPXZiKGQpKSxlJiYhZVt1XSYmKGU9dmIoZSxmKSksaGIoZnVuY3Rpb24oZixnLGgsaSl7dmFyIGosayxsLG09W10sbj1bXSxvPWcubGVuZ3RoLHA9Znx8dGIoYnx8XCIqXCIsaC5ub2RlVHlwZT9baF06aCxbXSkscT0hYXx8IWYmJmI/cDp1YihwLG0sYSxoLGkpLHI9Yz9lfHwoZj9hOm98fGQpP1tdOmc6cTtpZihjJiZjKHEscixoLGkpLGQpe2o9dWIocixuKSxkKGosW10saCxpKSxrPWoubGVuZ3RoO3doaWxlKGstLSkobD1qW2tdKSYmKHJbbltrXV09IShxW25ba11dPWwpKX1pZihmKXtpZihlfHxhKXtpZihlKXtqPVtdLGs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiZqLnB1c2gocVtrXT1sKTtlKG51bGwscj1bXSxqLGkpfWs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiYoaj1lP0suY2FsbChmLGwpOm1ba10pPi0xJiYoZltqXT0hKGdbal09bCkpfX1lbHNlIHI9dWIocj09PWc/ci5zcGxpY2UobyxyLmxlbmd0aCk6ciksZT9lKG51bGwsZyxyLGkpOkkuYXBwbHkoZyxyKX0pfWZ1bmN0aW9uIHdiKGEpe2Zvcih2YXIgYixjLGUsZj1hLmxlbmd0aCxnPWQucmVsYXRpdmVbYVswXS50eXBlXSxoPWd8fGQucmVsYXRpdmVbXCIgXCJdLGk9Zz8xOjAsaz1yYihmdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9LGgsITApLGw9cmIoZnVuY3Rpb24oYSl7cmV0dXJuIEsuY2FsbChiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7cmV0dXJuIWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSl9XTtmPmk7aSsrKWlmKGM9ZC5yZWxhdGl2ZVthW2ldLnR5cGVdKW09W3JiKHNiKG0pLGMpXTtlbHNle2lmKGM9ZC5maWx0ZXJbYVtpXS50eXBlXS5hcHBseShudWxsLGFbaV0ubWF0Y2hlcyksY1t1XSl7Zm9yKGU9KytpO2Y+ZTtlKyspaWYoZC5yZWxhdGl2ZVthW2VdLnR5cGVdKWJyZWFrO3JldHVybiB2YihpPjEmJnNiKG0pLGk+MSYmcWIoYS5zbGljZSgwLGktMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWFbaS0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZShSLFwiJDFcIiksYyxlPmkmJndiKGEuc2xpY2UoaSxlKSksZj5lJiZ3YihhPWEuc2xpY2UoZSkpLGY+ZSYmcWIoYSkpfW0ucHVzaChjKX1yZXR1cm4gc2IobSl9ZnVuY3Rpb24geGIoYSxiKXt2YXIgYz1iLmxlbmd0aD4wLGU9YS5sZW5ndGg+MCxmPWZ1bmN0aW9uKGYsZyxoLGksayl7dmFyIGwsbSxvLHA9MCxxPVwiMFwiLHI9ZiYmW10scz1bXSx0PWosdT1mfHxlJiZkLmZpbmQuVEFHKFwiKlwiLGspLHY9dys9bnVsbD09dD8xOk1hdGgucmFuZG9tKCl8fC4xLHg9dS5sZW5ndGg7Zm9yKGsmJihqPWchPT1uJiZnKTtxIT09eCYmbnVsbCE9KGw9dVtxXSk7cSsrKXtpZihlJiZsKXttPTA7d2hpbGUobz1hW20rK10paWYobyhsLGcsaCkpe2kucHVzaChsKTticmVha31rJiYodz12KX1jJiYoKGw9IW8mJmwpJiZwLS0sZiYmci5wdXNoKGwpKX1pZihwKz1xLGMmJnEhPT1wKXttPTA7d2hpbGUobz1iW20rK10pbyhyLHMsZyxoKTtpZihmKXtpZihwPjApd2hpbGUocS0tKXJbcV18fHNbcV18fChzW3FdPUcuY2FsbChpKSk7cz11YihzKX1JLmFwcGx5KGkscyksayYmIWYmJnMubGVuZ3RoPjAmJnArYi5sZW5ndGg+MSYmZmIudW5pcXVlU29ydChpKX1yZXR1cm4gayYmKHc9dixqPXQpLHJ9O3JldHVybiBjP2hiKGYpOmZ9cmV0dXJuIGg9ZmIuY29tcGlsZT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1bXSxmPUFbYStcIiBcIl07aWYoIWYpe2J8fChiPWcoYSkpLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWY9d2IoYltjXSksZlt1XT9kLnB1c2goZik6ZS5wdXNoKGYpO2Y9QShhLHhiKGUsZCkpLGYuc2VsZWN0b3I9YX1yZXR1cm4gZn0saT1mYi5zZWxlY3Q9ZnVuY3Rpb24oYSxiLGUsZil7dmFyIGksaixrLGwsbSxuPVwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEsbz0hZiYmZyhhPW4uc2VsZWN0b3J8fGEpO2lmKGU9ZXx8W10sMT09PW8ubGVuZ3RoKXtpZihqPW9bMF09b1swXS5zbGljZSgwKSxqLmxlbmd0aD4yJiZcIklEXCI9PT0oaz1qWzBdKS50eXBlJiZjLmdldEJ5SWQmJjk9PT1iLm5vZGVUeXBlJiZwJiZkLnJlbGF0aXZlW2pbMV0udHlwZV0pe2lmKGI9KGQuZmluZC5JRChrLm1hdGNoZXNbMF0ucmVwbGFjZShjYixkYiksYil8fFtdKVswXSwhYilyZXR1cm4gZTtuJiYoYj1iLnBhcmVudE5vZGUpLGE9YS5zbGljZShqLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1pPVgubmVlZHNDb250ZXh0LnRlc3QoYSk/MDpqLmxlbmd0aDt3aGlsZShpLS0pe2lmKGs9altpXSxkLnJlbGF0aXZlW2w9ay50eXBlXSlicmVhaztpZigobT1kLmZpbmRbbF0pJiYoZj1tKGsubWF0Y2hlc1swXS5yZXBsYWNlKGNiLGRiKSxhYi50ZXN0KGpbMF0udHlwZSkmJm9iKGIucGFyZW50Tm9kZSl8fGIpKSl7aWYoai5zcGxpY2UoaSwxKSxhPWYubGVuZ3RoJiZxYihqKSwhYSlyZXR1cm4gSS5hcHBseShlLGYpLGU7YnJlYWt9fX1yZXR1cm4obnx8aChhLG8pKShmLGIsIXAsZSxhYi50ZXN0KGEpJiZvYihiLnBhcmVudE5vZGUpfHxiKSxlfSxjLnNvcnRTdGFibGU9dS5zcGxpdChcIlwiKS5zb3J0KEIpLmpvaW4oXCJcIik9PT11LGMuZGV0ZWN0RHVwbGljYXRlcz0hIWwsbSgpLGMuc29ydERldGFjaGVkPWliKGZ1bmN0aW9uKGEpe3JldHVybiAxJmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24obi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKX0pLGliKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fGpiKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYz92b2lkIDA6YS5nZXRBdHRyaWJ1dGUoYixcInR5cGVcIj09PWIudG9Mb3dlckNhc2UoKT8xOjIpfSksYy5hdHRyaWJ1dGVzJiZpYihmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8aW5wdXQvPlwiLGEuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9KXx8amIoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gY3x8XCJpbnB1dFwiIT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP3ZvaWQgMDphLmRlZmF1bHRWYWx1ZX0pLGliKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSl8fGpiKEwsZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBjP3ZvaWQgMDphW2JdPT09ITA/Yi50b0xvd2VyQ2FzZSgpOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmQuc3BlY2lmaWVkP2QudmFsdWU6bnVsbH0pLGZifShhKTtuLmZpbmQ9dCxuLmV4cHI9dC5zZWxlY3RvcnMsbi5leHByW1wiOlwiXT1uLmV4cHIucHNldWRvcyxuLnVuaXF1ZT10LnVuaXF1ZVNvcnQsbi50ZXh0PXQuZ2V0VGV4dCxuLmlzWE1MRG9jPXQuaXNYTUwsbi5jb250YWlucz10LmNvbnRhaW5zO3ZhciB1PW4uZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsdj0vXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8sdz0vXi5bXjojXFxbXFwuLF0qJC87ZnVuY3Rpb24geChhLGIsYyl7aWYobi5pc0Z1bmN0aW9uKGIpKXJldHVybiBuLmdyZXAoYSxmdW5jdGlvbihhLGQpe3JldHVybiEhYi5jYWxsKGEsZCxhKSE9PWN9KTtpZihiLm5vZGVUeXBlKXJldHVybiBuLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09PWIhPT1jfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpe2lmKHcudGVzdChiKSlyZXR1cm4gbi5maWx0ZXIoYixhLGMpO2I9bi5maWx0ZXIoYixhKX1yZXR1cm4gbi5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGcuY2FsbChiLGEpPj0wIT09Y30pfW4uZmlsdGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdO3JldHVybiBjJiYoYT1cIjpub3QoXCIrYStcIilcIiksMT09PWIubGVuZ3RoJiYxPT09ZC5ub2RlVHlwZT9uLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsYSk/W2RdOltdOm4uZmluZC5tYXRjaGVzKGEsbi5ncmVwKGIsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfSkpfSxuLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihhKXt2YXIgYixjPXRoaXMubGVuZ3RoLGQ9W10sZT10aGlzO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybiB0aGlzLnB1c2hTdGFjayhuKGEpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7Yz5iO2IrKylpZihuLmNvbnRhaW5zKGVbYl0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKGI9MDtjPmI7YisrKW4uZmluZChhLGVbYl0sZCk7cmV0dXJuIGQ9dGhpcy5wdXNoU3RhY2soYz4xP24udW5pcXVlKGQpOmQpLGQuc2VsZWN0b3I9dGhpcy5zZWxlY3Rvcj90aGlzLnNlbGVjdG9yK1wiIFwiK2E6YSxkfSxmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHgodGhpcyxhfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHgodGhpcyxhfHxbXSwhMCkpfSxpczpmdW5jdGlvbihhKXtyZXR1cm4hIXgodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgYSYmdS50ZXN0KGEpP24oYSk6YXx8W10sITEpLmxlbmd0aH19KTt2YXIgeSx6PS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLEE9bi5mbi5pbml0PWZ1bmN0aW9uKGEsYil7dmFyIGMsZDtpZighYSlyZXR1cm4gdGhpcztpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7aWYoYz1cIjxcIj09PWFbMF0mJlwiPlwiPT09YVthLmxlbmd0aC0xXSYmYS5sZW5ndGg+PTM/W251bGwsYSxudWxsXTp6LmV4ZWMoYSksIWN8fCFjWzFdJiZiKXJldHVybiFifHxiLmpxdWVyeT8oYnx8eSkuZmluZChhKTp0aGlzLmNvbnN0cnVjdG9yKGIpLmZpbmQoYSk7aWYoY1sxXSl7aWYoYj1iIGluc3RhbmNlb2Ygbj9iWzBdOmIsbi5tZXJnZSh0aGlzLG4ucGFyc2VIVE1MKGNbMV0sYiYmYi5ub2RlVHlwZT9iLm93bmVyRG9jdW1lbnR8fGI6bCwhMCkpLHYudGVzdChjWzFdKSYmbi5pc1BsYWluT2JqZWN0KGIpKWZvcihjIGluIGIpbi5pc0Z1bmN0aW9uKHRoaXNbY10pP3RoaXNbY10oYltjXSk6dGhpcy5hdHRyKGMsYltjXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGQ9bC5nZXRFbGVtZW50QnlJZChjWzJdKSxkJiZkLnBhcmVudE5vZGUmJih0aGlzLmxlbmd0aD0xLHRoaXNbMF09ZCksdGhpcy5jb250ZXh0PWwsdGhpcy5zZWxlY3Rvcj1hLHRoaXN9cmV0dXJuIGEubm9kZVR5cGU/KHRoaXMuY29udGV4dD10aGlzWzBdPWEsdGhpcy5sZW5ndGg9MSx0aGlzKTpuLmlzRnVuY3Rpb24oYSk/XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHkucmVhZHk/eS5yZWFkeShhKTphKG4pOih2b2lkIDAhPT1hLnNlbGVjdG9yJiYodGhpcy5zZWxlY3Rvcj1hLnNlbGVjdG9yLHRoaXMuY29udGV4dD1hLmNvbnRleHQpLG4ubWFrZUFycmF5KGEsdGhpcykpfTtBLnByb3RvdHlwZT1uLmZuLHk9bihsKTt2YXIgQj0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxDPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O24uZXh0ZW5kKHtkaXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVtdLGU9dm9pZCAwIT09Yzt3aGlsZSgoYT1hW2JdKSYmOSE9PWEubm9kZVR5cGUpaWYoMT09PWEubm9kZVR5cGUpe2lmKGUmJm4oYSkuaXMoYykpYnJlYWs7ZC5wdXNoKGEpfXJldHVybiBkfSxzaWJsaW5nOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdO2E7YT1hLm5leHRTaWJsaW5nKTE9PT1hLm5vZGVUeXBlJiZhIT09YiYmYy5wdXNoKGEpO3JldHVybiBjfX0pLG4uZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oYSl7dmFyIGI9bihhLHRoaXMpLGM9Yi5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7Yz5hO2ErKylpZihuLmNvbnRhaW5zKHRoaXMsYlthXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYyxkPTAsZT10aGlzLmxlbmd0aCxmPVtdLGc9dS50ZXN0KGEpfHxcInN0cmluZ1wiIT10eXBlb2YgYT9uKGEsYnx8dGhpcy5jb250ZXh0KTowO2U+ZDtkKyspZm9yKGM9dGhpc1tkXTtjJiZjIT09YjtjPWMucGFyZW50Tm9kZSlpZihjLm5vZGVUeXBlPDExJiYoZz9nLmluZGV4KGMpPi0xOjE9PT1jLm5vZGVUeXBlJiZuLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGMsYSkpKXtmLnB1c2goYyk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoPjE/bi51bmlxdWUoZik6Zil9LGluZGV4OmZ1bmN0aW9uKGEpe3JldHVybiBhP1wic3RyaW5nXCI9PXR5cGVvZiBhP2cuY2FsbChuKGEpLHRoaXNbMF0pOmcuY2FsbCh0aGlzLGEuanF1ZXJ5P2FbMF06YSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobi51bmlxdWUobi5tZXJnZSh0aGlzLmdldCgpLG4oYSxiKSkpKX0sYWRkQmFjazpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09YT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihhKSl9fSk7ZnVuY3Rpb24gRChhLGIpe3doaWxlKChhPWFbYl0pJiYxIT09YS5ub2RlVHlwZSk7cmV0dXJuIGF9bi5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiYxMSE9PWIubm9kZVR5cGU/YjpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBuLmRpcihhLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5kaXIoYSxcInBhcmVudE5vZGVcIixjKX0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gRChhLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oYSl7cmV0dXJuIEQoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihhKXtyZXR1cm4gbi5kaXIoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBuLmRpcihhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLmRpcihhLFwibmV4dFNpYmxpbmdcIixjKX0scHJldlVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5kaXIoYSxcInByZXZpb3VzU2libGluZ1wiLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4gbi5zaWJsaW5nKChhLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGEpfSxjaGlsZHJlbjpmdW5jdGlvbihhKXtyZXR1cm4gbi5zaWJsaW5nKGEuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBhLmNvbnRlbnREb2N1bWVudHx8bi5tZXJnZShbXSxhLmNoaWxkTm9kZXMpfX0sZnVuY3Rpb24oYSxiKXtuLmZuW2FdPWZ1bmN0aW9uKGMsZCl7dmFyIGU9bi5tYXAodGhpcyxiLGMpO3JldHVyblwiVW50aWxcIiE9PWEuc2xpY2UoLTUpJiYoZD1jKSxkJiZcInN0cmluZ1wiPT10eXBlb2YgZCYmKGU9bi5maWx0ZXIoZCxlKSksdGhpcy5sZW5ndGg+MSYmKENbYV18fG4udW5pcXVlKGUpLEIudGVzdChhKSYmZS5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBFPS9cXFMrL2csRj17fTtmdW5jdGlvbiBHKGEpe3ZhciBiPUZbYV09e307cmV0dXJuIG4uZWFjaChhLm1hdGNoKEUpfHxbXSxmdW5jdGlvbihhLGMpe2JbY109ITB9KSxifW4uQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/RlthXXx8RyhhKTpuLmV4dGVuZCh7fSxhKTt2YXIgYixjLGQsZSxmLGcsaD1bXSxpPSFhLm9uY2UmJltdLGo9ZnVuY3Rpb24obCl7Zm9yKGI9YS5tZW1vcnkmJmwsYz0hMCxnPWV8fDAsZT0wLGY9aC5sZW5ndGgsZD0hMDtoJiZmPmc7ZysrKWlmKGhbZ10uYXBwbHkobFswXSxsWzFdKT09PSExJiZhLnN0b3BPbkZhbHNlKXtiPSExO2JyZWFrfWQ9ITEsaCYmKGk/aS5sZW5ndGgmJmooaS5zaGlmdCgpKTpiP2g9W106ay5kaXNhYmxlKCkpfSxrPXthZGQ6ZnVuY3Rpb24oKXtpZihoKXt2YXIgYz1oLmxlbmd0aDshZnVuY3Rpb24gZyhiKXtuLmVhY2goYixmdW5jdGlvbihiLGMpe3ZhciBkPW4udHlwZShjKTtcImZ1bmN0aW9uXCI9PT1kP2EudW5pcXVlJiZrLmhhcyhjKXx8aC5wdXNoKGMpOmMmJmMubGVuZ3RoJiZcInN0cmluZ1wiIT09ZCYmZyhjKX0pfShhcmd1bWVudHMpLGQ/Zj1oLmxlbmd0aDpiJiYoZT1jLGooYikpfXJldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gaCYmbi5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGIpe3ZhciBjO3doaWxlKChjPW4uaW5BcnJheShiLGgsYykpPi0xKWguc3BsaWNlKGMsMSksZCYmKGY+PWMmJmYtLSxnPj1jJiZnLS0pfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP24uaW5BcnJheShhLGgpPi0xOiEoIWh8fCFoLmxlbmd0aCl9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGg9W10sZj0wLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gaD1pPWI9dm9pZCAwLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWh9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gaT12b2lkIDAsYnx8ay5kaXNhYmxlKCksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuIWl9LGZpcmVXaXRoOmZ1bmN0aW9uKGEsYil7cmV0dXJuIWh8fGMmJiFpfHwoYj1ifHxbXSxiPVthLGIuc2xpY2U/Yi5zbGljZSgpOmJdLGQ/aS5wdXNoKGIpOmooYikpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gay5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWN9fTtyZXR1cm4ga30sbi5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGEpe3ZhciBiPVtbXCJyZXNvbHZlXCIsXCJkb25lXCIsbi5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLG4uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXCJyZWplY3RlZFwiXSxbXCJub3RpZnlcIixcInByb2dyZXNzXCIsbi5DYWxsYmFja3MoXCJtZW1vcnlcIildXSxjPVwicGVuZGluZ1wiLGQ9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBlLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sdGhlbjpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gbi5EZWZlcnJlZChmdW5jdGlvbihjKXtuLmVhY2goYixmdW5jdGlvbihiLGYpe3ZhciBnPW4uaXNGdW5jdGlvbihhW2JdKSYmYVtiXTtlW2ZbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZyYmZy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmbi5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkuZG9uZShjLnJlc29sdmUpLmZhaWwoYy5yZWplY3QpLnByb2dyZXNzKGMubm90aWZ5KTpjW2ZbMF0rXCJXaXRoXCJdKHRoaXM9PT1kP2MucHJvbWlzZSgpOnRoaXMsZz9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hP24uZXh0ZW5kKGEsZCk6ZH19LGU9e307cmV0dXJuIGQucGlwZT1kLnRoZW4sbi5lYWNoKGIsZnVuY3Rpb24oYSxmKXt2YXIgZz1mWzJdLGg9ZlszXTtkW2ZbMV1dPWcuYWRkLGgmJmcuYWRkKGZ1bmN0aW9uKCl7Yz1ofSxiWzFeYV1bMl0uZGlzYWJsZSxiWzJdWzJdLmxvY2spLGVbZlswXV09ZnVuY3Rpb24oKXtyZXR1cm4gZVtmWzBdK1wiV2l0aFwiXSh0aGlzPT09ZT9kOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxlW2ZbMF0rXCJXaXRoXCJdPWcuZmlyZVdpdGh9KSxkLnByb21pc2UoZSksYSYmYS5jYWxsKGUsZSksZX0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj0wLGM9ZC5jYWxsKGFyZ3VtZW50cyksZT1jLmxlbmd0aCxmPTEhPT1lfHxhJiZuLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9lOjAsZz0xPT09Zj9hOm4uRGVmZXJyZWQoKSxoPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZSl7YlthXT10aGlzLGNbYV09YXJndW1lbnRzLmxlbmd0aD4xP2QuY2FsbChhcmd1bWVudHMpOmUsYz09PWk/Zy5ub3RpZnlXaXRoKGIsYyk6LS1mfHxnLnJlc29sdmVXaXRoKGIsYyl9fSxpLGosaztpZihlPjEpZm9yKGk9bmV3IEFycmF5KGUpLGo9bmV3IEFycmF5KGUpLGs9bmV3IEFycmF5KGUpO2U+YjtiKyspY1tiXSYmbi5pc0Z1bmN0aW9uKGNbYl0ucHJvbWlzZSk/Y1tiXS5wcm9taXNlKCkuZG9uZShoKGIsayxjKSkuZmFpbChnLnJlamVjdCkucHJvZ3Jlc3MoaChiLGosaSkpOi0tZjtyZXR1cm4gZnx8Zy5yZXNvbHZlV2l0aChrLGMpLGcucHJvbWlzZSgpfX0pO3ZhciBIO24uZm4ucmVhZHk9ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucmVhZHkucHJvbWlzZSgpLmRvbmUoYSksdGhpc30sbi5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGEpe2E/bi5yZWFkeVdhaXQrKzpuLnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oYSl7KGE9PT0hMD8tLW4ucmVhZHlXYWl0Om4uaXNSZWFkeSl8fChuLmlzUmVhZHk9ITAsYSE9PSEwJiYtLW4ucmVhZHlXYWl0PjB8fChILnJlc29sdmVXaXRoKGwsW25dKSxuLmZuLnRyaWdnZXJIYW5kbGVyJiYobihsKS50cmlnZ2VySGFuZGxlcihcInJlYWR5XCIpLG4obCkub2ZmKFwicmVhZHlcIikpKSl9fSk7ZnVuY3Rpb24gSSgpe2wucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixJLCExKSxhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsSSwhMSksbi5yZWFkeSgpfW4ucmVhZHkucHJvbWlzZT1mdW5jdGlvbihiKXtyZXR1cm4gSHx8KEg9bi5EZWZlcnJlZCgpLFwiY29tcGxldGVcIj09PWwucmVhZHlTdGF0ZT9zZXRUaW1lb3V0KG4ucmVhZHkpOihsLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsSSwhMSksYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLEksITEpKSksSC5wcm9taXNlKGIpfSxuLnJlYWR5LnByb21pc2UoKTt2YXIgSj1uLmFjY2Vzcz1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD0wLGk9YS5sZW5ndGgsaj1udWxsPT1jO2lmKFwib2JqZWN0XCI9PT1uLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYyluLmFjY2VzcyhhLGIsaCxjW2hdLCEwLGYsZyl9ZWxzZSBpZih2b2lkIDAhPT1kJiYoZT0hMCxuLmlzRnVuY3Rpb24oZCl8fChnPSEwKSxqJiYoZz8oYi5jYWxsKGEsZCksYj1udWxsKTooaj1iLGI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqLmNhbGwobihhKSxjKX0pKSxiKSlmb3IoO2k+aDtoKyspYihhW2hdLGMsZz9kOmQuY2FsbChhW2hdLGgsYihhW2hdLGMpKSk7cmV0dXJuIGU/YTpqP2IuY2FsbChhKTppP2IoYVswXSxjKTpmfTtuLmFjY2VwdERhdGE9ZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfHw5PT09YS5ub2RlVHlwZXx8ISthLm5vZGVUeXBlfTtmdW5jdGlvbiBLKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuY2FjaGU9e30sMCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJue319fSksdGhpcy5leHBhbmRvPW4uZXhwYW5kbytNYXRoLnJhbmRvbSgpfUsudWlkPTEsSy5hY2NlcHRzPW4uYWNjZXB0RGF0YSxLLnByb3RvdHlwZT17a2V5OmZ1bmN0aW9uKGEpe2lmKCFLLmFjY2VwdHMoYSkpcmV0dXJuIDA7dmFyIGI9e30sYz1hW3RoaXMuZXhwYW5kb107aWYoIWMpe2M9Sy51aWQrKzt0cnl7Ylt0aGlzLmV4cGFuZG9dPXt2YWx1ZTpjfSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhLGIpfWNhdGNoKGQpe2JbdGhpcy5leHBhbmRvXT1jLG4uZXh0ZW5kKGEsYil9fXJldHVybiB0aGlzLmNhY2hlW2NdfHwodGhpcy5jYWNoZVtjXT17fSksY30sc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPXRoaXMua2V5KGEpLGY9dGhpcy5jYWNoZVtlXTtpZihcInN0cmluZ1wiPT10eXBlb2YgYilmW2JdPWM7ZWxzZSBpZihuLmlzRW1wdHlPYmplY3QoZikpbi5leHRlbmQodGhpcy5jYWNoZVtlXSxiKTtlbHNlIGZvcihkIGluIGIpZltkXT1iW2RdO3JldHVybiBmfSxnZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNhY2hlW3RoaXMua2V5KGEpXTtyZXR1cm4gdm9pZCAwPT09Yj9jOmNbYl19LGFjY2VzczpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIHZvaWQgMD09PWJ8fGImJlwic3RyaW5nXCI9PXR5cGVvZiBiJiZ2b2lkIDA9PT1jPyhkPXRoaXMuZ2V0KGEsYiksdm9pZCAwIT09ZD9kOnRoaXMuZ2V0KGEsbi5jYW1lbENhc2UoYikpKToodGhpcy5zZXQoYSxiLGMpLHZvaWQgMCE9PWM/YzpiKX0scmVtb3ZlOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9dGhpcy5rZXkoYSksZz10aGlzLmNhY2hlW2ZdO2lmKHZvaWQgMD09PWIpdGhpcy5jYWNoZVtmXT17fTtlbHNle24uaXNBcnJheShiKT9kPWIuY29uY2F0KGIubWFwKG4uY2FtZWxDYXNlKSk6KGU9bi5jYW1lbENhc2UoYiksYiBpbiBnP2Q9W2IsZV06KGQ9ZSxkPWQgaW4gZz9bZF06ZC5tYXRjaChFKXx8W10pKSxjPWQubGVuZ3RoO3doaWxlKGMtLSlkZWxldGUgZ1tkW2NdXX19LGhhc0RhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIW4uaXNFbXB0eU9iamVjdCh0aGlzLmNhY2hlW2FbdGhpcy5leHBhbmRvXV18fHt9KX0sZGlzY2FyZDpmdW5jdGlvbihhKXthW3RoaXMuZXhwYW5kb10mJmRlbGV0ZSB0aGlzLmNhY2hlW2FbdGhpcy5leHBhbmRvXV19fTt2YXIgTD1uZXcgSyxNPW5ldyBLLE49L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLE89LyhbQS1aXSkvZztmdW5jdGlvbiBQKGEsYixjKXt2YXIgZDtpZih2b2lkIDA9PT1jJiYxPT09YS5ub2RlVHlwZSlpZihkPVwiZGF0YS1cIitiLnJlcGxhY2UoTyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpLGM9YS5nZXRBdHRyaWJ1dGUoZCksXCJzdHJpbmdcIj09dHlwZW9mIGMpe3RyeXtjPVwidHJ1ZVwiPT09Yz8hMDpcImZhbHNlXCI9PT1jPyExOlwibnVsbFwiPT09Yz9udWxsOitjK1wiXCI9PT1jPytjOk4udGVzdChjKT9uLnBhcnNlSlNPTihjKTpjfWNhdGNoKGUpe31NLnNldChhLGIsYyl9ZWxzZSBjPXZvaWQgMDtyZXR1cm4gY31uLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gTS5oYXNEYXRhKGEpfHxMLmhhc0RhdGEoYSl9LGRhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBNLmFjY2VzcyhhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtNLnJlbW92ZShhLGIpXHJcbn0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBMLmFjY2VzcyhhLGIsYyl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7TC5yZW1vdmUoYSxiKX19KSxuLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPXRoaXNbMF0sZz1mJiZmLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09YSl7aWYodGhpcy5sZW5ndGgmJihlPU0uZ2V0KGYpLDE9PT1mLm5vZGVUeXBlJiYhTC5nZXQoZixcImhhc0RhdGFBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPW4uY2FtZWxDYXNlKGQuc2xpY2UoNSkpLFAoZixkLGVbZF0pKSk7TC5zZXQoZixcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gZX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtNLnNldCh0aGlzLGEpfSk6Sih0aGlzLGZ1bmN0aW9uKGIpe3ZhciBjLGQ9bi5jYW1lbENhc2UoYSk7aWYoZiYmdm9pZCAwPT09Yil7aWYoYz1NLmdldChmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1NLmdldChmLGQpLHZvaWQgMCE9PWMpcmV0dXJuIGM7aWYoYz1QKGYsZCx2b2lkIDApLHZvaWQgMCE9PWMpcmV0dXJuIGN9ZWxzZSB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1NLmdldCh0aGlzLGQpO00uc2V0KHRoaXMsZCxiKSwtMSE9PWEuaW5kZXhPZihcIi1cIikmJnZvaWQgMCE9PWMmJk0uc2V0KHRoaXMsYSxiKX0pfSxudWxsLGIsYXJndW1lbnRzLmxlbmd0aD4xLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtNLnJlbW92ZSh0aGlzLGEpfSl9fSksbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYT8oYj0oYnx8XCJmeFwiKStcInF1ZXVlXCIsZD1MLmdldChhLGIpLGMmJighZHx8bi5pc0FycmF5KGMpP2Q9TC5hY2Nlc3MoYSxiLG4ubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdKTp2b2lkIDB9LGRlcXVldWU6ZnVuY3Rpb24oYSxiKXtiPWJ8fFwiZnhcIjt2YXIgYz1uLnF1ZXVlKGEsYiksZD1jLmxlbmd0aCxlPWMuc2hpZnQoKSxmPW4uX3F1ZXVlSG9va3MoYSxiKSxnPWZ1bmN0aW9uKCl7bi5kZXF1ZXVlKGEsYil9O1wiaW5wcm9ncmVzc1wiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKFwiZnhcIj09PWImJmMudW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIGYuc3RvcCxlLmNhbGwoYSxnLGYpKSwhZCYmZiYmZi5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YitcInF1ZXVlSG9va3NcIjtyZXR1cm4gTC5nZXQoYSxjKXx8TC5hY2Nlc3MoYSxjLHtlbXB0eTpuLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpe0wucmVtb3ZlKGEsW2IrXCJxdWV1ZVwiLGNdKX0pfSl9fSksbi5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPVwiZnhcIixjLS0pLGFyZ3VtZW50cy5sZW5ndGg8Yz9uLnF1ZXVlKHRoaXNbMF0sYSk6dm9pZCAwPT09Yj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPW4ucXVldWUodGhpcyxhLGIpO24uX3F1ZXVlSG9va3ModGhpcyxhKSxcImZ4XCI9PT1hJiZcImlucHJvZ3Jlc3NcIiE9PWNbMF0mJm4uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MSxlPW4uRGVmZXJyZWQoKSxmPXRoaXMsZz10aGlzLmxlbmd0aCxoPWZ1bmN0aW9uKCl7LS1kfHxlLnJlc29sdmVXaXRoKGYsW2ZdKX07XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGE9YXx8XCJmeFwiO3doaWxlKGctLSljPUwuZ2V0KGZbZ10sYStcInF1ZXVlSG9va3NcIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSk7dmFyIFE9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLFI9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLFM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLFwibm9uZVwiPT09bi5jc3MoYSxcImRpc3BsYXlcIil8fCFuLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKX0sVD0vXig/OmNoZWNrYm94fHJhZGlvKSQvaTshZnVuY3Rpb24oKXt2YXIgYT1sLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxiPWEuYXBwZW5kQ2hpbGQobC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxjPWwuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Muc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksYy5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGMuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwidFwiKSxiLmFwcGVuZENoaWxkKGMpLGsuY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxiLmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixrLm5vQ2xvbmVDaGVja2VkPSEhYi5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWV9KCk7dmFyIFU9XCJ1bmRlZmluZWRcIjtrLmZvY3VzaW5CdWJibGVzPVwib25mb2N1c2luXCJpbiBhO3ZhciBWPS9ea2V5LyxXPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFg9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFk9L14oW14uXSopKD86XFwuKC4rKXwpJC87ZnVuY3Rpb24gWigpe3JldHVybiEwfWZ1bmN0aW9uICQoKXtyZXR1cm4hMX1mdW5jdGlvbiBfKCl7dHJ5e3JldHVybiBsLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goYSl7fX1uLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxvLHAscSxyPUwuZ2V0KGEpO2lmKHIpe2MuaGFuZGxlciYmKGY9YyxjPWYuaGFuZGxlcixlPWYuc2VsZWN0b3IpLGMuZ3VpZHx8KGMuZ3VpZD1uLmd1aWQrKyksKGk9ci5ldmVudHMpfHwoaT1yLmV2ZW50cz17fSksKGc9ci5oYW5kbGUpfHwoZz1yLmhhbmRsZT1mdW5jdGlvbihiKXtyZXR1cm4gdHlwZW9mIG4hPT1VJiZuLmV2ZW50LnRyaWdnZXJlZCE9PWIudHlwZT9uLmV2ZW50LmRpc3BhdGNoLmFwcGx5KGEsYXJndW1lbnRzKTp2b2lkIDB9KSxiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWg9WS5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8mJihsPW4uZXZlbnQuc3BlY2lhbFtvXXx8e30sbz0oZT9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8byxsPW4uZXZlbnQuc3BlY2lhbFtvXXx8e30saz1uLmV4dGVuZCh7dHlwZTpvLG9yaWdUeXBlOnEsZGF0YTpkLGhhbmRsZXI6YyxndWlkOmMuZ3VpZCxzZWxlY3RvcjplLG5lZWRzQ29udGV4dDplJiZuLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoZSksbmFtZXNwYWNlOnAuam9pbihcIi5cIil9LGYpLChtPWlbb10pfHwobT1pW29dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGwuc2V0dXAmJmwuc2V0dXAuY2FsbChhLGQscCxnKSE9PSExfHxhLmFkZEV2ZW50TGlzdGVuZXImJmEuYWRkRXZlbnRMaXN0ZW5lcihvLGcsITEpKSxsLmFkZCYmKGwuYWRkLmNhbGwoYSxrKSxrLmhhbmRsZXIuZ3VpZHx8KGsuaGFuZGxlci5ndWlkPWMuZ3VpZCkpLGU/bS5zcGxpY2UobS5kZWxlZ2F0ZUNvdW50KyssMCxrKTptLnB1c2goayksbi5ldmVudC5nbG9iYWxbb109ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxvLHAscSxyPUwuaGFzRGF0YShhKSYmTC5nZXQoYSk7aWYociYmKGk9ci5ldmVudHMpKXtiPShifHxcIlwiKS5tYXRjaChFKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9WS5leGVjKGJbal0pfHxbXSxvPXE9aFsxXSxwPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG8pe2w9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG09aVtvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksZz1mPW0ubGVuZ3RoO3doaWxlKGYtLSlrPW1bZl0sIWUmJnEhPT1rLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1rLmd1aWR8fGgmJiFoLnRlc3Qoay5uYW1lc3BhY2UpfHxkJiZkIT09ay5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFrLnNlbGVjdG9yKXx8KG0uc3BsaWNlKGYsMSksay5zZWxlY3RvciYmbS5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxrKSk7ZyYmIW0ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEscCxyLmhhbmRsZSkhPT0hMXx8bi5yZW1vdmVFdmVudChhLG8sci5oYW5kbGUpLGRlbGV0ZSBpW29dKX1lbHNlIGZvcihvIGluIGkpbi5ldmVudC5yZW1vdmUoYSxvK2Jbal0sYyxkLCEwKTtuLmlzRW1wdHlPYmplY3QoaSkmJihkZWxldGUgci5oYW5kbGUsTC5yZW1vdmUoYSxcImV2ZW50c1wiKSl9fSx0cmlnZ2VyOmZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmLGcsaCxpLGssbSxvLHA9W2R8fGxdLHE9ai5jYWxsKGIsXCJ0eXBlXCIpP2IudHlwZTpiLHI9ai5jYWxsKGIsXCJuYW1lc3BhY2VcIik/Yi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKGc9aD1kPWR8fGwsMyE9PWQubm9kZVR5cGUmJjghPT1kLm5vZGVUeXBlJiYhWC50ZXN0KHErbi5ldmVudC50cmlnZ2VyZWQpJiYocS5pbmRleE9mKFwiLlwiKT49MCYmKHI9cS5zcGxpdChcIi5cIikscT1yLnNoaWZ0KCksci5zb3J0KCkpLGs9cS5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrcSxiPWJbbi5leHBhbmRvXT9iOm5ldyBuLkV2ZW50KHEsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGIuaXNUcmlnZ2VyPWU/MjozLGIubmFtZXNwYWNlPXIuam9pbihcIi5cIiksYi5uYW1lc3BhY2VfcmU9Yi5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Iuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZCksYz1udWxsPT1jP1tiXTpuLm1ha2VBcnJheShjLFtiXSksbz1uLmV2ZW50LnNwZWNpYWxbcV18fHt9LGV8fCFvLnRyaWdnZXJ8fG8udHJpZ2dlci5hcHBseShkLGMpIT09ITEpKXtpZighZSYmIW8ubm9CdWJibGUmJiFuLmlzV2luZG93KGQpKXtmb3IoaT1vLmRlbGVnYXRlVHlwZXx8cSxYLnRlc3QoaStxKXx8KGc9Zy5wYXJlbnROb2RlKTtnO2c9Zy5wYXJlbnROb2RlKXAucHVzaChnKSxoPWc7aD09PShkLm93bmVyRG9jdW1lbnR8fGwpJiZwLnB1c2goaC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3d8fGEpfWY9MDt3aGlsZSgoZz1wW2YrK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1mPjE/aTpvLmJpbmRUeXBlfHxxLG09KEwuZ2V0KGcsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdJiZMLmdldChnLFwiaGFuZGxlXCIpLG0mJm0uYXBwbHkoZyxjKSxtPWsmJmdba10sbSYmbS5hcHBseSYmbi5hY2NlcHREYXRhKGcpJiYoYi5yZXN1bHQ9bS5hcHBseShnLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7cmV0dXJuIGIudHlwZT1xLGV8fGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fG8uX2RlZmF1bHQmJm8uX2RlZmF1bHQuYXBwbHkocC5wb3AoKSxjKSE9PSExfHwhbi5hY2NlcHREYXRhKGQpfHxrJiZuLmlzRnVuY3Rpb24oZFtxXSkmJiFuLmlzV2luZG93KGQpJiYoaD1kW2tdLGgmJihkW2tdPW51bGwpLG4uZXZlbnQudHJpZ2dlcmVkPXEsZFtxXSgpLG4uZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxoJiYoZFtrXT1oKSksYi5yZXN1bHR9fSxkaXNwYXRjaDpmdW5jdGlvbihhKXthPW4uZXZlbnQuZml4KGEpO3ZhciBiLGMsZSxmLGcsaD1bXSxpPWQuY2FsbChhcmd1bWVudHMpLGo9KEwuZ2V0KHRoaXMsXCJldmVudHNcIil8fHt9KVthLnR5cGVdfHxbXSxrPW4uZXZlbnQuc3BlY2lhbFthLnR5cGVdfHx7fTtpZihpWzBdPWEsYS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFrLnByZURpc3BhdGNofHxrLnByZURpc3BhdGNoLmNhbGwodGhpcyxhKSE9PSExKXtoPW4uZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGEsaiksYj0wO3doaWxlKChmPWhbYisrXSkmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2EuY3VycmVudFRhcmdldD1mLmVsZW0sYz0wO3doaWxlKChnPWYuaGFuZGxlcnNbYysrXSkmJiFhLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpKCFhLm5hbWVzcGFjZV9yZXx8YS5uYW1lc3BhY2VfcmUudGVzdChnLm5hbWVzcGFjZSkpJiYoYS5oYW5kbGVPYmo9ZyxhLmRhdGE9Zy5kYXRhLGU9KChuLmV2ZW50LnNwZWNpYWxbZy5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGcuaGFuZGxlcikuYXBwbHkoZi5lbGVtLGkpLHZvaWQgMCE9PWUmJihhLnJlc3VsdD1lKT09PSExJiYoYS5wcmV2ZW50RGVmYXVsdCgpLGEuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gay5wb3N0RGlzcGF0Y2gmJmsucG9zdERpc3BhdGNoLmNhbGwodGhpcyxhKSxhLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZz1bXSxoPWIuZGVsZWdhdGVDb3VudCxpPWEudGFyZ2V0O2lmKGgmJmkubm9kZVR5cGUmJighYS5idXR0b258fFwiY2xpY2tcIiE9PWEudHlwZSkpZm9yKDtpIT09dGhpcztpPWkucGFyZW50Tm9kZXx8dGhpcylpZihpLmRpc2FibGVkIT09ITB8fFwiY2xpY2tcIiE9PWEudHlwZSl7Zm9yKGQ9W10sYz0wO2g+YztjKyspZj1iW2NdLGU9Zi5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1kW2VdJiYoZFtlXT1mLm5lZWRzQ29udGV4dD9uKGUsdGhpcykuaW5kZXgoaSk+PTA6bi5maW5kKGUsdGhpcyxudWxsLFtpXSkubGVuZ3RoKSxkW2VdJiZkLnB1c2goZik7ZC5sZW5ndGgmJmcucHVzaCh7ZWxlbTppLGhhbmRsZXJzOmR9KX1yZXR1cm4gaDxiLmxlbmd0aCYmZy5wdXNoKHtlbGVtOnRoaXMsaGFuZGxlcnM6Yi5zbGljZShoKX0pLGd9LHByb3BzOlwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLGZpeEhvb2tzOnt9LGtleUhvb2tzOntwcm9wczpcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGw9PWEud2hpY2gmJihhLndoaWNoPW51bGwhPWIuY2hhckNvZGU/Yi5jaGFyQ29kZTpiLmtleUNvZGUpLGF9fSxtb3VzZUhvb2tzOntwcm9wczpcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxmaWx0ZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj1iLmJ1dHRvbjtyZXR1cm4gbnVsbD09YS5wYWdlWCYmbnVsbCE9Yi5jbGllbnRYJiYoYz1hLnRhcmdldC5vd25lckRvY3VtZW50fHxsLGQ9Yy5kb2N1bWVudEVsZW1lbnQsZT1jLmJvZHksYS5wYWdlWD1iLmNsaWVudFgrKGQmJmQuc2Nyb2xsTGVmdHx8ZSYmZS5zY3JvbGxMZWZ0fHwwKS0oZCYmZC5jbGllbnRMZWZ0fHxlJiZlLmNsaWVudExlZnR8fDApLGEucGFnZVk9Yi5jbGllbnRZKyhkJiZkLnNjcm9sbFRvcHx8ZSYmZS5zY3JvbGxUb3B8fDApLShkJiZkLmNsaWVudFRvcHx8ZSYmZS5jbGllbnRUb3B8fDApKSxhLndoaWNofHx2b2lkIDA9PT1mfHwoYS53aGljaD0xJmY/MToyJmY/Mzo0JmY/MjowKSxhfX0sZml4OmZ1bmN0aW9uKGEpe2lmKGFbbi5leHBhbmRvXSlyZXR1cm4gYTt2YXIgYixjLGQsZT1hLnR5cGUsZj1hLGc9dGhpcy5maXhIb29rc1tlXTtnfHwodGhpcy5maXhIb29rc1tlXT1nPVcudGVzdChlKT90aGlzLm1vdXNlSG9va3M6Vi50ZXN0KGUpP3RoaXMua2V5SG9va3M6e30pLGQ9Zy5wcm9wcz90aGlzLnByb3BzLmNvbmNhdChnLnByb3BzKTp0aGlzLnByb3BzLGE9bmV3IG4uRXZlbnQoZiksYj1kLmxlbmd0aDt3aGlsZShiLS0pYz1kW2JdLGFbY109ZltjXTtyZXR1cm4gYS50YXJnZXR8fChhLnRhcmdldD1sKSwzPT09YS50YXJnZXQubm9kZVR5cGUmJihhLnRhcmdldD1hLnRhcmdldC5wYXJlbnROb2RlKSxnLmZpbHRlcj9nLmZpbHRlcihhLGYpOmF9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxmb2N1czp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzIT09XygpJiZ0aGlzLmZvY3VzPyh0aGlzLmZvY3VzKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNpblwifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM9PT1fKCkmJnRoaXMuYmx1cj8odGhpcy5ibHVyKCksITEpOnZvaWQgMH0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm5cImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJm4ubm9kZU5hbWUodGhpcyxcImlucHV0XCIpPyh0aGlzLmNsaWNrKCksITEpOnZvaWQgMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ubm9kZU5hbWUoYS50YXJnZXQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dm9pZCAwIT09YS5yZXN1bHQmJmEub3JpZ2luYWxFdmVudCYmKGEub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1hLnJlc3VsdCl9fX0sc2ltdWxhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bi5leHRlbmQobmV3IG4uRXZlbnQsYyx7dHlwZTphLGlzU2ltdWxhdGVkOiEwLG9yaWdpbmFsRXZlbnQ6e319KTtkP24uZXZlbnQudHJpZ2dlcihlLG51bGwsYik6bi5ldmVudC5kaXNwYXRjaC5jYWxsKGIsZSksZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmYy5wcmV2ZW50RGVmYXVsdCgpfX0sbi5yZW1vdmVFdmVudD1mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLCExKX0sbi5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygbi5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/WjokKTp0aGlzLnR5cGU9YSxiJiZuLmV4dGVuZCh0aGlzLGIpLHRoaXMudGltZVN0YW1wPWEmJmEudGltZVN0YW1wfHxuLm5vdygpLHZvaWQodGhpc1tuLmV4cGFuZG9dPSEwKSk6bmV3IG4uRXZlbnQoYSxiKX0sbi5FdmVudC5wcm90b3R5cGU9e2lzRGVmYXVsdFByZXZlbnRlZDokLGlzUHJvcGFnYXRpb25TdG9wcGVkOiQsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6JCxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1aLGEmJmEucHJldmVudERlZmF1bHQmJmEucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9WixhJiZhLnN0b3BQcm9wYWdhdGlvbiYmYS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9WixhJiZhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiYmYS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sbi5lYWNoKHttb3VzZWVudGVyOlwibW91c2VvdmVyXCIsbW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIscG9pbnRlcmVudGVyOlwicG9pbnRlcm92ZXJcIixwb2ludGVybGVhdmU6XCJwb2ludGVyb3V0XCJ9LGZ1bmN0aW9uKGEsYil7bi5ldmVudC5zcGVjaWFsW2FdPXtkZWxlZ2F0ZVR5cGU6YixiaW5kVHlwZTpiLGhhbmRsZTpmdW5jdGlvbihhKXt2YXIgYyxkPXRoaXMsZT1hLnJlbGF0ZWRUYXJnZXQsZj1hLmhhbmRsZU9iajtyZXR1cm4oIWV8fGUhPT1kJiYhbi5jb250YWlucyhkLGUpKSYmKGEudHlwZT1mLm9yaWdUeXBlLGM9Zi5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhLnR5cGU9YiksY319fSksay5mb2N1c2luQnViYmxlc3x8bi5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihhKXtuLmV2ZW50LnNpbXVsYXRlKGIsYS50YXJnZXQsbi5ldmVudC5maXgoYSksITApfTtuLmV2ZW50LnNwZWNpYWxbYl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9TC5hY2Nlc3MoZCxiKTtlfHxkLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKSxMLmFjY2VzcyhkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPUwuYWNjZXNzKGQsYiktMTtlP0wuYWNjZXNzKGQsYixlKTooZC5yZW1vdmVFdmVudExpc3RlbmVyKGEsYywhMCksTC5yZW1vdmUoZCxiKSl9fX0pLG4uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGc7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1jfHxiLGI9dm9pZCAwKTtmb3IoZyBpbiBhKXRoaXMub24oZyxiLGMsYVtnXSxlKTtyZXR1cm4gdGhpc31pZihudWxsPT1jJiZudWxsPT1kPyhkPWIsYz1iPXZvaWQgMCk6bnVsbD09ZCYmKFwic3RyaW5nXCI9PXR5cGVvZiBiPyhkPWMsYz12b2lkIDApOihkPWMsYz1iLGI9dm9pZCAwKSksZD09PSExKWQ9JDtlbHNlIGlmKCFkKXJldHVybiB0aGlzO3JldHVybiAxPT09ZSYmKGY9ZCxkPWZ1bmN0aW9uKGEpe3JldHVybiBuKCkub2ZmKGEpLGYuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxkLmd1aWQ9Zi5ndWlkfHwoZi5ndWlkPW4uZ3VpZCsrKSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5ldmVudC5hZGQodGhpcyxhLGQsYyxiKX0pfSxvbmU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYSxiLGMsZCwxKX0sb2ZmOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2lmKGEmJmEucHJldmVudERlZmF1bHQmJmEuaGFuZGxlT2JqKXJldHVybiBkPWEuaGFuZGxlT2JqLG4oYS5kZWxlZ2F0ZVRhcmdldCkub2ZmKGQubmFtZXNwYWNlP2Qub3JpZ1R5cGUrXCIuXCIrZC5uYW1lc3BhY2U6ZC5vcmlnVHlwZSxkLnNlbGVjdG9yLGQuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuKGI9PT0hMXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYikmJihjPWIsYj12b2lkIDApLGM9PT0hMSYmKGM9JCksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5ldmVudC5yZW1vdmUodGhpcyxhLGMsYil9KX0sdHJpZ2dlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtuLmV2ZW50LnRyaWdnZXIoYSxiLHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpc1swXTtyZXR1cm4gYz9uLmV2ZW50LnRyaWdnZXIoYSxiLGMsITApOnZvaWQgMH19KTt2YXIgYWI9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLGJiPS88KFtcXHc6XSspLyxjYj0vPHwmIz9cXHcrOy8sZGI9LzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxlYj0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLGZiPS9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksZ2I9L150cnVlXFwvKC4qKS8saGI9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nLGliPXtvcHRpb246WzEsXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsXCI8L3NlbGVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07aWIub3B0Z3JvdXA9aWIub3B0aW9uLGliLnRib2R5PWliLnRmb290PWliLmNvbGdyb3VwPWliLmNhcHRpb249aWIudGhlYWQsaWIudGg9aWIudGQ7ZnVuY3Rpb24gamIoYSxiKXtyZXR1cm4gbi5ub2RlTmFtZShhLFwidGFibGVcIikmJm4ubm9kZU5hbWUoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxhLmFwcGVuZENoaWxkKGEub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikpOmF9ZnVuY3Rpb24ga2IoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrYS50eXBlLGF9ZnVuY3Rpb24gbGIoYSl7dmFyIGI9Z2IuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxhfWZ1bmN0aW9uIG1iKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtkPmM7YysrKUwuc2V0KGFbY10sXCJnbG9iYWxFdmFsXCIsIWJ8fEwuZ2V0KGJbY10sXCJnbG9iYWxFdmFsXCIpKX1mdW5jdGlvbiBuYihhLGIpe3ZhciBjLGQsZSxmLGcsaCxpLGo7aWYoMT09PWIubm9kZVR5cGUpe2lmKEwuaGFzRGF0YShhKSYmKGY9TC5hY2Nlc3MoYSksZz1MLnNldChiLGYpLGo9Zi5ldmVudHMpKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGUgaW4gailmb3IoYz0wLGQ9altlXS5sZW5ndGg7ZD5jO2MrKyluLmV2ZW50LmFkZChiLGUsaltlXVtjXSl9TS5oYXNEYXRhKGEpJiYoaD1NLmFjY2VzcyhhKSxpPW4uZXh0ZW5kKHt9LGgpLE0uc2V0KGIsaSkpfX1mdW5jdGlvbiBvYihhLGIpe3ZhciBjPWEuZ2V0RWxlbWVudHNCeVRhZ05hbWU/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShifHxcIipcIik6YS5xdWVyeVNlbGVjdG9yQWxsP2EucXVlcnlTZWxlY3RvckFsbChifHxcIipcIik6W107cmV0dXJuIHZvaWQgMD09PWJ8fGImJm4ubm9kZU5hbWUoYSxiKT9uLm1lcmdlKFthXSxjKTpjfWZ1bmN0aW9uIHBiKGEsYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wiaW5wdXRcIj09PWMmJlQudGVzdChhLnR5cGUpP2IuY2hlY2tlZD1hLmNoZWNrZWQ6KFwiaW5wdXRcIj09PWN8fFwidGV4dGFyZWFcIj09PWMpJiYoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfW4uZXh0ZW5kKHtjbG9uZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNsb25lTm9kZSghMCksaT1uLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZighKGsubm9DbG9uZUNoZWNrZWR8fDEhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGV8fG4uaXNYTUxEb2MoYSkpKWZvcihnPW9iKGgpLGY9b2IoYSksZD0wLGU9Zi5sZW5ndGg7ZT5kO2QrKylwYihmW2RdLGdbZF0pO2lmKGIpaWYoYylmb3IoZj1mfHxvYihhKSxnPWd8fG9iKGgpLGQ9MCxlPWYubGVuZ3RoO2U+ZDtkKyspbmIoZltkXSxnW2RdKTtlbHNlIG5iKGEsaCk7cmV0dXJuIGc9b2IoaCxcInNjcmlwdFwiKSxnLmxlbmd0aD4wJiZtYihnLCFpJiZvYihhLFwic2NyaXB0XCIpKSxofSxidWlsZEZyYWdtZW50OmZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZSxmLGcsaCxpLGosaz1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxsPVtdLG09MCxvPWEubGVuZ3RoO28+bTttKyspaWYoZT1hW21dLGV8fDA9PT1lKWlmKFwib2JqZWN0XCI9PT1uLnR5cGUoZSkpbi5tZXJnZShsLGUubm9kZVR5cGU/W2VdOmUpO2Vsc2UgaWYoY2IudGVzdChlKSl7Zj1mfHxrLmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksZz0oYmIuZXhlYyhlKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksaD1pYltnXXx8aWIuX2RlZmF1bHQsZi5pbm5lckhUTUw9aFsxXStlLnJlcGxhY2UoYWIsXCI8JDE+PC8kMj5cIikraFsyXSxqPWhbMF07d2hpbGUoai0tKWY9Zi5sYXN0Q2hpbGQ7bi5tZXJnZShsLGYuY2hpbGROb2RlcyksZj1rLmZpcnN0Q2hpbGQsZi50ZXh0Q29udGVudD1cIlwifWVsc2UgbC5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoZSkpO2sudGV4dENvbnRlbnQ9XCJcIixtPTA7d2hpbGUoZT1sW20rK10paWYoKCFkfHwtMT09PW4uaW5BcnJheShlLGQpKSYmKGk9bi5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSksZj1vYihrLmFwcGVuZENoaWxkKGUpLFwic2NyaXB0XCIpLGkmJm1iKGYpLGMpKXtqPTA7d2hpbGUoZT1mW2orK10pZmIudGVzdChlLnR5cGV8fFwiXCIpJiZjLnB1c2goZSl9cmV0dXJuIGt9LGNsZWFuRGF0YTpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkLGUsZj1uLmV2ZW50LnNwZWNpYWwsZz0wO3ZvaWQgMCE9PShjPWFbZ10pO2crKyl7aWYobi5hY2NlcHREYXRhKGMpJiYoZT1jW0wuZXhwYW5kb10sZSYmKGI9TC5jYWNoZVtlXSkpKXtpZihiLmV2ZW50cylmb3IoZCBpbiBiLmV2ZW50cylmW2RdP24uZXZlbnQucmVtb3ZlKGMsZCk6bi5yZW1vdmVFdmVudChjLGQsYi5oYW5kbGUpO0wuY2FjaGVbZV0mJmRlbGV0ZSBMLmNhY2hlW2VdfWRlbGV0ZSBNLmNhY2hlW2NbTS5leHBhbmRvXV19fX0pLG4uZm4uZXh0ZW5kKHt0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBKKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/bi50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7KDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKSYmKHRoaXMudGV4dENvbnRlbnQ9YSl9KX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPWpiKHRoaXMsYSk7Yi5hcHBlbmRDaGlsZChhKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9amIodGhpcyxhKTtiLmluc2VydEJlZm9yZShhLGIuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzLm5leHRTaWJsaW5nKX0pfSxyZW1vdmU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZD1hP24uZmlsdGVyKGEsdGhpcyk6dGhpcyxlPTA7bnVsbCE9KGM9ZFtlXSk7ZSsrKWJ8fDEhPT1jLm5vZGVUeXBlfHxuLmNsZWFuRGF0YShvYihjKSksYy5wYXJlbnROb2RlJiYoYiYmbi5jb250YWlucyhjLm93bmVyRG9jdW1lbnQsYykmJm1iKG9iKGMsXCJzY3JpcHRcIikpLGMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKSk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MDtudWxsIT0oYT10aGlzW2JdKTtiKyspMT09PWEubm9kZVR5cGUmJihuLmNsZWFuRGF0YShvYihhLCExKSksYS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1udWxsPT1hPyExOmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBuLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBKKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSYmMT09PWIubm9kZVR5cGUpcmV0dXJuIGIuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiYhZGIudGVzdChhKSYmIWliWyhiYi5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2E9YS5yZXBsYWNlKGFiLFwiPCQxPjwvJDI+XCIpO3RyeXtmb3IoO2Q+YztjKyspYj10aGlzW2NdfHx7fSwxPT09Yi5ub2RlVHlwZSYmKG4uY2xlYW5EYXRhKG9iKGIsITEpKSxiLmlubmVySFRNTD1hKTtiPTB9Y2F0Y2goZSl7fX1iJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGEpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzWzBdO3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihiKXthPXRoaXMucGFyZW50Tm9kZSxuLmNsZWFuRGF0YShvYih0aGlzKSksYSYmYS5yZXBsYWNlQ2hpbGQoYix0aGlzKX0pLGEmJihhLmxlbmd0aHx8YS5ub2RlVHlwZSk/dGhpczp0aGlzLnJlbW92ZSgpfSxkZXRhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucmVtb3ZlKGEsITApfSxkb21NYW5pcDpmdW5jdGlvbihhLGIpe2E9ZS5hcHBseShbXSxhKTt2YXIgYyxkLGYsZyxoLGksaj0wLGw9dGhpcy5sZW5ndGgsbT10aGlzLG89bC0xLHA9YVswXSxxPW4uaXNGdW5jdGlvbihwKTtpZihxfHxsPjEmJlwic3RyaW5nXCI9PXR5cGVvZiBwJiYhay5jaGVja0Nsb25lJiZlYi50ZXN0KHApKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYyl7dmFyIGQ9bS5lcShjKTtxJiYoYVswXT1wLmNhbGwodGhpcyxjLGQuaHRtbCgpKSksZC5kb21NYW5pcChhLGIpfSk7aWYobCYmKGM9bi5idWlsZEZyYWdtZW50KGEsdGhpc1swXS5vd25lckRvY3VtZW50LCExLHRoaXMpLGQ9Yy5maXJzdENoaWxkLDE9PT1jLmNoaWxkTm9kZXMubGVuZ3RoJiYoYz1kKSxkKSl7Zm9yKGY9bi5tYXAob2IoYyxcInNjcmlwdFwiKSxrYiksZz1mLmxlbmd0aDtsPmo7aisrKWg9YyxqIT09byYmKGg9bi5jbG9uZShoLCEwLCEwKSxnJiZuLm1lcmdlKGYsb2IoaCxcInNjcmlwdFwiKSkpLGIuY2FsbCh0aGlzW2pdLGgsaik7aWYoZylmb3IoaT1mW2YubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsbi5tYXAoZixsYiksaj0wO2c+ajtqKyspaD1mW2pdLGZiLnRlc3QoaC50eXBlfHxcIlwiKSYmIUwuYWNjZXNzKGgsXCJnbG9iYWxFdmFsXCIpJiZuLmNvbnRhaW5zKGksaCkmJihoLnNyYz9uLl9ldmFsVXJsJiZuLl9ldmFsVXJsKGguc3JjKTpuLmdsb2JhbEV2YWwoaC50ZXh0Q29udGVudC5yZXBsYWNlKGhiLFwiXCIpKSl9cmV0dXJuIHRoaXN9fSksbi5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD1bXSxlPW4oYSksZz1lLmxlbmd0aC0xLGg9MDtnPj1oO2grKyljPWg9PT1nP3RoaXM6dGhpcy5jbG9uZSghMCksbihlW2hdKVtiXShjKSxmLmFwcGx5KGQsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQpfX0pO3ZhciBxYixyYj17fTtmdW5jdGlvbiBzYihiLGMpe3ZhciBkLGU9bihjLmNyZWF0ZUVsZW1lbnQoYikpLmFwcGVuZFRvKGMuYm9keSksZj1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlJiYoZD1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlKGVbMF0pKT9kLmRpc3BsYXk6bi5jc3MoZVswXSxcImRpc3BsYXlcIik7cmV0dXJuIGUuZGV0YWNoKCksZn1mdW5jdGlvbiB0YihhKXt2YXIgYj1sLGM9cmJbYV07cmV0dXJuIGN8fChjPXNiKGEsYiksXCJub25lXCIhPT1jJiZjfHwocWI9KHFifHxuKFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiKSkuYXBwZW5kVG8oYi5kb2N1bWVudEVsZW1lbnQpLGI9cWJbMF0uY29udGVudERvY3VtZW50LGIud3JpdGUoKSxiLmNsb3NlKCksYz1zYihhLGIpLHFiLmRldGFjaCgpKSxyYlthXT1jKSxjfXZhciB1Yj0vXm1hcmdpbi8sdmI9bmV3IFJlZ0V4cChcIl4oXCIrUStcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSx3Yj1mdW5jdGlvbihhKXtyZXR1cm4gYS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoYSxudWxsKX07ZnVuY3Rpb24geGIoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5zdHlsZTtyZXR1cm4gYz1jfHx3YihhKSxjJiYoZz1jLmdldFByb3BlcnR5VmFsdWUoYil8fGNbYl0pLGMmJihcIlwiIT09Z3x8bi5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSl8fChnPW4uc3R5bGUoYSxiKSksdmIudGVzdChnKSYmdWIudGVzdChiKSYmKGQ9aC53aWR0aCxlPWgubWluV2lkdGgsZj1oLm1heFdpZHRoLGgubWluV2lkdGg9aC5tYXhXaWR0aD1oLndpZHRoPWcsZz1jLndpZHRoLGgud2lkdGg9ZCxoLm1pbldpZHRoPWUsaC5tYXhXaWR0aD1mKSksdm9pZCAwIT09Zz9nK1wiXCI6Z31mdW5jdGlvbiB5YihhLGIpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpP3ZvaWQgZGVsZXRlIHRoaXMuZ2V0Oih0aGlzLmdldD1iKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fX0hZnVuY3Rpb24oKXt2YXIgYixjLGQ9bC5kb2N1bWVudEVsZW1lbnQsZT1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZj1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWYoZi5zdHlsZSl7Zi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsZi5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsay5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09Zi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxlLnN0eWxlLmNzc1RleHQ9XCJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiLGUuYXBwZW5kQ2hpbGQoZik7ZnVuY3Rpb24gZygpe2Yuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCIsZi5pbm5lckhUTUw9XCJcIixkLmFwcGVuZENoaWxkKGUpO3ZhciBnPWEuZ2V0Q29tcHV0ZWRTdHlsZShmLG51bGwpO2I9XCIxJVwiIT09Zy50b3AsYz1cIjRweFwiPT09Zy53aWR0aCxkLnJlbW92ZUNoaWxkKGUpfWEuZ2V0Q29tcHV0ZWRTdHlsZSYmbi5leHRlbmQoayx7cGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBnKCksYn0sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09YyYmZygpLGN9LHJlbGlhYmxlTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXt2YXIgYixjPWYuYXBwZW5kQ2hpbGQobC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtyZXR1cm4gYy5zdHlsZS5jc3NUZXh0PWYuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiLGMuc3R5bGUubWFyZ2luUmlnaHQ9Yy5zdHlsZS53aWR0aD1cIjBcIixmLnN0eWxlLndpZHRoPVwiMXB4XCIsZC5hcHBlbmRDaGlsZChlKSxiPSFwYXJzZUZsb2F0KGEuZ2V0Q29tcHV0ZWRTdHlsZShjLG51bGwpLm1hcmdpblJpZ2h0KSxkLnJlbW92ZUNoaWxkKGUpLGJ9fSl9fSgpLG4uc3dhcD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGc9e307Zm9yKGYgaW4gYilnW2ZdPWEuc3R5bGVbZl0sYS5zdHlsZVtmXT1iW2ZdO2U9Yy5hcHBseShhLGR8fFtdKTtmb3IoZiBpbiBiKWEuc3R5bGVbZl09Z1tmXTtyZXR1cm4gZX07dmFyIHpiPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxBYj1uZXcgUmVnRXhwKFwiXihcIitRK1wiKSguKikkXCIsXCJpXCIpLEJiPW5ldyBSZWdFeHAoXCJeKFsrLV0pPShcIitRK1wiKVwiLFwiaVwiKSxDYj17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sRGI9e2xldHRlclNwYWNpbmc6XCIwXCIsZm9udFdlaWdodDpcIjQwMFwifSxFYj1bXCJXZWJraXRcIixcIk9cIixcIk1velwiLFwibXNcIl07ZnVuY3Rpb24gRmIoYSxiKXtpZihiIGluIGEpcmV0dXJuIGI7dmFyIGM9YlswXS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSksZD1iLGU9RWIubGVuZ3RoO3doaWxlKGUtLSlpZihiPUViW2VdK2MsYiBpbiBhKXJldHVybiBiO3JldHVybiBkfWZ1bmN0aW9uIEdiKGEsYixjKXt2YXIgZD1BYi5leGVjKGIpO3JldHVybiBkP01hdGgubWF4KDAsZFsxXS0oY3x8MCkpKyhkWzJdfHxcInB4XCIpOmJ9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yz09PShkP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpPzQ6XCJ3aWR0aFwiPT09Yj8xOjAsZz0wOzQ+ZjtmKz0yKVwibWFyZ2luXCI9PT1jJiYoZys9bi5jc3MoYSxjK1JbZl0sITAsZSkpLGQ/KFwiY29udGVudFwiPT09YyYmKGctPW4uY3NzKGEsXCJwYWRkaW5nXCIrUltmXSwhMCxlKSksXCJtYXJnaW5cIiE9PWMmJihnLT1uLmNzcyhhLFwiYm9yZGVyXCIrUltmXStcIldpZHRoXCIsITAsZSkpKTooZys9bi5jc3MoYSxcInBhZGRpbmdcIitSW2ZdLCEwLGUpLFwicGFkZGluZ1wiIT09YyYmKGcrPW4uY3NzKGEsXCJib3JkZXJcIitSW2ZdK1wiV2lkdGhcIiwhMCxlKSkpO3JldHVybiBnfWZ1bmN0aW9uIEliKGEsYixjKXt2YXIgZD0hMCxlPVwid2lkdGhcIj09PWI/YS5vZmZzZXRXaWR0aDphLm9mZnNldEhlaWdodCxmPXdiKGEpLGc9XCJib3JkZXItYm94XCI9PT1uLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZik7aWYoMD49ZXx8bnVsbD09ZSl7aWYoZT14YihhLGIsZiksKDA+ZXx8bnVsbD09ZSkmJihlPWEuc3R5bGVbYl0pLHZiLnRlc3QoZSkpcmV0dXJuIGU7ZD1nJiYoay5ib3hTaXppbmdSZWxpYWJsZSgpfHxlPT09YS5zdHlsZVtiXSksZT1wYXJzZUZsb2F0KGUpfHwwfXJldHVybiBlK0hiKGEsYixjfHwoZz9cImJvcmRlclwiOlwiY29udGVudFwiKSxkLGYpK1wicHhcIn1mdW5jdGlvbiBKYihhLGIpe2Zvcih2YXIgYyxkLGUsZj1bXSxnPTAsaD1hLmxlbmd0aDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoZltnXT1MLmdldChkLFwib2xkZGlzcGxheVwiKSxjPWQuc3R5bGUuZGlzcGxheSxiPyhmW2ddfHxcIm5vbmVcIiE9PWN8fChkLnN0eWxlLmRpc3BsYXk9XCJcIiksXCJcIj09PWQuc3R5bGUuZGlzcGxheSYmUyhkKSYmKGZbZ109TC5hY2Nlc3MoZCxcIm9sZGRpc3BsYXlcIix0YihkLm5vZGVOYW1lKSkpKTooZT1TKGQpLFwibm9uZVwiPT09YyYmZXx8TC5zZXQoZCxcIm9sZGRpc3BsYXlcIixlP2M6bi5jc3MoZCxcImRpc3BsYXlcIikpKSk7Zm9yKGc9MDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoYiYmXCJub25lXCIhPT1kLnN0eWxlLmRpc3BsYXkmJlwiXCIhPT1kLnN0eWxlLmRpc3BsYXl8fChkLnN0eWxlLmRpc3BsYXk9Yj9mW2ddfHxcIlwiOlwibm9uZVwiKSk7cmV0dXJuIGF9bi5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oYSxiKXtpZihiKXt2YXIgYz14YihhLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09Yz9cIjFcIjpjfX19fSxjc3NOdW1iZXI6e2NvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOntcImZsb2F0XCI6XCJjc3NGbG9hdFwifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPW4uY2FtZWxDYXNlKGIpLGk9YS5zdHlsZTtyZXR1cm4gYj1uLmNzc1Byb3BzW2hdfHwobi5jc3NQcm9wc1toXT1GYihpLGgpKSxnPW4uY3NzSG9va3NbYl18fG4uY3NzSG9va3NbaF0sdm9pZCAwPT09Yz9nJiZcImdldFwiaW4gZyYmdm9pZCAwIT09KGU9Zy5nZXQoYSwhMSxkKSk/ZTppW2JdOihmPXR5cGVvZiBjLFwic3RyaW5nXCI9PT1mJiYoZT1CYi5leGVjKGMpKSYmKGM9KGVbMV0rMSkqZVsyXStwYXJzZUZsb2F0KG4uY3NzKGEsYikpLGY9XCJudW1iZXJcIiksbnVsbCE9YyYmYz09PWMmJihcIm51bWJlclwiIT09Znx8bi5jc3NOdW1iZXJbaF18fChjKz1cInB4XCIpLGsuY2xlYXJDbG9uZVN0eWxlfHxcIlwiIT09Y3x8MCE9PWIuaW5kZXhPZihcImJhY2tncm91bmRcIil8fChpW2JdPVwiaW5oZXJpdFwiKSxnJiZcInNldFwiaW4gZyYmdm9pZCAwPT09KGM9Zy5zZXQoYSxjLGQpKXx8KGlbYl09YykpLHZvaWQgMCl9fSxjc3M6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnLGg9bi5jYW1lbENhc2UoYik7cmV0dXJuIGI9bi5jc3NQcm9wc1toXXx8KG4uY3NzUHJvcHNbaF09RmIoYS5zdHlsZSxoKSksZz1uLmNzc0hvb2tzW2JdfHxuLmNzc0hvb2tzW2hdLGcmJlwiZ2V0XCJpbiBnJiYoZT1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1lJiYoZT14YihhLGIsZCkpLFwibm9ybWFsXCI9PT1lJiZiIGluIERiJiYoZT1EYltiXSksXCJcIj09PWN8fGM/KGY9cGFyc2VGbG9hdChlKSxjPT09ITB8fG4uaXNOdW1lcmljKGYpP2Z8fDA6ZSk6ZX19KSxuLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihhLGIpe24uY3NzSG9va3NbYl09e2dldDpmdW5jdGlvbihhLGMsZCl7cmV0dXJuIGM/emIudGVzdChuLmNzcyhhLFwiZGlzcGxheVwiKSkmJjA9PT1hLm9mZnNldFdpZHRoP24uc3dhcChhLENiLGZ1bmN0aW9uKCl7cmV0dXJuIEliKGEsYixkKX0pOkliKGEsYixkKTp2b2lkIDB9LHNldDpmdW5jdGlvbihhLGMsZCl7dmFyIGU9ZCYmd2IoYSk7cmV0dXJuIEdiKGEsYyxkP0hiKGEsYixkLFwiYm9yZGVyLWJveFwiPT09bi5jc3MoYSxcImJveFNpemluZ1wiLCExLGUpLGUpOjApfX19KSxuLmNzc0hvb2tzLm1hcmdpblJpZ2h0PXliKGsucmVsaWFibGVNYXJnaW5SaWdodCxmdW5jdGlvbihhLGIpe3JldHVybiBiP24uc3dhcChhLHtkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCJ9LHhiLFthLFwibWFyZ2luUmlnaHRcIl0pOnZvaWQgMH0pLG4uZWFjaCh7bWFyZ2luOlwiXCIscGFkZGluZzpcIlwiLGJvcmRlcjpcIldpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7bi5jc3NIb29rc1thK2JdPXtleHBhbmQ6ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT17fSxmPVwic3RyaW5nXCI9PXR5cGVvZiBjP2Muc3BsaXQoXCIgXCIpOltjXTs0PmQ7ZCsrKWVbYStSW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LHViLnRlc3QoYSl8fChuLmNzc0hvb2tzW2ErYl0uc2V0PUdiKX0pLG4uZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gSih0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKG4uaXNBcnJheShiKSl7Zm9yKGQ9d2IoYSksZT1iLmxlbmd0aDtlPmc7ZysrKWZbYltnXV09bi5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP24uc3R5bGUoYSxiLGMpOm4uY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIEpiKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIEpiKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uyh0aGlzKT9uKHRoaXMpLnNob3coKTpuKHRoaXMpLmhpZGUoKX0pfX0pO2Z1bmN0aW9uIEtiKGEsYixjLGQsZSl7cmV0dXJuIG5ldyBLYi5wcm90b3R5cGUuaW5pdChhLGIsYyxkLGUpfW4uVHdlZW49S2IsS2IucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpLYixpbml0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmVsZW09YSx0aGlzLnByb3A9Yyx0aGlzLmVhc2luZz1lfHxcInN3aW5nXCIsdGhpcy5vcHRpb25zPWIsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPWQsdGhpcy51bml0PWZ8fChuLmNzc051bWJlcltjXT9cIlwiOlwicHhcIil9LGN1cjpmdW5jdGlvbigpe3ZhciBhPUtiLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBhJiZhLmdldD9hLmdldCh0aGlzKTpLYi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oYSl7dmFyIGIsYz1LYi5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5wb3M9Yj10aGlzLm9wdGlvbnMuZHVyYXRpb24/bi5lYXNpbmdbdGhpcy5lYXNpbmddKGEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmEsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6YSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqYit0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxjJiZjLnNldD9jLnNldCh0aGlzKTpLYi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxLYi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9S2IucHJvdG90eXBlLEtiLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gbnVsbD09YS5lbGVtW2EucHJvcF18fGEuZWxlbS5zdHlsZSYmbnVsbCE9YS5lbGVtLnN0eWxlW2EucHJvcF0/KGI9bi5jc3MoYS5lbGVtLGEucHJvcCxcIlwiKSxiJiZcImF1dG9cIiE9PWI/YjowKTphLmVsZW1bYS5wcm9wXX0sc2V0OmZ1bmN0aW9uKGEpe24uZnguc3RlcFthLnByb3BdP24uZnguc3RlcFthLnByb3BdKGEpOmEuZWxlbS5zdHlsZSYmKG51bGwhPWEuZWxlbS5zdHlsZVtuLmNzc1Byb3BzW2EucHJvcF1dfHxuLmNzc0hvb2tzW2EucHJvcF0pP24uc3R5bGUoYS5lbGVtLGEucHJvcCxhLm5vdythLnVuaXQpOmEuZWxlbVthLnByb3BdPWEubm93fX19LEtiLnByb3BIb29rcy5zY3JvbGxUb3A9S2IucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihhKXthLmVsZW0ubm9kZVR5cGUmJmEuZWxlbS5wYXJlbnROb2RlJiYoYS5lbGVtW2EucHJvcF09YS5ub3cpfX0sbi5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihhKXtyZXR1cm4gYX0sc3dpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuLjUtTWF0aC5jb3MoYSpNYXRoLlBJKS8yfX0sbi5meD1LYi5wcm90b3R5cGUuaW5pdCxuLmZ4LnN0ZXA9e307dmFyIExiLE1iLE5iPS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxPYj1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIitRK1wiKShbYS16JV0qKSRcIixcImlcIiksUGI9L3F1ZXVlSG9va3MkLyxRYj1bVmJdLFJiPXtcIipcIjpbZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNyZWF0ZVR3ZWVuKGEsYiksZD1jLmN1cigpLGU9T2IuZXhlYyhiKSxmPWUmJmVbM118fChuLmNzc051bWJlclthXT9cIlwiOlwicHhcIiksZz0obi5jc3NOdW1iZXJbYV18fFwicHhcIiE9PWYmJitkKSYmT2IuZXhlYyhuLmNzcyhjLmVsZW0sYSkpLGg9MSxpPTIwO2lmKGcmJmdbM10hPT1mKXtmPWZ8fGdbM10sZT1lfHxbXSxnPStkfHwxO2RvIGg9aHx8XCIuNVwiLGcvPWgsbi5zdHlsZShjLmVsZW0sYSxnK2YpO3doaWxlKGghPT0oaD1jLmN1cigpL2QpJiYxIT09aCYmLS1pKX1yZXR1cm4gZSYmKGc9Yy5zdGFydD0rZ3x8K2R8fDAsYy51bml0PWYsYy5lbmQ9ZVsxXT9nKyhlWzFdKzEpKmVbMl06K2VbMl0pLGN9XX07ZnVuY3Rpb24gU2IoKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe0xiPXZvaWQgMH0pLExiPW4ubm93KCl9ZnVuY3Rpb24gVGIoYSxiKXt2YXIgYyxkPTAsZT17aGVpZ2h0OmF9O2ZvcihiPWI/MTowOzQ+ZDtkKz0yLWIpYz1SW2RdLGVbXCJtYXJnaW5cIitjXT1lW1wicGFkZGluZ1wiK2NdPWE7cmV0dXJuIGImJihlLm9wYWNpdHk9ZS53aWR0aD1hKSxlfWZ1bmN0aW9uIFViKGEsYixjKXtmb3IodmFyIGQsZT0oUmJbYl18fFtdKS5jb25jYXQoUmJbXCIqXCJdKSxmPTAsZz1lLmxlbmd0aDtnPmY7ZisrKWlmKGQ9ZVtmXS5jYWxsKGMsYixhKSlyZXR1cm4gZH1mdW5jdGlvbiBWYihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosayxsPXRoaXMsbT17fSxvPWEuc3R5bGUscD1hLm5vZGVUeXBlJiZTKGEpLHE9TC5nZXQoYSxcImZ4c2hvd1wiKTtjLnF1ZXVlfHwoaD1uLl9xdWV1ZUhvb2tzKGEsXCJmeFwiKSxudWxsPT1oLnVucXVldWVkJiYoaC51bnF1ZXVlZD0wLGk9aC5lbXB0eS5maXJlLGguZW1wdHkuZmlyZT1mdW5jdGlvbigpe2gudW5xdWV1ZWR8fGkoKX0pLGgudW5xdWV1ZWQrKyxsLmFsd2F5cyhmdW5jdGlvbigpe2wuYWx3YXlzKGZ1bmN0aW9uKCl7aC51bnF1ZXVlZC0tLG4ucXVldWUoYSxcImZ4XCIpLmxlbmd0aHx8aC5lbXB0eS5maXJlKCl9KX0pKSwxPT09YS5ub2RlVHlwZSYmKFwiaGVpZ2h0XCJpbiBifHxcIndpZHRoXCJpbiBiKSYmKGMub3ZlcmZsb3c9W28ub3ZlcmZsb3csby5vdmVyZmxvd1gsby5vdmVyZmxvd1ldLGo9bi5jc3MoYSxcImRpc3BsYXlcIiksaz1cIm5vbmVcIj09PWo/TC5nZXQoYSxcIm9sZGRpc3BsYXlcIil8fHRiKGEubm9kZU5hbWUpOmosXCJpbmxpbmVcIj09PWsmJlwibm9uZVwiPT09bi5jc3MoYSxcImZsb2F0XCIpJiYoby5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYoby5vdmVyZmxvdz1cImhpZGRlblwiLGwuYWx3YXlzKGZ1bmN0aW9uKCl7by5vdmVyZmxvdz1jLm92ZXJmbG93WzBdLG8ub3ZlcmZsb3dYPWMub3ZlcmZsb3dbMV0sby5vdmVyZmxvd1k9Yy5vdmVyZmxvd1syXX0pKTtmb3IoZCBpbiBiKWlmKGU9YltkXSxOYi5leGVjKGUpKXtpZihkZWxldGUgYltkXSxmPWZ8fFwidG9nZ2xlXCI9PT1lLGU9PT0ocD9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09ZXx8IXF8fHZvaWQgMD09PXFbZF0pY29udGludWU7cD0hMH1tW2RdPXEmJnFbZF18fG4uc3R5bGUoYSxkKX1lbHNlIGo9dm9pZCAwO2lmKG4uaXNFbXB0eU9iamVjdChtKSlcImlubGluZVwiPT09KFwibm9uZVwiPT09aj90YihhLm5vZGVOYW1lKTpqKSYmKG8uZGlzcGxheT1qKTtlbHNle3E/XCJoaWRkZW5cImluIHEmJihwPXEuaGlkZGVuKTpxPUwuYWNjZXNzKGEsXCJmeHNob3dcIix7fSksZiYmKHEuaGlkZGVuPSFwKSxwP24oYSkuc2hvdygpOmwuZG9uZShmdW5jdGlvbigpe24oYSkuaGlkZSgpfSksbC5kb25lKGZ1bmN0aW9uKCl7dmFyIGI7TC5yZW1vdmUoYSxcImZ4c2hvd1wiKTtmb3IoYiBpbiBtKW4uc3R5bGUoYSxiLG1bYl0pfSk7Zm9yKGQgaW4gbSlnPVViKHA/cVtkXTowLGQsbCksZCBpbiBxfHwocVtkXT1nLnN0YXJ0LHAmJihnLmVuZD1nLnN0YXJ0LGcuc3RhcnQ9XCJ3aWR0aFwiPT09ZHx8XCJoZWlnaHRcIj09PWQ/MTowKSl9fWZ1bmN0aW9uIFdiKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoYyBpbiBhKWlmKGQ9bi5jYW1lbENhc2UoYyksZT1iW2RdLGY9YVtjXSxuLmlzQXJyYXkoZikmJihlPWZbMV0sZj1hW2NdPWZbMF0pLGMhPT1kJiYoYVtkXT1mLGRlbGV0ZSBhW2NdKSxnPW4uY3NzSG9va3NbZF0sZyYmXCJleHBhbmRcImluIGcpe2Y9Zy5leHBhbmQoZiksZGVsZXRlIGFbZF07Zm9yKGMgaW4gZiljIGluIGF8fChhW2NdPWZbY10sYltjXT1lKX1lbHNlIGJbZF09ZX1mdW5jdGlvbiBYYihhLGIsYyl7dmFyIGQsZSxmPTAsZz1RYi5sZW5ndGgsaD1uLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIGkuZWxlbX0pLGk9ZnVuY3Rpb24oKXtpZihlKXJldHVybiExO2Zvcih2YXIgYj1MYnx8U2IoKSxjPU1hdGgubWF4KDAsai5zdGFydFRpbWUrai5kdXJhdGlvbi1iKSxkPWMvai5kdXJhdGlvbnx8MCxmPTEtZCxnPTAsaT1qLnR3ZWVucy5sZW5ndGg7aT5nO2crKylqLnR3ZWVuc1tnXS5ydW4oZik7cmV0dXJuIGgubm90aWZ5V2l0aChhLFtqLGYsY10pLDE+ZiYmaT9jOihoLnJlc29sdmVXaXRoKGEsW2pdKSwhMSl9LGo9aC5wcm9taXNlKHtlbGVtOmEscHJvcHM6bi5leHRlbmQoe30sYiksb3B0czpuLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fX0sYyksb3JpZ2luYWxQcm9wZXJ0aWVzOmIsb3JpZ2luYWxPcHRpb25zOmMsc3RhcnRUaW1lOkxifHxTYigpLGR1cmF0aW9uOmMuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9bi5Ud2VlbihhLGoub3B0cyxiLGMsai5vcHRzLnNwZWNpYWxFYXNpbmdbYl18fGoub3B0cy5lYXNpbmcpO3JldHVybiBqLnR3ZWVucy5wdXNoKGQpLGR9LHN0b3A6ZnVuY3Rpb24oYil7dmFyIGM9MCxkPWI/ai50d2VlbnMubGVuZ3RoOjA7aWYoZSlyZXR1cm4gdGhpcztmb3IoZT0hMDtkPmM7YysrKWoudHdlZW5zW2NdLnJ1bigxKTtyZXR1cm4gYj9oLnJlc29sdmVXaXRoKGEsW2osYl0pOmgucmVqZWN0V2l0aChhLFtqLGJdKSx0aGlzfX0pLGs9ai5wcm9wcztmb3IoV2IoayxqLm9wdHMuc3BlY2lhbEVhc2luZyk7Zz5mO2YrKylpZihkPVFiW2ZdLmNhbGwoaixhLGssai5vcHRzKSlyZXR1cm4gZDtyZXR1cm4gbi5tYXAoayxVYixqKSxuLmlzRnVuY3Rpb24oai5vcHRzLnN0YXJ0KSYmai5vcHRzLnN0YXJ0LmNhbGwoYSxqKSxuLmZ4LnRpbWVyKG4uZXh0ZW5kKGkse2VsZW06YSxhbmltOmoscXVldWU6ai5vcHRzLnF1ZXVlfSkpLGoucHJvZ3Jlc3Moai5vcHRzLnByb2dyZXNzKS5kb25lKGoub3B0cy5kb25lLGoub3B0cy5jb21wbGV0ZSkuZmFpbChqLm9wdHMuZmFpbCkuYWx3YXlzKGoub3B0cy5hbHdheXMpfW4uQW5pbWF0aW9uPW4uZXh0ZW5kKFhiLHt0d2VlbmVyOmZ1bmN0aW9uKGEsYil7bi5pc0Z1bmN0aW9uKGEpPyhiPWEsYT1bXCIqXCJdKTphPWEuc3BsaXQoXCIgXCIpO2Zvcih2YXIgYyxkPTAsZT1hLmxlbmd0aDtlPmQ7ZCsrKWM9YVtkXSxSYltjXT1SYltjXXx8W10sUmJbY10udW5zaGlmdChiKX0scHJlZmlsdGVyOmZ1bmN0aW9uKGEsYil7Yj9RYi51bnNoaWZ0KGEpOlFiLnB1c2goYSl9fSksbi5zcGVlZD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YSYmXCJvYmplY3RcIj09dHlwZW9mIGE/bi5leHRlbmQoe30sYSk6e2NvbXBsZXRlOmN8fCFjJiZifHxuLmlzRnVuY3Rpb24oYSkmJmEsZHVyYXRpb246YSxlYXNpbmc6YyYmYnx8YiYmIW4uaXNGdW5jdGlvbihiKSYmYn07cmV0dXJuIGQuZHVyYXRpb249bi5meC5vZmY/MDpcIm51bWJlclwiPT10eXBlb2YgZC5kdXJhdGlvbj9kLmR1cmF0aW9uOmQuZHVyYXRpb24gaW4gbi5meC5zcGVlZHM/bi5meC5zcGVlZHNbZC5kdXJhdGlvbl06bi5meC5zcGVlZHMuX2RlZmF1bHQsKG51bGw9PWQucXVldWV8fGQucXVldWU9PT0hMCkmJihkLnF1ZXVlPVwiZnhcIiksZC5vbGQ9ZC5jb21wbGV0ZSxkLmNvbXBsZXRlPWZ1bmN0aW9uKCl7bi5pc0Z1bmN0aW9uKGQub2xkKSYmZC5vbGQuY2FsbCh0aGlzKSxkLnF1ZXVlJiZuLmRlcXVldWUodGhpcyxkLnF1ZXVlKX0sZH0sbi5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5maWx0ZXIoUykuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OmJ9LGEsYyxkKX0sYW5pbWF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uLmlzRW1wdHlPYmplY3QoYSksZj1uLnNwZWVkKGIsYyxkKSxnPWZ1bmN0aW9uKCl7dmFyIGI9WGIodGhpcyxuLmV4dGVuZCh7fSxhKSxmKTsoZXx8TC5nZXQodGhpcyxcImZpbmlzaFwiKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPSEwLGU9bnVsbCE9YSYmYStcInF1ZXVlSG9va3NcIixmPW4udGltZXJzLGc9TC5nZXQodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmUGIudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTsoYnx8IWMpJiZuLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixjPUwuZ2V0KHRoaXMpLGQ9Y1thK1wicXVldWVcIl0sZT1jW2ErXCJxdWV1ZUhvb2tzXCJdLGY9bi50aW1lcnMsZz1kP2QubGVuZ3RoOjA7Zm9yKGMuZmluaXNoPSEwLG4ucXVldWUodGhpcyxhLFtdKSxlJiZlLnN0b3AmJmUuc3RvcC5jYWxsKHRoaXMsITApLGI9Zi5sZW5ndGg7Yi0tOylmW2JdLmVsZW09PT10aGlzJiZmW2JdLnF1ZXVlPT09YSYmKGZbYl0uYW5pbS5zdG9wKCEwKSxmLnNwbGljZShiLDEpKTtmb3IoYj0wO2c+YjtiKyspZFtiXSYmZFtiXS5maW5pc2gmJmRbYl0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIGMuZmluaXNofSl9fSksbi5lYWNoKFtcInRvZ2dsZVwiLFwic2hvd1wiLFwiaGlkZVwiXSxmdW5jdGlvbihhLGIpe3ZhciBjPW4uZm5bYl07bi5mbltiXT1mdW5jdGlvbihhLGQsZSl7cmV0dXJuIG51bGw9PWF8fFwiYm9vbGVhblwiPT10eXBlb2YgYT9jLmFwcGx5KHRoaXMsYXJndW1lbnRzKTp0aGlzLmFuaW1hdGUoVGIoYiwhMCksYSxkLGUpfX0pLG4uZWFjaCh7c2xpZGVEb3duOlRiKFwic2hvd1wiKSxzbGlkZVVwOlRiKFwiaGlkZVwiKSxzbGlkZVRvZ2dsZTpUYihcInRvZ2dsZVwiKSxmYWRlSW46e29wYWNpdHk6XCJzaG93XCJ9LGZhZGVPdXQ6e29wYWNpdHk6XCJoaWRlXCJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6XCJ0b2dnbGVcIn19LGZ1bmN0aW9uKGEsYil7bi5mblthXT1mdW5jdGlvbihhLGMsZCl7cmV0dXJuIHRoaXMuYW5pbWF0ZShiLGEsYyxkKX19KSxuLnRpbWVycz1bXSxuLmZ4LnRpY2s9ZnVuY3Rpb24oKXt2YXIgYSxiPTAsYz1uLnRpbWVycztmb3IoTGI9bi5ub3coKTtiPGMubGVuZ3RoO2IrKylhPWNbYl0sYSgpfHxjW2JdIT09YXx8Yy5zcGxpY2UoYi0tLDEpO2MubGVuZ3RofHxuLmZ4LnN0b3AoKSxMYj12b2lkIDB9LG4uZngudGltZXI9ZnVuY3Rpb24oYSl7bi50aW1lcnMucHVzaChhKSxhKCk/bi5meC5zdGFydCgpOm4udGltZXJzLnBvcCgpfSxuLmZ4LmludGVydmFsPTEzLG4uZnguc3RhcnQ9ZnVuY3Rpb24oKXtNYnx8KE1iPXNldEludGVydmFsKG4uZngudGljayxuLmZ4LmludGVydmFsKSl9LG4uZnguc3RvcD1mdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwoTWIpLE1iPW51bGx9LG4uZnguc3BlZWRzPXtzbG93OjYwMCxmYXN0OjIwMCxfZGVmYXVsdDo0MDB9LG4uZm4uZGVsYXk9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1uLmZ4P24uZnguc3BlZWRzW2FdfHxhOmEsYj1ifHxcImZ4XCIsdGhpcy5xdWV1ZShiLGZ1bmN0aW9uKGIsYyl7dmFyIGQ9c2V0VGltZW91dChiLGEpO2Muc3RvcD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChkKX19KX0sZnVuY3Rpb24oKXt2YXIgYT1sLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxiPWwuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxjPWIuYXBwZW5kQ2hpbGQobC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTthLnR5cGU9XCJjaGVja2JveFwiLGsuY2hlY2tPbj1cIlwiIT09YS52YWx1ZSxrLm9wdFNlbGVjdGVkPWMuc2VsZWN0ZWQsYi5kaXNhYmxlZD0hMCxrLm9wdERpc2FibGVkPSFjLmRpc2FibGVkLGE9bC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS52YWx1ZT1cInRcIixhLnR5cGU9XCJyYWRpb1wiLGsucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIFliLFpiLCRiPW4uZXhwci5hdHRySGFuZGxlO24uZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIEoodGhpcyxuLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24ucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKGEmJjMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIHR5cGVvZiBhLmdldEF0dHJpYnV0ZT09PVU/bi5wcm9wKGEsYixjKTooMT09PWYmJm4uaXNYTUxEb2MoYSl8fChiPWIudG9Mb3dlckNhc2UoKSxkPW4uYXR0ckhvb2tzW2JdfHwobi5leHByLm1hdGNoLmJvb2wudGVzdChiKT9aYjpZYikpLHZvaWQgMD09PWM/ZCYmXCJnZXRcImluIGQmJm51bGwhPT0oZT1kLmdldChhLGIpKT9lOihlPW4uZmluZC5hdHRyKGEsYiksbnVsbD09ZT92b2lkIDA6ZSk6bnVsbCE9PWM/ZCYmXCJzZXRcImluIGQmJnZvaWQgMCE9PShlPWQuc2V0KGEsYyxiKSk/ZTooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOnZvaWQgbi5yZW1vdmVBdHRyKGEsYikpXHJcbn0scmVtb3ZlQXR0cjpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT0wLGY9YiYmYi5tYXRjaChFKTtpZihmJiYxPT09YS5ub2RlVHlwZSl3aGlsZShjPWZbZSsrXSlkPW4ucHJvcEZpeFtjXXx8YyxuLmV4cHIubWF0Y2guYm9vbC50ZXN0KGMpJiYoYVtkXT0hMSksYS5yZW1vdmVBdHRyaWJ1dGUoYyl9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGEsYil7aWYoIWsucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09YiYmbi5ub2RlTmFtZShhLFwiaW5wdXRcIikpe3ZhciBjPWEudmFsdWU7cmV0dXJuIGEuc2V0QXR0cmlidXRlKFwidHlwZVwiLGIpLGMmJihhLnZhbHVlPWMpLGJ9fX19fSksWmI9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGI9PT0hMT9uLnJlbW92ZUF0dHIoYSxjKTphLnNldEF0dHJpYnV0ZShjLGMpLGN9fSxuLmVhY2gobi5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGEsYil7dmFyIGM9JGJbYl18fG4uZmluZC5hdHRyOyRiW2JdPWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmO3JldHVybiBkfHwoZj0kYltiXSwkYltiXT1lLGU9bnVsbCE9YyhhLGIsZCk/Yi50b0xvd2VyQ2FzZSgpOm51bGwsJGJbYl09ZiksZX19KTt2YXIgX2I9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtuLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIpe3JldHVybiBKKHRoaXMsbi5wcm9wLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1tuLnByb3BGaXhbYV18fGFdfSl9fSksbi5leHRlbmQoe3Byb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9LHByb3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnPWEubm9kZVR5cGU7aWYoYSYmMyE9PWcmJjghPT1nJiYyIT09ZylyZXR1cm4gZj0xIT09Z3x8IW4uaXNYTUxEb2MoYSksZiYmKGI9bi5wcm9wRml4W2JdfHxiLGU9bi5wcm9wSG9va3NbYl0pLHZvaWQgMCE9PWM/ZSYmXCJzZXRcImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDphW2JdPWM6ZSYmXCJnZXRcImluIGUmJm51bGwhPT0oZD1lLmdldChhLGIpKT9kOmFbYl19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5oYXNBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKXx8X2IudGVzdChhLm5vZGVOYW1lKXx8YS5ocmVmP2EudGFiSW5kZXg6LTF9fX19KSxrLm9wdFNlbGVjdGVkfHwobi5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJmIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsbnVsbH19KSxuLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7bi5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO3ZhciBhYz0vW1xcdFxcclxcblxcZl0vZztuLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGg9XCJzdHJpbmdcIj09dHlwZW9mIGEmJmEsaT0wLGo9dGhpcy5sZW5ndGg7aWYobi5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bih0aGlzKS5hZGRDbGFzcyhhLmNhbGwodGhpcyxiLHRoaXMuY2xhc3NOYW1lKSl9KTtpZihoKWZvcihiPShhfHxcIlwiKS5tYXRjaChFKXx8W107aj5pO2krKylpZihjPXRoaXNbaV0sZD0xPT09Yy5ub2RlVHlwZSYmKGMuY2xhc3NOYW1lPyhcIiBcIitjLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZShhYyxcIiBcIik6XCIgXCIpKXtmPTA7d2hpbGUoZT1iW2YrK10pZC5pbmRleE9mKFwiIFwiK2UrXCIgXCIpPDAmJihkKz1lK1wiIFwiKTtnPW4udHJpbShkKSxjLmNsYXNzTmFtZSE9PWcmJihjLmNsYXNzTmFtZT1nKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGg9MD09PWFyZ3VtZW50cy5sZW5ndGh8fFwic3RyaW5nXCI9PXR5cGVvZiBhJiZhLGk9MCxqPXRoaXMubGVuZ3RoO2lmKG4uaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe24odGhpcykucmVtb3ZlQ2xhc3MoYS5jYWxsKHRoaXMsYix0aGlzLmNsYXNzTmFtZSkpfSk7aWYoaClmb3IoYj0oYXx8XCJcIikubWF0Y2goRSl8fFtdO2o+aTtpKyspaWYoYz10aGlzW2ldLGQ9MT09PWMubm9kZVR5cGUmJihjLmNsYXNzTmFtZT8oXCIgXCIrYy5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoYWMsXCIgXCIpOlwiXCIpKXtmPTA7d2hpbGUoZT1iW2YrK10pd2hpbGUoZC5pbmRleE9mKFwiIFwiK2UrXCIgXCIpPj0wKWQ9ZC5yZXBsYWNlKFwiIFwiK2UrXCIgXCIsXCIgXCIpO2c9YT9uLnRyaW0oZCk6XCJcIixjLmNsYXNzTmFtZSE9PWcmJihjLmNsYXNzTmFtZT1nKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz10eXBlb2YgYTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGImJlwic3RyaW5nXCI9PT1jP2I/dGhpcy5hZGRDbGFzcyhhKTp0aGlzLnJlbW92ZUNsYXNzKGEpOnRoaXMuZWFjaChuLmlzRnVuY3Rpb24oYSk/ZnVuY3Rpb24oYyl7bih0aGlzKS50b2dnbGVDbGFzcyhhLmNhbGwodGhpcyxjLHRoaXMuY2xhc3NOYW1lLGIpLGIpfTpmdW5jdGlvbigpe2lmKFwic3RyaW5nXCI9PT1jKXt2YXIgYixkPTAsZT1uKHRoaXMpLGY9YS5tYXRjaChFKXx8W107d2hpbGUoYj1mW2QrK10pZS5oYXNDbGFzcyhiKT9lLnJlbW92ZUNsYXNzKGIpOmUuYWRkQ2xhc3MoYil9ZWxzZShjPT09VXx8XCJib29sZWFuXCI9PT1jKSYmKHRoaXMuY2xhc3NOYW1lJiZMLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHRoaXMuY2xhc3NOYW1lKSx0aGlzLmNsYXNzTmFtZT10aGlzLmNsYXNzTmFtZXx8YT09PSExP1wiXCI6TC5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1cIiBcIithK1wiIFwiLGM9MCxkPXRoaXMubGVuZ3RoO2Q+YztjKyspaWYoMT09PXRoaXNbY10ubm9kZVR5cGUmJihcIiBcIit0aGlzW2NdLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZShhYyxcIiBcIikuaW5kZXhPZihiKT49MClyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgYmM9L1xcci9nO24uZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZD1uLmlzRnVuY3Rpb24oYSksdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBlOzE9PT10aGlzLm5vZGVUeXBlJiYoZT1kP2EuY2FsbCh0aGlzLGMsbih0aGlzKS52YWwoKSk6YSxudWxsPT1lP2U9XCJcIjpcIm51bWJlclwiPT10eXBlb2YgZT9lKz1cIlwiOm4uaXNBcnJheShlKSYmKGU9bi5tYXAoZSxmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOmErXCJcIn0pKSxiPW4udmFsSG9va3NbdGhpcy50eXBlXXx8bi52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwic2V0XCJpbiBiJiZ2b2lkIDAhPT1iLnNldCh0aGlzLGUsXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9ZSkpfSk7aWYoZSlyZXR1cm4gYj1uLnZhbEhvb2tzW2UudHlwZV18fG4udmFsSG9va3NbZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcImdldFwiaW4gYiYmdm9pZCAwIT09KGM9Yi5nZXQoZSxcInZhbHVlXCIpKT9jOihjPWUudmFsdWUsXCJzdHJpbmdcIj09dHlwZW9mIGM/Yy5yZXBsYWNlKGJjLFwiXCIpOm51bGw9PWM/XCJcIjpjKX19fSksbi5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihhKXt2YXIgYj1uLmZpbmQuYXR0cihhLFwidmFsdWVcIik7cmV0dXJuIG51bGwhPWI/YjpuLnRyaW0obi50ZXh0KGEpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYixjLGQ9YS5vcHRpb25zLGU9YS5zZWxlY3RlZEluZGV4LGY9XCJzZWxlY3Qtb25lXCI9PT1hLnR5cGV8fDA+ZSxnPWY/bnVsbDpbXSxoPWY/ZSsxOmQubGVuZ3RoLGk9MD5lP2g6Zj9lOjA7aD5pO2krKylpZihjPWRbaV0sISghYy5zZWxlY3RlZCYmaSE9PWV8fChrLm9wdERpc2FibGVkP2MuZGlzYWJsZWQ6bnVsbCE9PWMuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikpfHxjLnBhcmVudE5vZGUuZGlzYWJsZWQmJm4ubm9kZU5hbWUoYy5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZihiPW4oYykudmFsKCksZilyZXR1cm4gYjtnLnB1c2goYil9cmV0dXJuIGd9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT1hLm9wdGlvbnMsZj1uLm1ha2VBcnJheShiKSxnPWUubGVuZ3RoO3doaWxlKGctLSlkPWVbZ10sKGQuc2VsZWN0ZWQ9bi5pbkFycmF5KGQudmFsdWUsZik+PTApJiYoYz0hMCk7cmV0dXJuIGN8fChhLnNlbGVjdGVkSW5kZXg9LTEpLGZ9fX19KSxuLmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7bi52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uaXNBcnJheShiKT9hLmNoZWNrZWQ9bi5pbkFycmF5KG4oYSkudmFsKCksYik+PTA6dm9pZCAwfX0say5jaGVja09ufHwobi52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjphLnZhbHVlfSl9KSxuLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7bi5mbltiXT1mdW5jdGlvbihhLGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbihiLG51bGwsYSxjKTp0aGlzLnRyaWdnZXIoYil9fSksbi5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGJ8fGEpfSxiaW5kOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5vbihhLG51bGwsYixjKX0sdW5iaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub2ZmKGEsbnVsbCxiKX0sZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYixhLGMsZCl9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihhLFwiKipcIik6dGhpcy5vZmYoYixhfHxcIioqXCIsYyl9fSk7dmFyIGNjPW4ubm93KCksZGM9L1xcPy87bi5wYXJzZUpTT049ZnVuY3Rpb24oYSl7cmV0dXJuIEpTT04ucGFyc2UoYStcIlwiKX0sbi5wYXJzZVhNTD1mdW5jdGlvbihhKXt2YXIgYixjO2lmKCFhfHxcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7Yz1uZXcgRE9NUGFyc2VyLGI9Yy5wYXJzZUZyb21TdHJpbmcoYSxcInRleHQveG1sXCIpfWNhdGNoKGQpe2I9dm9pZCAwfXJldHVybighYnx8Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aCkmJm4uZXJyb3IoXCJJbnZhbGlkIFhNTDogXCIrYSksYn07dmFyIGVjLGZjLGdjPS8jLiokLyxoYz0vKFs/Jl0pXz1bXiZdKi8saWM9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxqYz0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxrYz0vXig/OkdFVHxIRUFEKSQvLGxjPS9eXFwvXFwvLyxtYz0vXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxuYz17fSxvYz17fSxwYz1cIiovXCIuY29uY2F0KFwiKlwiKTt0cnl7ZmM9bG9jYXRpb24uaHJlZn1jYXRjaChxYyl7ZmM9bC5jcmVhdGVFbGVtZW50KFwiYVwiKSxmYy5ocmVmPVwiXCIsZmM9ZmMuaHJlZn1lYz1tYy5leGVjKGZjLnRvTG93ZXJDYXNlKCkpfHxbXTtmdW5jdGlvbiByYyhhKXtyZXR1cm4gZnVuY3Rpb24oYixjKXtcInN0cmluZ1wiIT10eXBlb2YgYiYmKGM9YixiPVwiKlwiKTt2YXIgZCxlPTAsZj1iLnRvTG93ZXJDYXNlKCkubWF0Y2goRSl8fFtdO2lmKG4uaXNGdW5jdGlvbihjKSl3aGlsZShkPWZbZSsrXSlcIitcIj09PWRbMF0/KGQ9ZC5zbGljZSgxKXx8XCIqXCIsKGFbZF09YVtkXXx8W10pLnVuc2hpZnQoYykpOihhW2RdPWFbZF18fFtdKS5wdXNoKGMpfX1mdW5jdGlvbiBzYyhhLGIsYyxkKXt2YXIgZT17fSxmPWE9PT1vYztmdW5jdGlvbiBnKGgpe3ZhciBpO3JldHVybiBlW2hdPSEwLG4uZWFjaChhW2hdfHxbXSxmdW5jdGlvbihhLGgpe3ZhciBqPWgoYixjLGQpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBqfHxmfHxlW2pdP2Y/IShpPWopOnZvaWQgMDooYi5kYXRhVHlwZXMudW5zaGlmdChqKSxnKGopLCExKX0pLGl9cmV0dXJuIGcoYi5kYXRhVHlwZXNbMF0pfHwhZVtcIipcIl0mJmcoXCIqXCIpfWZ1bmN0aW9uIHRjKGEsYil7dmFyIGMsZCxlPW4uYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IoYyBpbiBiKXZvaWQgMCE9PWJbY10mJigoZVtjXT9hOmR8fChkPXt9KSlbY109YltjXSk7cmV0dXJuIGQmJm4uZXh0ZW5kKCEwLGEsZCksYX1mdW5jdGlvbiB1YyhhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNvbnRlbnRzLGk9YS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT1pWzBdKWkuc2hpZnQoKSx2b2lkIDA9PT1kJiYoZD1hLm1pbWVUeXBlfHxiLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihkKWZvcihlIGluIGgpaWYoaFtlXSYmaFtlXS50ZXN0KGQpKXtpLnVuc2hpZnQoZSk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGUgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tlK1wiIFwiK2lbMF1dKXtmPWU7YnJlYWt9Z3x8KGc9ZSl9Zj1mfHxnfXJldHVybiBmPyhmIT09aVswXSYmaS51bnNoaWZ0KGYpLGNbZl0pOnZvaWQgMH1mdW5jdGlvbiB2YyhhLGIsYyxkKXt2YXIgZSxmLGcsaCxpLGo9e30saz1hLmRhdGFUeXBlcy5zbGljZSgpO2lmKGtbMV0pZm9yKGcgaW4gYS5jb252ZXJ0ZXJzKWpbZy50b0xvd2VyQ2FzZSgpXT1hLmNvbnZlcnRlcnNbZ107Zj1rLnNoaWZ0KCk7d2hpbGUoZilpZihhLnJlc3BvbnNlRmllbGRzW2ZdJiYoY1thLnJlc3BvbnNlRmllbGRzW2ZdXT1iKSwhaSYmZCYmYS5kYXRhRmlsdGVyJiYoYj1hLmRhdGFGaWx0ZXIoYixhLmRhdGFUeXBlKSksaT1mLGY9ay5zaGlmdCgpKWlmKFwiKlwiPT09ZilmPWk7ZWxzZSBpZihcIipcIiE9PWkmJmkhPT1mKXtpZihnPWpbaStcIiBcIitmXXx8altcIiogXCIrZl0sIWcpZm9yKGUgaW4gailpZihoPWUuc3BsaXQoXCIgXCIpLGhbMV09PT1mJiYoZz1qW2krXCIgXCIraFswXV18fGpbXCIqIFwiK2hbMF1dKSl7Zz09PSEwP2c9altlXTpqW2VdIT09ITAmJihmPWhbMF0say51bnNoaWZ0KGhbMV0pKTticmVha31pZihnIT09ITApaWYoZyYmYVtcInRocm93c1wiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZTpcInBhcnNlcmVycm9yXCIsZXJyb3I6Zz9sOlwiTm8gY29udmVyc2lvbiBmcm9tIFwiK2krXCIgdG8gXCIrZn19fXJldHVybntzdGF0ZTpcInN1Y2Nlc3NcIixkYXRhOmJ9fW4uZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDpmYyx0eXBlOlwiR0VUXCIsaXNMb2NhbDpqYy50ZXN0KGVjWzFdKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpwYyx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi94bWwvLGh0bWw6L2h0bWwvLGpzb246L2pzb24vfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6bi5wYXJzZUpTT04sXCJ0ZXh0IHhtbFwiOm4ucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP3RjKHRjKGEsbi5hamF4U2V0dGluZ3MpLGIpOnRjKG4uYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOnJjKG5jKSxhamF4VHJhbnNwb3J0OnJjKG9jKSxhamF4OmZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGI9Ynx8e307dmFyIGMsZCxlLGYsZyxoLGksaixrPW4uYWpheFNldHVwKHt9LGIpLGw9ay5jb250ZXh0fHxrLG09ay5jb250ZXh0JiYobC5ub2RlVHlwZXx8bC5qcXVlcnkpP24obCk6bi5ldmVudCxvPW4uRGVmZXJyZWQoKSxwPW4uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikscT1rLnN0YXR1c0NvZGV8fHt9LHI9e30scz17fSx0PTAsdT1cImNhbmNlbGVkXCIsdj17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKDI9PT10KXtpZighZil7Zj17fTt3aGlsZShiPWljLmV4ZWMoZSkpZltiWzFdLnRvTG93ZXJDYXNlKCldPWJbMl19Yj1mW2EudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PWI/bnVsbDpifSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gMj09PXQ/ZTpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50b0xvd2VyQ2FzZSgpO3JldHVybiB0fHwoYT1zW2NdPXNbY118fGEsclthXT1iKSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGEpe3JldHVybiB0fHwoay5taW1lVHlwZT1hKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGEpaWYoMj50KWZvcihiIGluIGEpcVtiXT1bcVtiXSxhW2JdXTtlbHNlIHYuYWx3YXlzKGFbdi5zdGF0dXNdKTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YXx8dTtyZXR1cm4gYyYmYy5hYm9ydChiKSx4KDAsYiksdGhpc319O2lmKG8ucHJvbWlzZSh2KS5jb21wbGV0ZT1wLmFkZCx2LnN1Y2Nlc3M9di5kb25lLHYuZXJyb3I9di5mYWlsLGsudXJsPSgoYXx8ay51cmx8fGZjKStcIlwiKS5yZXBsYWNlKGdjLFwiXCIpLnJlcGxhY2UobGMsZWNbMV0rXCIvL1wiKSxrLnR5cGU9Yi5tZXRob2R8fGIudHlwZXx8ay5tZXRob2R8fGsudHlwZSxrLmRhdGFUeXBlcz1uLnRyaW0oay5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goRSl8fFtcIlwiXSxudWxsPT1rLmNyb3NzRG9tYWluJiYoaD1tYy5leGVjKGsudXJsLnRvTG93ZXJDYXNlKCkpLGsuY3Jvc3NEb21haW49ISghaHx8aFsxXT09PWVjWzFdJiZoWzJdPT09ZWNbMl0mJihoWzNdfHwoXCJodHRwOlwiPT09aFsxXT9cIjgwXCI6XCI0NDNcIikpPT09KGVjWzNdfHwoXCJodHRwOlwiPT09ZWNbMV0/XCI4MFwiOlwiNDQzXCIpKSkpLGsuZGF0YSYmay5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIGsuZGF0YSYmKGsuZGF0YT1uLnBhcmFtKGsuZGF0YSxrLnRyYWRpdGlvbmFsKSksc2MobmMsayxiLHYpLDI9PT10KXJldHVybiB2O2k9ay5nbG9iYWwsaSYmMD09PW4uYWN0aXZlKysmJm4uZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxrLnR5cGU9ay50eXBlLnRvVXBwZXJDYXNlKCksay5oYXNDb250ZW50PSFrYy50ZXN0KGsudHlwZSksZD1rLnVybCxrLmhhc0NvbnRlbnR8fChrLmRhdGEmJihkPWsudXJsKz0oZGMudGVzdChkKT9cIiZcIjpcIj9cIikray5kYXRhLGRlbGV0ZSBrLmRhdGEpLGsuY2FjaGU9PT0hMSYmKGsudXJsPWhjLnRlc3QoZCk/ZC5yZXBsYWNlKGhjLFwiJDFfPVwiK2NjKyspOmQrKGRjLnRlc3QoZCk/XCImXCI6XCI/XCIpK1wiXz1cIitjYysrKSksay5pZk1vZGlmaWVkJiYobi5sYXN0TW9kaWZpZWRbZF0mJnYuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsbi5sYXN0TW9kaWZpZWRbZF0pLG4uZXRhZ1tkXSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLG4uZXRhZ1tkXSkpLChrLmRhdGEmJmsuaGFzQ29udGVudCYmay5jb250ZW50VHlwZSE9PSExfHxiLmNvbnRlbnRUeXBlKSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsay5jb250ZW50VHlwZSksdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsay5kYXRhVHlwZXNbMF0mJmsuYWNjZXB0c1trLmRhdGFUeXBlc1swXV0/ay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1rLmRhdGFUeXBlc1swXT9cIiwgXCIrcGMrXCI7IHE9MC4wMVwiOlwiXCIpOmsuYWNjZXB0c1tcIipcIl0pO2ZvcihqIGluIGsuaGVhZGVycyl2LnNldFJlcXVlc3RIZWFkZXIoaixrLmhlYWRlcnNbal0pO2lmKGsuYmVmb3JlU2VuZCYmKGsuYmVmb3JlU2VuZC5jYWxsKGwsdixrKT09PSExfHwyPT09dCkpcmV0dXJuIHYuYWJvcnQoKTt1PVwiYWJvcnRcIjtmb3IoaiBpbntzdWNjZXNzOjEsZXJyb3I6MSxjb21wbGV0ZToxfSl2W2pdKGtbal0pO2lmKGM9c2Mob2MsayxiLHYpKXt2LnJlYWR5U3RhdGU9MSxpJiZtLnRyaWdnZXIoXCJhamF4U2VuZFwiLFt2LGtdKSxrLmFzeW5jJiZrLnRpbWVvdXQ+MCYmKGc9c2V0VGltZW91dChmdW5jdGlvbigpe3YuYWJvcnQoXCJ0aW1lb3V0XCIpfSxrLnRpbWVvdXQpKTt0cnl7dD0xLGMuc2VuZChyLHgpfWNhdGNoKHcpe2lmKCEoMj50KSl0aHJvdyB3O3goLTEsdyl9fWVsc2UgeCgtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiB4KGEsYixmLGgpe3ZhciBqLHIscyx1LHcseD1iOzIhPT10JiYodD0yLGcmJmNsZWFyVGltZW91dChnKSxjPXZvaWQgMCxlPWh8fFwiXCIsdi5yZWFkeVN0YXRlPWE+MD80OjAsaj1hPj0yMDAmJjMwMD5hfHwzMDQ9PT1hLGYmJih1PXVjKGssdixmKSksdT12YyhrLHUsdixqKSxqPyhrLmlmTW9kaWZpZWQmJih3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLHcmJihuLmxhc3RNb2RpZmllZFtkXT13KSx3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLHcmJihuLmV0YWdbZF09dykpLDIwND09PWF8fFwiSEVBRFwiPT09ay50eXBlP3g9XCJub2NvbnRlbnRcIjozMDQ9PT1hP3g9XCJub3Rtb2RpZmllZFwiOih4PXUuc3RhdGUscj11LmRhdGEscz11LmVycm9yLGo9IXMpKToocz14LChhfHwheCkmJih4PVwiZXJyb3JcIiwwPmEmJihhPTApKSksdi5zdGF0dXM9YSx2LnN0YXR1c1RleHQ9KGJ8fHgpK1wiXCIsaj9vLnJlc29sdmVXaXRoKGwsW3IseCx2XSk6by5yZWplY3RXaXRoKGwsW3YseCxzXSksdi5zdGF0dXNDb2RlKHEpLHE9dm9pZCAwLGkmJm0udHJpZ2dlcihqP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFt2LGssaj9yOnNdKSxwLmZpcmVXaXRoKGwsW3YseF0pLGkmJihtLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbdixrXSksLS1uLmFjdGl2ZXx8bi5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gdn0sZ2V0SlNPTjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG4uZ2V0KGEsYixjLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uZ2V0KGEsdm9pZCAwLGIsXCJzY3JpcHRcIil9fSksbi5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihhLGIpe25bYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIG4uaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLG4uYWpheCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0pfX0pLG4uZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGEsYil7bi5mbltiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vbihiLGEpfX0pLG4uX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIG4uYWpheCh7dXJsOmEsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sbi5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIG4uaXNGdW5jdGlvbihhKT90aGlzLmVhY2goZnVuY3Rpb24oYil7bih0aGlzKS53cmFwQWxsKGEuY2FsbCh0aGlzLGIpKX0pOih0aGlzWzBdJiYoYj1uKGEsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZiLmluc2VydEJlZm9yZSh0aGlzWzBdKSxiLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXM7d2hpbGUoYS5maXJzdEVsZW1lbnRDaGlsZClhPWEuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcykpLHRoaXMpfSx3cmFwSW5uZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChuLmlzRnVuY3Rpb24oYSk/ZnVuY3Rpb24oYil7bih0aGlzKS53cmFwSW5uZXIoYS5jYWxsKHRoaXMsYikpfTpmdW5jdGlvbigpe3ZhciBiPW4odGhpcyksYz1iLmNvbnRlbnRzKCk7Yy5sZW5ndGg/Yy53cmFwQWxsKGEpOmIuYXBwZW5kKGEpfSl9LHdyYXA6ZnVuY3Rpb24oYSl7dmFyIGI9bi5pc0Z1bmN0aW9uKGEpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYyl7bih0aGlzKS53cmFwQWxsKGI/YS5jYWxsKHRoaXMsYyk6YSl9KX0sdW53cmFwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpe24ubm9kZU5hbWUodGhpcyxcImJvZHlcIil8fG4odGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLmVuZCgpfX0pLG4uZXhwci5maWx0ZXJzLmhpZGRlbj1mdW5jdGlvbihhKXtyZXR1cm4gYS5vZmZzZXRXaWR0aDw9MCYmYS5vZmZzZXRIZWlnaHQ8PTB9LG4uZXhwci5maWx0ZXJzLnZpc2libGU9ZnVuY3Rpb24oYSl7cmV0dXJuIW4uZXhwci5maWx0ZXJzLmhpZGRlbihhKX07dmFyIHdjPS8lMjAvZyx4Yz0vXFxbXFxdJC8seWM9L1xccj9cXG4vZyx6Yz0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksQWM9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIEJjKGEsYixjLGQpe3ZhciBlO2lmKG4uaXNBcnJheShiKSluLmVhY2goYixmdW5jdGlvbihiLGUpe2N8fHhjLnRlc3QoYSk/ZChhLGUpOkJjKGErXCJbXCIrKFwib2JqZWN0XCI9PXR5cGVvZiBlP2I6XCJcIikrXCJdXCIsZSxjLGQpfSk7ZWxzZSBpZihjfHxcIm9iamVjdFwiIT09bi50eXBlKGIpKWQoYSxiKTtlbHNlIGZvcihlIGluIGIpQmMoYStcIltcIitlK1wiXVwiLGJbZV0sYyxkKX1uLnBhcmFtPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPWZ1bmN0aW9uKGEsYil7Yj1uLmlzRnVuY3Rpb24oYik/YigpOm51bGw9PWI/XCJcIjpiLGRbZC5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChhKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQoYil9O2lmKHZvaWQgMD09PWImJihiPW4uYWpheFNldHRpbmdzJiZuLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbCksbi5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIW4uaXNQbGFpbk9iamVjdChhKSluLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKUJjKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oXCImXCIpLnJlcGxhY2Uod2MsXCIrXCIpfSxuLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIG4ucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1uLnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBhP24ubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIW4odGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJkFjLnRlc3QodGhpcy5ub2RlTmFtZSkmJiF6Yy50ZXN0KGEpJiYodGhpcy5jaGVja2VkfHwhVC50ZXN0KGEpKX0pLm1hcChmdW5jdGlvbihhLGIpe3ZhciBjPW4odGhpcykudmFsKCk7cmV0dXJuIG51bGw9PWM/bnVsbDpuLmlzQXJyYXkoYyk/bi5tYXAoYyxmdW5jdGlvbihhKXtyZXR1cm57bmFtZTpiLm5hbWUsdmFsdWU6YS5yZXBsYWNlKHljLFwiXFxyXFxuXCIpfX0pOntuYW1lOmIubmFtZSx2YWx1ZTpjLnJlcGxhY2UoeWMsXCJcXHJcXG5cIil9fSkuZ2V0KCl9fSksbi5hamF4U2V0dGluZ3MueGhyPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBuZXcgWE1MSHR0cFJlcXVlc3R9Y2F0Y2goYSl7fX07dmFyIENjPTAsRGM9e30sRWM9ezA6MjAwLDEyMjM6MjA0fSxGYz1uLmFqYXhTZXR0aW5ncy54aHIoKTthLkFjdGl2ZVhPYmplY3QmJm4oYSkub24oXCJ1bmxvYWRcIixmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBEYylEY1thXSgpfSksay5jb3JzPSEhRmMmJlwid2l0aENyZWRlbnRpYWxzXCJpbiBGYyxrLmFqYXg9RmM9ISFGYyxuLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIGsuY29yc3x8RmMmJiFhLmNyb3NzRG9tYWluP3tzZW5kOmZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hLnhocigpLGc9KytDYztpZihmLm9wZW4oYS50eXBlLGEudXJsLGEuYXN5bmMsYS51c2VybmFtZSxhLnBhc3N3b3JkKSxhLnhockZpZWxkcylmb3IoZSBpbiBhLnhockZpZWxkcylmW2VdPWEueGhyRmllbGRzW2VdO2EubWltZVR5cGUmJmYub3ZlcnJpZGVNaW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlKGEubWltZVR5cGUpLGEuY3Jvc3NEb21haW58fGNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdfHwoY1tcIlgtUmVxdWVzdGVkLVdpdGhcIl09XCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IoZSBpbiBjKWYuc2V0UmVxdWVzdEhlYWRlcihlLGNbZV0pO2I9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7YiYmKGRlbGV0ZSBEY1tnXSxiPWYub25sb2FkPWYub25lcnJvcj1udWxsLFwiYWJvcnRcIj09PWE/Zi5hYm9ydCgpOlwiZXJyb3JcIj09PWE/ZChmLnN0YXR1cyxmLnN0YXR1c1RleHQpOmQoRWNbZi5zdGF0dXNdfHxmLnN0YXR1cyxmLnN0YXR1c1RleHQsXCJzdHJpbmdcIj09dHlwZW9mIGYucmVzcG9uc2VUZXh0P3t0ZXh0OmYucmVzcG9uc2VUZXh0fTp2b2lkIDAsZi5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0sZi5vbmxvYWQ9YigpLGYub25lcnJvcj1iKFwiZXJyb3JcIiksYj1EY1tnXT1iKFwiYWJvcnRcIik7dHJ5e2Yuc2VuZChhLmhhc0NvbnRlbnQmJmEuZGF0YXx8bnVsbCl9Y2F0Y2goaCl7aWYoYil0aHJvdyBofX0sYWJvcnQ6ZnVuY3Rpb24oKXtiJiZiKCl9fTp2b2lkIDB9KSxuLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovKD86amF2YXxlY21hKXNjcmlwdC99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihhKXtyZXR1cm4gbi5nbG9iYWxFdmFsKGEpLGF9fX0pLG4uYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEuY2FjaGUmJihhLmNhY2hlPSExKSxhLmNyb3NzRG9tYWluJiYoYS50eXBlPVwiR0VUXCIpfSksbi5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7aWYoYS5jcm9zc0RvbWFpbil7dmFyIGIsYztyZXR1cm57c2VuZDpmdW5jdGlvbihkLGUpe2I9bihcIjxzY3JpcHQ+XCIpLnByb3Aoe2FzeW5jOiEwLGNoYXJzZXQ6YS5zY3JpcHRDaGFyc2V0LHNyYzphLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLGM9ZnVuY3Rpb24oYSl7Yi5yZW1vdmUoKSxjPW51bGwsYSYmZShcImVycm9yXCI9PT1hLnR5cGU/NDA0OjIwMCxhLnR5cGUpfSksbC5oZWFkLmFwcGVuZENoaWxkKGJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2MmJmMoKX19fX0pO3ZhciBHYz1bXSxIYz0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO24uYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBhPUdjLnBvcCgpfHxuLmV4cGFuZG8rXCJfXCIrY2MrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLG4uYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihiLGMsZCl7dmFyIGUsZixnLGg9Yi5qc29ucCE9PSExJiYoSGMudGVzdChiLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgYi5kYXRhJiYhKGIuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJkhjLnRlc3QoYi5kYXRhKSYmXCJkYXRhXCIpO3JldHVybiBofHxcImpzb25wXCI9PT1iLmRhdGFUeXBlc1swXT8oZT1iLmpzb25wQ2FsbGJhY2s9bi5pc0Z1bmN0aW9uKGIuanNvbnBDYWxsYmFjayk/Yi5qc29ucENhbGxiYWNrKCk6Yi5qc29ucENhbGxiYWNrLGg/YltoXT1iW2hdLnJlcGxhY2UoSGMsXCIkMVwiK2UpOmIuanNvbnAhPT0hMSYmKGIudXJsKz0oZGMudGVzdChiLnVybCk/XCImXCI6XCI/XCIpK2IuanNvbnArXCI9XCIrZSksYi5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gZ3x8bi5lcnJvcihlK1wiIHdhcyBub3QgY2FsbGVkXCIpLGdbMF19LGIuZGF0YVR5cGVzWzBdPVwianNvblwiLGY9YVtlXSxhW2VdPWZ1bmN0aW9uKCl7Zz1hcmd1bWVudHN9LGQuYWx3YXlzKGZ1bmN0aW9uKCl7YVtlXT1mLGJbZV0mJihiLmpzb25wQ2FsbGJhY2s9Yy5qc29ucENhbGxiYWNrLEdjLnB1c2goZSkpLGcmJm4uaXNGdW5jdGlvbihmKSYmZihnWzBdKSxnPWY9dm9pZCAwfSksXCJzY3JpcHRcIik6dm9pZCAwfSksbi5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhfHxcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gbnVsbDtcImJvb2xlYW5cIj09dHlwZW9mIGImJihjPWIsYj0hMSksYj1ifHxsO3ZhciBkPXYuZXhlYyhhKSxlPSFjJiZbXTtyZXR1cm4gZD9bYi5jcmVhdGVFbGVtZW50KGRbMV0pXTooZD1uLmJ1aWxkRnJhZ21lbnQoW2FdLGIsZSksZSYmZS5sZW5ndGgmJm4oZSkucmVtb3ZlKCksbi5tZXJnZShbXSxkLmNoaWxkTm9kZXMpKX07dmFyIEljPW4uZm4ubG9hZDtuLmZuLmxvYWQ9ZnVuY3Rpb24oYSxiLGMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhJiZJYylyZXR1cm4gSWMuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBkLGUsZixnPXRoaXMsaD1hLmluZGV4T2YoXCIgXCIpO3JldHVybiBoPj0wJiYoZD1uLnRyaW0oYS5zbGljZShoKSksYT1hLnNsaWNlKDAsaCkpLG4uaXNGdW5jdGlvbihiKT8oYz1iLGI9dm9pZCAwKTpiJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmKGU9XCJQT1NUXCIpLGcubGVuZ3RoPjAmJm4uYWpheCh7dXJsOmEsdHlwZTplLGRhdGFUeXBlOlwiaHRtbFwiLGRhdGE6Yn0pLmRvbmUoZnVuY3Rpb24oYSl7Zj1hcmd1bWVudHMsZy5odG1sKGQ/bihcIjxkaXY+XCIpLmFwcGVuZChuLnBhcnNlSFRNTChhKSkuZmluZChkKTphKX0pLmNvbXBsZXRlKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGMsZnx8W2EucmVzcG9uc2VUZXh0LGIsYV0pfSksdGhpc30sbi5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZ3JlcChuLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH07dmFyIEpjPWEuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2Z1bmN0aW9uIEtjKGEpe3JldHVybiBuLmlzV2luZG93KGEpP2E6OT09PWEubm9kZVR5cGUmJmEuZGVmYXVsdFZpZXd9bi5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosaz1uLmNzcyhhLFwicG9zaXRpb25cIiksbD1uKGEpLG09e307XCJzdGF0aWNcIj09PWsmJihhLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIiksaD1sLm9mZnNldCgpLGY9bi5jc3MoYSxcInRvcFwiKSxpPW4uY3NzKGEsXCJsZWZ0XCIpLGo9KFwiYWJzb2x1dGVcIj09PWt8fFwiZml4ZWRcIj09PWspJiYoZitpKS5pbmRleE9mKFwiYXV0b1wiKT4tMSxqPyhkPWwucG9zaXRpb24oKSxnPWQudG9wLGU9ZC5sZWZ0KTooZz1wYXJzZUZsb2F0KGYpfHwwLGU9cGFyc2VGbG9hdChpKXx8MCksbi5pc0Z1bmN0aW9uKGIpJiYoYj1iLmNhbGwoYSxjLGgpKSxudWxsIT1iLnRvcCYmKG0udG9wPWIudG9wLWgudG9wK2cpLG51bGwhPWIubGVmdCYmKG0ubGVmdD1iLmxlZnQtaC5sZWZ0K2UpLFwidXNpbmdcImluIGI/Yi51c2luZy5jYWxsKGEsbSk6bC5jc3MobSl9fSxuLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKGEpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PWE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oYil7bi5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsYSxiKX0pO3ZhciBiLGMsZD10aGlzWzBdLGU9e3RvcDowLGxlZnQ6MH0sZj1kJiZkLm93bmVyRG9jdW1lbnQ7aWYoZilyZXR1cm4gYj1mLmRvY3VtZW50RWxlbWVudCxuLmNvbnRhaW5zKGIsZCk/KHR5cGVvZiBkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PVUmJihlPWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLGM9S2MoZikse3RvcDplLnRvcCtjLnBhZ2VZT2Zmc2V0LWIuY2xpZW50VG9wLGxlZnQ6ZS5sZWZ0K2MucGFnZVhPZmZzZXQtYi5jbGllbnRMZWZ0fSk6ZX0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgYSxiLGM9dGhpc1swXSxkPXt0b3A6MCxsZWZ0OjB9O3JldHVyblwiZml4ZWRcIj09PW4uY3NzKGMsXCJwb3NpdGlvblwiKT9iPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksbi5ub2RlTmFtZShhWzBdLFwiaHRtbFwiKXx8KGQ9YS5vZmZzZXQoKSksZC50b3ArPW4uY3NzKGFbMF0sXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxkLmxlZnQrPW4uY3NzKGFbMF0sXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCkpLHt0b3A6Yi50b3AtZC50b3Atbi5jc3MoYyxcIm1hcmdpblRvcFwiLCEwKSxsZWZ0OmIubGVmdC1kLmxlZnQtbi5jc3MoYyxcIm1hcmdpbkxlZnRcIiwhMCl9fX0sb2Zmc2V0UGFyZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vZmZzZXRQYXJlbnR8fEpjO3doaWxlKGEmJiFuLm5vZGVOYW1lKGEsXCJodG1sXCIpJiZcInN0YXRpY1wiPT09bi5jc3MoYSxcInBvc2l0aW9uXCIpKWE9YS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGF8fEpjfSl9fSksbi5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihiLGMpe3ZhciBkPVwicGFnZVlPZmZzZXRcIj09PWM7bi5mbltiXT1mdW5jdGlvbihlKXtyZXR1cm4gSih0aGlzLGZ1bmN0aW9uKGIsZSxmKXt2YXIgZz1LYyhiKTtyZXR1cm4gdm9pZCAwPT09Zj9nP2dbY106YltlXTp2b2lkKGc/Zy5zY3JvbGxUbyhkP2EucGFnZVhPZmZzZXQ6ZixkP2Y6YS5wYWdlWU9mZnNldCk6YltlXT1mKX0sYixlLGFyZ3VtZW50cy5sZW5ndGgsbnVsbCl9fSksbi5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihhLGIpe24uY3NzSG9va3NbYl09eWIoay5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGM/KGM9eGIoYSxiKSx2Yi50ZXN0KGMpP24oYSkucG9zaXRpb24oKVtiXStcInB4XCI6Yyk6dm9pZCAwfSl9KSxuLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxiKXtuLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2EsY29udGVudDpiLFwiXCI6XCJvdXRlclwiK2F9LGZ1bmN0aW9uKGMsZCl7bi5mbltkXT1mdW5jdGlvbihkLGUpe3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgmJihjfHxcImJvb2xlYW5cIiE9dHlwZW9mIGQpLGc9Y3x8KGQ9PT0hMHx8ZT09PSEwP1wibWFyZ2luXCI6XCJib3JkZXJcIik7cmV0dXJuIEoodGhpcyxmdW5jdGlvbihiLGMsZCl7dmFyIGU7cmV0dXJuIG4uaXNXaW5kb3coYik/Yi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIithXTo5PT09Yi5ub2RlVHlwZT8oZT1iLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChiLmJvZHlbXCJzY3JvbGxcIithXSxlW1wic2Nyb2xsXCIrYV0sYi5ib2R5W1wib2Zmc2V0XCIrYV0sZVtcIm9mZnNldFwiK2FdLGVbXCJjbGllbnRcIithXSkpOnZvaWQgMD09PWQ/bi5jc3MoYixjLGcpOm4uc3R5bGUoYixjLGQsZyl9LGIsZj9kOnZvaWQgMCxmLG51bGwpfX0pfSksbi5mbi5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RofSxuLmZuLmFuZFNlbGY9bi5mbi5hZGRCYWNrLFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gbn0pO3ZhciBMYz1hLmpRdWVyeSxNYz1hLiQ7cmV0dXJuIG4ubm9Db25mbGljdD1mdW5jdGlvbihiKXtyZXR1cm4gYS4kPT09biYmKGEuJD1NYyksYiYmYS5qUXVlcnk9PT1uJiYoYS5qUXVlcnk9TGMpLG59LHR5cGVvZiBiPT09VSYmKGEualF1ZXJ5PWEuJD1uKSxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9qcXVlcnktMi4xLjEuanMiLCIvKlxyXG4gKiBqUXVlcnkgRWFzaW5nIHYxLjMgLSBodHRwOi8vZ3NnZC5jby51ay9zYW5kYm94L2pxdWVyeS9lYXNpbmcvXHJcbiAqXHJcbiAqIFVzZXMgdGhlIGJ1aWx0IGluIGVhc2luZyBjYXBhYmlsaXRpZXMgYWRkZWQgSW4galF1ZXJ5IDEuMVxyXG4gKiB0byBvZmZlciBtdWx0aXBsZSBlYXNpbmcgb3B0aW9uc1xyXG4gKlxyXG4gKiBURVJNUyBPRiBVU0UgLSBqUXVlcnkgRWFzaW5nXHJcbiAqIFxyXG4gKiBPcGVuIHNvdXJjZSB1bmRlciB0aGUgQlNEIExpY2Vuc2UuIFxyXG4gKiBcclxuICogQ29weXJpZ2h0IMOCwqkgMjAwOCBHZW9yZ2UgTWNHaW5sZXkgU21pdGhcclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogXHJcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIFxyXG4gKiBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcbiAqIFxyXG4gKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBcclxuICogY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBcclxuICogb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgXHJcbiAqIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuICogXHJcbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGF1dGhvciBub3IgdGhlIG5hbWVzIG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIFxyXG4gKiBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4gKiBcclxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBcclxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GXHJcbiAqIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gKiAgQ09QWVJJR0hUIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLFxyXG4gKiAgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFXHJcbiAqICBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgXHJcbiAqIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXHJcbiAqICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBcclxuICogT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLiBcclxuICpcclxuKi9cclxuXHJcbi8vIHQ6IGN1cnJlbnQgdGltZSwgYjogYmVnSW5uSW5nIHZhbHVlLCBjOiBjaGFuZ2UgSW4gdmFsdWUsIGQ6IGR1cmF0aW9uXHJcbmpRdWVyeS5lYXNpbmdbJ2pzd2luZyddID0galF1ZXJ5LmVhc2luZ1snc3dpbmcnXTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5lYXNpbmcsXHJcbntcclxuXHRkZWY6ICdlYXNlT3V0UXVhZCcsXHJcblx0c3dpbmc6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcblx0XHQvL2FsZXJ0KGpRdWVyeS5lYXNpbmcuZGVmYXVsdCk7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmVhc2luZ1tqUXVlcnkuZWFzaW5nLmRlZl0oeCwgdCwgYiwgYywgZCk7XHJcblx0fSxcclxuXHRlYXNlSW5RdWFkOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIGMqKHQvPWQpKnQgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZU91dFF1YWQ6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcblx0XHRyZXR1cm4gLWMgKih0Lz1kKSoodC0yKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0aWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQgKyBiO1xyXG5cdFx0cmV0dXJuIC1jLzIgKiAoKC0tdCkqKHQtMikgLSAxKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5DdWJpYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiBjKih0Lz1kKSp0KnQgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZU91dEN1YmljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIGMqKCh0PXQvZC0xKSp0KnQgKyAxKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdGlmICgodC89ZC8yKSA8IDEpIHJldHVybiBjLzIqdCp0KnQgKyBiO1xyXG5cdFx0cmV0dXJuIGMvMiooKHQtPTIpKnQqdCArIDIpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VJblF1YXJ0OiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIGMqKHQvPWQpKnQqdCp0ICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRRdWFydDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiAtYyAqICgodD10L2QtMSkqdCp0KnQgLSAxKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdGlmICgodC89ZC8yKSA8IDEpIHJldHVybiBjLzIqdCp0KnQqdCArIGI7XHJcblx0XHRyZXR1cm4gLWMvMiAqICgodC09MikqdCp0KnQgLSAyKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5RdWludDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiBjKih0Lz1kKSp0KnQqdCp0ICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRRdWludDogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiBjKigodD10L2QtMSkqdCp0KnQqdCArIDEpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0aWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMip0KnQqdCp0KnQgKyBiO1xyXG5cdFx0cmV0dXJuIGMvMiooKHQtPTIpKnQqdCp0KnQgKyAyKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5TaW5lOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIC1jICogTWF0aC5jb3ModC9kICogKE1hdGguUEkvMikpICsgYyArIGI7XHJcblx0fSxcclxuXHRlYXNlT3V0U2luZTogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiBjICogTWF0aC5zaW4odC9kICogKE1hdGguUEkvMikpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcblx0XHRyZXR1cm4gLWMvMiAqIChNYXRoLmNvcyhNYXRoLlBJKnQvZCkgLSAxKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5FeHBvOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuICh0PT0wKSA/IGIgOiBjICogTWF0aC5wb3coMiwgMTAgKiAodC9kIC0gMSkpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRFeHBvOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuICh0PT1kKSA/IGIrYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQvZCkgKyAxKSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRFeHBvOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0aWYgKHQ9PTApIHJldHVybiBiO1xyXG5cdFx0aWYgKHQ9PWQpIHJldHVybiBiK2M7XHJcblx0XHRpZiAoKHQvPWQvMikgPCAxKSByZXR1cm4gYy8yICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSArIGI7XHJcblx0XHRyZXR1cm4gYy8yICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMikgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZUluQ2lyYzogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdHJldHVybiAtYyAqIChNYXRoLnNxcnQoMSAtICh0Lz1kKSp0KSAtIDEpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRDaXJjOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtICh0PXQvZC0xKSp0KSArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0aWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIC1jLzIgKiAoTWF0aC5zcXJ0KDEgLSB0KnQpIC0gMSkgKyBiO1xyXG5cdFx0cmV0dXJuIGMvMiAqIChNYXRoLnNxcnQoMSAtICh0LT0yKSp0KSArIDEpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VJbkVsYXN0aWM6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcblx0XHR2YXIgcz0xLjcwMTU4O3ZhciBwPTA7dmFyIGE9YztcclxuXHRcdGlmICh0PT0wKSByZXR1cm4gYjsgIGlmICgodC89ZCk9PTEpIHJldHVybiBiK2M7ICBpZiAoIXApIHA9ZCouMztcclxuXHRcdGlmIChhIDwgTWF0aC5hYnMoYykpIHsgYT1jOyB2YXIgcz1wLzQ7IH1cclxuXHRcdGVsc2UgdmFyIHMgPSBwLygyKk1hdGguUEkpICogTWF0aC5hc2luIChjL2EpO1xyXG5cdFx0cmV0dXJuIC0oYSpNYXRoLnBvdygyLDEwKih0LT0xKSkgKiBNYXRoLnNpbiggKHQqZC1zKSooMipNYXRoLlBJKS9wICkpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0dmFyIHM9MS43MDE1ODt2YXIgcD0wO3ZhciBhPWM7XHJcblx0XHRpZiAodD09MCkgcmV0dXJuIGI7ICBpZiAoKHQvPWQpPT0xKSByZXR1cm4gYitjOyAgaWYgKCFwKSBwPWQqLjM7XHJcblx0XHRpZiAoYSA8IE1hdGguYWJzKGMpKSB7IGE9YzsgdmFyIHM9cC80OyB9XHJcblx0XHRlbHNlIHZhciBzID0gcC8oMipNYXRoLlBJKSAqIE1hdGguYXNpbiAoYy9hKTtcclxuXHRcdHJldHVybiBhKk1hdGgucG93KDIsLTEwKnQpICogTWF0aC5zaW4oICh0KmQtcykqKDIqTWF0aC5QSSkvcCApICsgYyArIGI7XHJcblx0fSxcclxuXHRlYXNlSW5PdXRFbGFzdGljOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0dmFyIHM9MS43MDE1ODt2YXIgcD0wO3ZhciBhPWM7XHJcblx0XHRpZiAodD09MCkgcmV0dXJuIGI7ICBpZiAoKHQvPWQvMik9PTIpIHJldHVybiBiK2M7ICBpZiAoIXApIHA9ZCooLjMqMS41KTtcclxuXHRcdGlmIChhIDwgTWF0aC5hYnMoYykpIHsgYT1jOyB2YXIgcz1wLzQ7IH1cclxuXHRcdGVsc2UgdmFyIHMgPSBwLygyKk1hdGguUEkpICogTWF0aC5hc2luIChjL2EpO1xyXG5cdFx0aWYgKHQgPCAxKSByZXR1cm4gLS41KihhKk1hdGgucG93KDIsMTAqKHQtPTEpKSAqIE1hdGguc2luKCAodCpkLXMpKigyKk1hdGguUEkpL3AgKSkgKyBiO1xyXG5cdFx0cmV0dXJuIGEqTWF0aC5wb3coMiwtMTAqKHQtPTEpKSAqIE1hdGguc2luKCAodCpkLXMpKigyKk1hdGguUEkpL3AgKSouNSArIGMgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZUluQmFjazogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQsIHMpIHtcclxuXHRcdGlmIChzID09IHVuZGVmaW5lZCkgcyA9IDEuNzAxNTg7XHJcblx0XHRyZXR1cm4gYyoodC89ZCkqdCooKHMrMSkqdCAtIHMpICsgYjtcclxuXHR9LFxyXG5cdGVhc2VPdXRCYWNrOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCwgcykge1xyXG5cdFx0aWYgKHMgPT0gdW5kZWZpbmVkKSBzID0gMS43MDE1ODtcclxuXHRcdHJldHVybiBjKigodD10L2QtMSkqdCooKHMrMSkqdCArIHMpICsgMSkgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZUluT3V0QmFjazogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQsIHMpIHtcclxuXHRcdGlmIChzID09IHVuZGVmaW5lZCkgcyA9IDEuNzAxNTg7IFxyXG5cdFx0aWYgKCh0Lz1kLzIpIDwgMSkgcmV0dXJuIGMvMioodCp0KigoKHMqPSgxLjUyNSkpKzEpKnQgLSBzKSkgKyBiO1xyXG5cdFx0cmV0dXJuIGMvMiooKHQtPTIpKnQqKCgocyo9KDEuNTI1KSkrMSkqdCArIHMpICsgMikgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZUluQm91bmNlOiBmdW5jdGlvbiAoeCwgdCwgYiwgYywgZCkge1xyXG5cdFx0cmV0dXJuIGMgLSBqUXVlcnkuZWFzaW5nLmVhc2VPdXRCb3VuY2UgKHgsIGQtdCwgMCwgYywgZCkgKyBiO1xyXG5cdH0sXHJcblx0ZWFzZU91dEJvdW5jZTogZnVuY3Rpb24gKHgsIHQsIGIsIGMsIGQpIHtcclxuXHRcdGlmICgodC89ZCkgPCAoMS8yLjc1KSkge1xyXG5cdFx0XHRyZXR1cm4gYyooNy41NjI1KnQqdCkgKyBiO1xyXG5cdFx0fSBlbHNlIGlmICh0IDwgKDIvMi43NSkpIHtcclxuXHRcdFx0cmV0dXJuIGMqKDcuNTYyNSoodC09KDEuNS8yLjc1KSkqdCArIC43NSkgKyBiO1xyXG5cdFx0fSBlbHNlIGlmICh0IDwgKDIuNS8yLjc1KSkge1xyXG5cdFx0XHRyZXR1cm4gYyooNy41NjI1Kih0LT0oMi4yNS8yLjc1KSkqdCArIC45Mzc1KSArIGI7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gYyooNy41NjI1Kih0LT0oMi42MjUvMi43NSkpKnQgKyAuOTg0Mzc1KSArIGI7XHJcblx0XHR9XHJcblx0fSxcclxuXHRlYXNlSW5PdXRCb3VuY2U6IGZ1bmN0aW9uICh4LCB0LCBiLCBjLCBkKSB7XHJcblx0XHRpZiAodCA8IGQvMikgcmV0dXJuIGpRdWVyeS5lYXNpbmcuZWFzZUluQm91bmNlICh4LCB0KjIsIDAsIGMsIGQpICogLjUgKyBiO1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5lYXNpbmcuZWFzZU91dEJvdW5jZSAoeCwgdCoyLWQsIDAsIGMsIGQpICogLjUgKyBjKi41ICsgYjtcclxuXHR9XHJcbn0pO1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL2pxdWVyeS5lYXNpbmcuanMiLCIvKipcclxuICogZGVtby5qc1xyXG4gKiBodHRwOi8vd3d3LmNvZHJvcHMuY29tXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cclxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuICogXHJcbiAqIENvcHlyaWdodCAyMDE3LCBDb2Ryb3BzXHJcbiAqIGh0dHA6Ly93d3cuY29kcm9wcy5jb21cclxuICovXHJcbntcclxuXHRzZXRUaW1lb3V0KCgpID0+IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncmVuZGVyJyksIDYwKTtcclxuXHRjb25zdCBuYXZkZW1vcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbmF2LmRlbW9zID4gLmRlbW8nKSk7XHJcblx0Y29uc3QgdG90YWwgPSBuYXZkZW1vcy5sZW5ndGg7XHJcblx0Y29uc3QgY3VycmVudCA9IG5hdmRlbW9zLmZpbmRJbmRleChlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbW8tLWN1cnJlbnQnKSk7XHJcblx0Y29uc3QgbmF2aWdhdGUgPSAobGlua0VsKSA9PiB7XHJcblx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3JlbmRlcicpO1xyXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgKCkgPT4gd2luZG93LmxvY2F0aW9uID0gbGlua0VsLmhyZWYpO1xyXG5cdH07XHJcblx0bmF2ZGVtb3MuZm9yRWFjaChsaW5rID0+IGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcclxuXHRcdGV2LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRuYXZpZ2F0ZShldi50YXJnZXQpO1xyXG5cdH0pKTtcclxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2KSA9PiB7XHJcblx0XHRjb25zdCBrZXlDb2RlID0gZXYua2V5Q29kZSB8fCBldi53aGljaDtcclxuXHRcdGxldCBsaW5rRWw7XHJcblx0XHRpZiAoIGtleUNvZGUgPT09IDM3ICkge1xyXG5cdFx0XHRsaW5rRWwgPSBjdXJyZW50ID4gMCA/IG5hdmRlbW9zW2N1cnJlbnQtMV0gOiBuYXZkZW1vc1t0b3RhbC0xXTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKCBrZXlDb2RlID09PSAzOSApIHtcclxuXHRcdFx0bGlua0VsID0gY3VycmVudCA8IHRvdGFsLTEgPyBuYXZkZW1vc1tjdXJyZW50KzFdIDogbmF2ZGVtb3NbMF07XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0bmF2aWdhdGUobGlua0VsKTtcclxuXHR9KTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogZGVtby1tb2hlLmpzXHJcbiAqIGh0dHA6Ly93d3cuY29kcm9wcy5jb21cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG4gKiBcclxuICogQ29weXJpZ2h0IDIwMTcsIENvZHJvcHNcclxuICogaHR0cDovL3d3dy5jb2Ryb3BzLmNvbVxyXG4gKi9cclxue1xyXG5cdGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudSA+IC5tZW51X19pdGVtJykpO1xyXG5cclxuXHRjbGFzcyBJdGVtIHtcclxuXHRcdGNvbnN0cnVjdG9yKGVsKSB7XHJcblx0XHRcdHRoaXMuRE9NID0ge307XHJcblx0XHRcdHRoaXMuRE9NLmVsID0gZWw7XHJcblx0XHRcdHRoaXMuRE9NLm5hbWUgPSBlbC5xdWVyeVNlbGVjdG9yKCcubWVudV9faXRlbS1uYW1lJyk7XHJcblx0XHRcdGNoYXJtaW5nKHRoaXMuRE9NLm5hbWUpO1xyXG5cdFx0XHR0aGlzLkRPTS5uYW1lTGV0dGVycyA9IEFycmF5LmZyb20odGhpcy5ET00ubmFtZS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJykpO1xyXG5cdFx0XHR0aGlzLmluaXRFdmVudHMoKTtcclxuXHRcdH1cclxuXHRcdGluaXRFdmVudHMoKSB7XHJcblx0XHRcdHRoaXMubW91c2VlbnRlckZuID0gKCkgPT4gdGhpcy5tb3VzZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHR0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcclxuXHRcdFx0XHRhbmltZS5yZW1vdmUodGhpcy5ET00ubmFtZUxldHRlcnMpO1xyXG5cdFx0XHRcdGFuaW1lKHtcclxuXHRcdFx0XHRcdHRhcmdldHM6IHRoaXMuRE9NLm5hbWVMZXR0ZXJzLFxyXG5cdFx0XHRcdFx0ZHVyYXRpb246IDcwMCxcclxuXHRcdFx0XHRcdGVhc2luZzogWzAuNywwLDAuMywxXSxcclxuXHRcdFx0XHRcdHNjYWxlOiAodCxpKSA9PiBbMSxhbmltZS5yYW5kb20oMCwxKSA/IDAuODoxLjRdLFxyXG5cdFx0XHRcdFx0dHJhbnNsYXRlWDogKHQsaSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBlbEJvdW5kcyA9IHRoaXMuRE9NLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdFx0XHRcdFx0XHRjb25zdCB4MSA9IGVsQm91bmRzLmxlZnQgKyBlbEJvdW5kcy53aWR0aC8yO1xyXG5cdFx0XHRcdFx0XHRjb25zdCB5MSA9IGVsQm91bmRzLnRvcCArIGVsQm91bmRzLmhlaWdodC8yO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0Y29uc3QgdGFyZ2V0Qm91bmRzID0gdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRcdFx0Y29uc3QgeDIgPSB0YXJnZXRCb3VuZHMubGVmdCArIHRhcmdldEJvdW5kcy53aWR0aC8yO1xyXG5cdFx0XHRcdFx0XHRjb25zdCB5MiA9IHRhcmdldEJvdW5kcy50b3AgKyB0YXJnZXRCb3VuZHMuaGVpZ2h0LzI7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zdCBkaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyLXgxLDIpICsgTWF0aC5wb3coeTIteTEsMikpO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBtYXhEaXN0ID0gTWF0aC5zcXJ0KE1hdGgucG93KGVsQm91bmRzLmxlZnQteDEsMikgKyBNYXRoLnBvdyhlbEJvdW5kcy50b3AteTEsMikpO1xyXG5cdFx0XHRcdFx0XHRjb25zdCBtYXhUWCA9IHgyPHgxPy0yNTA6MjUwO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIG1heFRYL21heERpc3QqZGlzdDtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHR0cmFuc2xhdGVZOiAodCxpKSA9PiBbMCxhbmltZS5yYW5kb20oLTQwLDQwKV0sXHJcblx0XHRcdFx0XHRyb3RhdGVaOiAodCxpKSA9PiBbMCxhbmltZS5yYW5kb20oLTIwLDIwKV0sXHJcblx0XHRcdFx0XHRvcGFjaXR5OiAodCxpKSA9PiAwLjIsXHJcblx0XHRcdFx0fSk7XHRcclxuXHRcdFx0fSwgNTApO1xyXG5cclxuXHRcdFx0dGhpcy5tb3VzZWxlYXZlRm4gPSAoKSA9PiB7XHJcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMubW91c2VUaW1lb3V0KTtcclxuXHRcdFx0XHRpZiggIXRoaXMuaXNBY3RpdmUgKSByZXR1cm47XHJcblx0XHRcdFx0dGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdGFuaW1lLnJlbW92ZSh0aGlzLkRPTS5uYW1lTGV0dGVycyk7XHJcblx0XHRcdFx0YW5pbWUoe1xyXG5cdFx0XHRcdFx0dGFyZ2V0czogdGhpcy5ET00ubmFtZUxldHRlcnMsXHJcblx0XHRcdFx0XHRkdXJhdGlvbjogNzAwLFxyXG5cdFx0XHRcdFx0ZWFzaW5nOiBbMC43LDAsMC4zLDFdLFxyXG5cdFx0XHRcdFx0c2NhbGU6IDEsXHJcblx0XHRcdFx0XHR0cmFuc2xhdGVYOiAwLFxyXG5cdFx0XHRcdFx0dHJhbnNsYXRlWTogMCxcclxuXHRcdFx0XHRcdHJvdGF0ZVo6IDAsXHJcblx0XHRcdFx0XHRvcGFjaXR5OiAxXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR0aGlzLkRPTS5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5tb3VzZWVudGVyRm4pO1xyXG5cdFx0XHR0aGlzLkRPTS5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5tb3VzZWVudGVyRm4pO1xyXG5cdFx0XHR0aGlzLkRPTS5lbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5tb3VzZWxlYXZlRm4pO1xyXG5cdFx0XHR0aGlzLkRPTS5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMubW91c2VsZWF2ZUZuKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRpdGVtcy5mb3JFYWNoKGl0ZW0gPT4gbmV3IEl0ZW0oaXRlbSkpO1xyXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9uYXYtYW5pbWUuanMiLCIvKiFcclxuICogUmV0aW5hLmpzIHYxLjEuMFxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxMyBJbXVsdXMsIExMQ1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICpcclxuICogUmV0aW5hLmpzIGlzIGFuIG9wZW4gc291cmNlIHNjcmlwdCB0aGF0IG1ha2VzIGl0IGVhc3kgdG8gc2VydmVcclxuICogaGlnaC1yZXNvbHV0aW9uIGltYWdlcyB0byBkZXZpY2VzIHdpdGggcmV0aW5hIGRpc3BsYXlzLlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7dmFyIHJvb3Q9dHlwZW9mIGV4cG9ydHM9PVwidW5kZWZpbmVkXCI/d2luZG93OmV4cG9ydHM7dmFyIGNvbmZpZz17Y2hlY2tfbWltZV90eXBlOnRydWV9O3Jvb3QuUmV0aW5hPVJldGluYTtmdW5jdGlvbiBSZXRpbmEoKXt9UmV0aW5hLmNvbmZpZ3VyZT1mdW5jdGlvbihvcHRpb25zKXtpZihvcHRpb25zPT1udWxsKW9wdGlvbnM9e307Zm9yKHZhciBwcm9wIGluIG9wdGlvbnMpY29uZmlnW3Byb3BdPW9wdGlvbnNbcHJvcF19O1JldGluYS5pbml0PWZ1bmN0aW9uKGNvbnRleHQpe2lmKGNvbnRleHQ9PW51bGwpY29udGV4dD1yb290O3ZhciBleGlzdGluZ19vbmxvYWQ9Y29udGV4dC5vbmxvYWR8fG5ldyBGdW5jdGlvbjtjb250ZXh0Lm9ubG9hZD1mdW5jdGlvbigpe3ZhciBpbWFnZXM9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIikscmV0aW5hSW1hZ2VzPVtdLGksaW1hZ2U7Zm9yKGk9MDtpPGltYWdlcy5sZW5ndGg7aSsrKXtpbWFnZT1pbWFnZXNbaV07cmV0aW5hSW1hZ2VzLnB1c2gobmV3IFJldGluYUltYWdlKGltYWdlKSl9ZXhpc3Rpbmdfb25sb2FkKCl9fTtSZXRpbmEuaXNSZXRpbmE9ZnVuY3Rpb24oKXt2YXIgbWVkaWFRdWVyeT1cIigtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuNSksICAgICAgICAgICAgICAgICAgICAgIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuNSksICAgICAgICAgICAgICAgICAgICAgICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzLzIpLCAgICAgICAgICAgICAgICAgICAgICAobWluLXJlc29sdXRpb246IDEuNWRwcHgpXCI7aWYocm9vdC5kZXZpY2VQaXhlbFJhdGlvPjEpcmV0dXJuIHRydWU7aWYocm9vdC5tYXRjaE1lZGlhJiZyb290Lm1hdGNoTWVkaWEobWVkaWFRdWVyeSkubWF0Y2hlcylyZXR1cm4gdHJ1ZTtyZXR1cm4gZmFsc2V9O3Jvb3QuUmV0aW5hSW1hZ2VQYXRoPVJldGluYUltYWdlUGF0aDtmdW5jdGlvbiBSZXRpbmFJbWFnZVBhdGgocGF0aCxhdF8yeF9wYXRoKXt0aGlzLnBhdGg9cGF0aDtpZih0eXBlb2YgYXRfMnhfcGF0aCE9PVwidW5kZWZpbmVkXCImJmF0XzJ4X3BhdGghPT1udWxsKXt0aGlzLmF0XzJ4X3BhdGg9YXRfMnhfcGF0aDt0aGlzLnBlcmZvcm1fY2hlY2s9ZmFsc2V9ZWxzZXt0aGlzLmF0XzJ4X3BhdGg9cGF0aC5yZXBsYWNlKC9cXC5cXHcrJC8sZnVuY3Rpb24obWF0Y2gpe3JldHVyblwiQDJ4XCIrbWF0Y2h9KTt0aGlzLnBlcmZvcm1fY2hlY2s9dHJ1ZX19UmV0aW5hSW1hZ2VQYXRoLmNvbmZpcm1lZF9wYXRocz1bXTtSZXRpbmFJbWFnZVBhdGgucHJvdG90eXBlLmlzX2V4dGVybmFsPWZ1bmN0aW9uKCl7cmV0dXJuISEodGhpcy5wYXRoLm1hdGNoKC9eaHR0cHM/XFw6L2kpJiYhdGhpcy5wYXRoLm1hdGNoKFwiLy9cIitkb2N1bWVudC5kb21haW4pKX07UmV0aW5hSW1hZ2VQYXRoLnByb3RvdHlwZS5jaGVja18yeF92YXJpYW50PWZ1bmN0aW9uKGNhbGxiYWNrKXt2YXIgaHR0cCx0aGF0PXRoaXM7aWYodGhpcy5pc19leHRlcm5hbCgpKXtyZXR1cm4gY2FsbGJhY2soZmFsc2UpfWVsc2UgaWYoIXRoaXMucGVyZm9ybV9jaGVjayYmdHlwZW9mIHRoaXMuYXRfMnhfcGF0aCE9PVwidW5kZWZpbmVkXCImJnRoaXMuYXRfMnhfcGF0aCE9PW51bGwpe3JldHVybiBjYWxsYmFjayh0cnVlKX1lbHNlIGlmKHRoaXMuYXRfMnhfcGF0aCBpbiBSZXRpbmFJbWFnZVBhdGguY29uZmlybWVkX3BhdGhzKXtyZXR1cm4gY2FsbGJhY2sodHJ1ZSl9ZWxzZXtodHRwPW5ldyBYTUxIdHRwUmVxdWVzdDtodHRwLm9wZW4oXCJIRUFEXCIsdGhpcy5hdF8yeF9wYXRoKTtodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKGh0dHAucmVhZHlTdGF0ZSE9NCl7cmV0dXJuIGNhbGxiYWNrKGZhbHNlKX1pZihodHRwLnN0YXR1cz49MjAwJiZodHRwLnN0YXR1czw9Mzk5KXtpZihjb25maWcuY2hlY2tfbWltZV90eXBlKXt2YXIgdHlwZT1odHRwLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO2lmKHR5cGU9PW51bGx8fCF0eXBlLm1hdGNoKC9eaW1hZ2UvaSkpe3JldHVybiBjYWxsYmFjayhmYWxzZSl9fVJldGluYUltYWdlUGF0aC5jb25maXJtZWRfcGF0aHMucHVzaCh0aGF0LmF0XzJ4X3BhdGgpO3JldHVybiBjYWxsYmFjayh0cnVlKX1lbHNle3JldHVybiBjYWxsYmFjayhmYWxzZSl9fTtodHRwLnNlbmQoKX19O2Z1bmN0aW9uIFJldGluYUltYWdlKGVsKXt0aGlzLmVsPWVsO3RoaXMucGF0aD1uZXcgUmV0aW5hSW1hZ2VQYXRoKHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwic3JjXCIpLHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1hdDJ4XCIpKTt2YXIgdGhhdD10aGlzO3RoaXMucGF0aC5jaGVja18yeF92YXJpYW50KGZ1bmN0aW9uKGhhc1ZhcmlhbnQpe2lmKGhhc1ZhcmlhbnQpdGhhdC5zd2FwKCl9KX1yb290LlJldGluYUltYWdlPVJldGluYUltYWdlO1JldGluYUltYWdlLnByb3RvdHlwZS5zd2FwPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoPT1cInVuZGVmaW5lZFwiKXBhdGg9dGhpcy5wYXRoLmF0XzJ4X3BhdGg7dmFyIHRoYXQ9dGhpcztmdW5jdGlvbiBsb2FkKCl7aWYoIXRoYXQuZWwuY29tcGxldGUpe3NldFRpbWVvdXQobG9hZCw1KX1lbHNle3RoYXQuZWwuc2V0QXR0cmlidXRlKFwid2lkdGhcIix0aGF0LmVsLm9mZnNldFdpZHRoKTt0aGF0LmVsLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLHRoYXQuZWwub2Zmc2V0SGVpZ2h0KTt0aGF0LmVsLnNldEF0dHJpYnV0ZShcInNyY1wiLHBhdGgpfX1sb2FkKCl9O2lmKFJldGluYS5pc1JldGluYSgpKXtSZXRpbmEuaW5pdChyb290KX19KSgpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9yZXRpbmEtMS4xLjAubWluLmpzIiwiLypcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcclxufCBNZWxvbkhUTUw1IC0gUm95YWwgUHJlbG9hZGVyICAgICAgICAgICAgIHxcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcclxufCBAYXV0aG9yOiAgTGVlIExlIChsZWVAbWVsb25odG1sNS5jb20pICAgIHxcclxufCBAdmVyc2lvbjogMi4wNiAoMTEgQXByaWwgMjAxNSkgICAgICAgICAgIHxcclxufCBAd2Vic2l0ZTogd3d3Lm1lbG9uaHRtbDUuY29tICAgICAgICAgICAgIHxcclxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcclxuKi9cclxuXHJcbi8qKlxyXG4gIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9kb2N1bWVudC5jb29raWUpXHJcbiAgZG9jQ29va2llcy5zZXRJdGVtKG5hbWUsIHZhbHVlWywgZW5kWywgcGF0aFssIGRvbWFpblssIHNlY3VyZV1dXV0pXHJcbiAgZG9jQ29va2llcy5nZXRJdGVtKG5hbWUpXHJcbiAgZG9jQ29va2llcy5yZW1vdmVJdGVtKG5hbWVbLCBwYXRoXSlcclxuICBkb2NDb29raWVzLmhhc0l0ZW0obmFtZSlcclxuKi9cclxudmFyIGRvY0Nvb2tpZXM9e2dldEl0ZW06ZnVuY3Rpb24oYSl7cmV0dXJuIWF8fCF0aGlzLmhhc0l0ZW0oYSk/bnVsbDp1bmVzY2FwZShkb2N1bWVudC5jb29raWUucmVwbGFjZShSZWdFeHAoXCIoPzpefC4qO1xcXFxzKilcIitlc2NhcGUoYSkucmVwbGFjZSgvW1xcLVxcLlxcK1xcKl0vZyxcIlxcXFwkJlwiKStcIlxcXFxzKlxcXFw9XFxcXHMqKCg/OlteO10oPyE7KSkqW147XT8pLipcIiksXCIkMVwiKSl9LHNldEl0ZW06ZnVuY3Rpb24oYSxjLGIsZSxmLGcpe2lmKGEmJiEvXig/OmV4cGlyZXN8bWF4XFwtYWdlfHBhdGh8ZG9tYWlufHNlY3VyZSkkL2kudGVzdChhKSl7dmFyIGQ9XCJcIjtpZihiKXN3aXRjaChiLmNvbnN0cnVjdG9yKXtjYXNlIE51bWJlcjpkPUluZmluaXR5PT09Yj9cIjsgZXhwaXJlcz1UdWUsIDE5IEphbiAyMDM4IDAzOjE0OjA3IEdNVFwiOlwiOyBtYXgtYWdlPVwiK2I7YnJlYWs7Y2FzZSBTdHJpbmc6ZD1cIjsgZXhwaXJlcz1cIitiO2JyZWFrO2Nhc2UgRGF0ZTpkPVwiOyBleHBpcmVzPVwiK2IudG9HTVRTdHJpbmcoKX1kb2N1bWVudC5jb29raWU9XHJcbmVzY2FwZShhKStcIj1cIitlc2NhcGUoYykrZCsoZj9cIjsgZG9tYWluPVwiK2Y6XCJcIikrKGU/XCI7IHBhdGg9XCIrZTpcIlwiKSsoZz9cIjsgc2VjdXJlXCI6XCJcIil9fSxyZW1vdmVJdGVtOmZ1bmN0aW9uKGEsYyl7YSYmdGhpcy5oYXNJdGVtKGEpJiYoZG9jdW1lbnQuY29va2llPWVzY2FwZShhKStcIj07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVRcIisoYz9cIjsgcGF0aD1cIitjOlwiXCIpKX0saGFzSXRlbTpmdW5jdGlvbihhKXtyZXR1cm4gUmVnRXhwKFwiKD86Xnw7XFxcXHMqKVwiK2VzY2FwZShhKS5yZXBsYWNlKC9bXFwtXFwuXFwrXFwqXS9nLFwiXFxcXCQmXCIpK1wiXFxcXHMqXFxcXD1cIikudGVzdChkb2N1bWVudC5jb29raWUpfX07XHJcblxyXG52YXIgSlE9alF1ZXJ5O3dpbmRvdy5yZXF1ZXN0QW5pbUZyYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHx3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGZ1bmN0aW9uKGEpe3dpbmRvdy5zZXRUaW1lb3V0KGEsMUUzLzYwKX19KCk7XHJcbndpbmRvdy50cmFuc2l0aW9uRW5kPWZ1bmN0aW9uKGEsYyl7dmFyIGI9ITEsZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO0pRKFtcInRyYW5zaXRpb25cIixcIldlYmtpdFRyYW5zaXRpb25cIixcIk1velRyYW5zaXRpb25cIixcIm1zVHJhbnNpdGlvblwiXSkuZWFjaChmdW5jdGlvbihhLGMpe2lmKHZvaWQgMCE9PWQuc3R5bGVbY10pcmV0dXJuIGI9ITAsITF9KTtiP2EuYmluZChcIndlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmRcIixmdW5jdGlvbihiKXthLnVuYmluZChcIndlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgTVNUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmRcIik7YyhiLGEpfSk6c2V0VGltZW91dChmdW5jdGlvbigpe2MobnVsbCxhKX0sMCk7cmV0dXJuIGF9O1xyXG52YXIgUm95YWxfUHJlbG9hZGVyPXtfb3ZlcmxheTpudWxsLF9sb2FkZXI6bnVsbCxfbmFtZTpudWxsLF9wZXJjZW50YWdlOm51bGwsX29uX2NvbXBsZXRlOm51bGwsX3RleHRfbG9hZGVyOm51bGwsX3RleHRfbG9hZGVyX292ZXJsYXk6bnVsbCxfbG9nb19sb2FkZXI6bnVsbCxfbG9nb19sb2FkZXJfbWV0ZXI6bnVsbCxfdG90YWw6MCxfbG9hZGVkOjAsX2ltYWdlX3F1ZXVlOltdLF9wZXJjZW50YWdlX2xvYWRlZDowLF9tb2RlOlwibnVtYmVyXCIsX3RleHQ6XCJsb2FkaW5nLi4uXCIsX3RleHRfY29sb3VyOlwiI0ZGRkZGRlwiLF9pbWFnZXM6W10sX3Nob3dfcHJvZ3Jlc3M6ITAsX3Nob3dfcGVyY2VudGFnZTohMCxfYmFja2dyb3VuZDpcIiMwMDAwMDBcIixfbG9nbzpcIlwiLF9sb2dvX3NpemU6WzgwLDgwXSxfY29va2llOiExLF90aW1lb3V0OjEwLF9pbml0OmZ1bmN0aW9uKCl7SlEoXCJpbWdcIikuZWFjaChmdW5jdGlvbihhKXtKUSh0aGlzKS5hdHRyKFwic3JjXCIpJiZSb3lhbF9QcmVsb2FkZXIuX2ltYWdlcy5wdXNoKEpRKHRoaXMpLmF0dHIoXCJzcmNcIikpfSk7XHJcbmlmKFJveWFsX1ByZWxvYWRlci5fY29va2llKXtpZihkb2NDb29raWVzLmdldEl0ZW0oXCJtZWxvbmh0bWw1X3JveWFsX3ByZWxvYWRlcl9cIitSb3lhbF9QcmVsb2FkZXIuX2Nvb2tpZSkpe0pRKFwiI3JveWFsX3ByZWxvYWRlclwiKS5yZW1vdmUoKTtKUShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhcInJveWFsX3ByZWxvYWRlclwiKTtyZXR1cm59ZG9jQ29va2llcy5zZXRJdGVtKFwibWVsb25odG1sNV9yb3lhbF9wcmVsb2FkZXJfXCIrUm95YWxfUHJlbG9hZGVyLl9jb29raWUsKG5ldyBEYXRlKS5nZXRUaW1lKCksSW5maW5pdHkpfVJveWFsX1ByZWxvYWRlci5fdG90YWw9Um95YWxfUHJlbG9hZGVyLl9pbWFnZXMubGVuZ3RoO1JveWFsX1ByZWxvYWRlci5fYnVpbGQoKTtSb3lhbF9QcmVsb2FkZXIuX2xvYWQoKX0sX2J1aWxkOmZ1bmN0aW9uKCl7dGhpcy5fb3ZlcmxheT1KUShcIiNyb3lhbF9wcmVsb2FkZXJcIik7dGhpcy5fb3ZlcmxheS5sZW5ndGh8fCh0aGlzLl9vdmVybGF5PUpRKFwiPGRpdj5cIikuYXR0cihcImlkXCIsXHJcblwicm95YWxfcHJlbG9hZGVyXCIpLnByZXBlbmRUbyhKUShkb2N1bWVudC5ib2R5KSkpO3RoaXMuX292ZXJsYXkuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfXCIrdGhpcy5fbW9kZSk7XCJsaW5lXCIhPT10aGlzLl9tb2RlJiZ0aGlzLl9vdmVybGF5LmNzcyhcImJhY2tncm91bmQtY29sb3JcIix0aGlzLl9iYWNrZ3JvdW5kKTtzd2l0Y2godGhpcy5fbW9kZSl7Y2FzZSBcIm51bWJlclwiOnZhciBhPXRoaXMuX2hleFRvUmdiKHRoaXMuX3RleHRfY29sb3VyKTt0aGlzLl9wZXJjZW50YWdlPUpRKFwiPGRpdj5cIikuaHRtbChcIjxkaXY+PC9kaXY+PHNwYW4+PC9zcGFuPlwiKS5jc3Moe2NvbG9yOnRoaXMuX3RleHRfY29sb3VyLFwiYm9yZGVyLWNvbG9yXCI6YT9cInJnYmEoXCIrYS5yK1wiLCBcIithLmcrXCIsIFwiK2EuYitcIiwgMC43KVwiOnRoaXMuX3RleHRfY29sb3VyfSkuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfcGVyY2VudGFnZVwiKS5hcHBlbmRUbyh0aGlzLl9vdmVybGF5KTt0aGlzLl9wZXJjZW50YWdlLmNoaWxkcmVuKFwiZGl2XCIpLmNzcyhcImJvcmRlci1sZWZ0LWNvbG9yXCIsXHJcbnRoaXMuX3RleHRfY29sb3VyKTticmVhaztjYXNlIFwidGV4dFwiOnRoaXMuX3RleHRfbG9hZGVyPUpRKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfbG9hZGVyXCIpLnRleHQodGhpcy5fdGV4dCkuY3NzKFwiY29sb3JcIix0aGlzLl90ZXh0X2NvbG91cikuYXBwZW5kVG8odGhpcy5fb3ZlcmxheSk7dGhpcy5fdGV4dF9sb2FkZXJfb3ZlcmxheT1KUShcIjxkaXY+XCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIix0aGlzLl9iYWNrZ3JvdW5kKS5hcHBlbmRUbyh0aGlzLl90ZXh0X2xvYWRlcik7YnJlYWs7Y2FzZSBcInNjYWxlX3RleHRcIjpmb3IodmFyIGE9XCJcIixjPTA7Yzx0aGlzLl90ZXh0Lmxlbmd0aDtjKyspYSs9XCI8c3Bhbj5cIit0aGlzLl9odG1sZW50aXRpZXModGhpcy5fdGV4dC5jaGFyQXQoYykpK1wiPC9zcGFuPlwiO3RoaXMuX3RleHRfbG9hZGVyPUpRKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfbG9hZGVyXCIpLmh0bWwoYSkuY3NzKFwiY29sb3JcIix0aGlzLl90ZXh0X2NvbG91cikuYXBwZW5kVG8odGhpcy5fb3ZlcmxheSk7XHJcbmJyZWFrO2Nhc2UgXCJsb2dvXCI6dGhpcy5fbG9nb19sb2FkZXI9SlEoXCI8ZGl2PlwiKS5jc3Moe3dpZHRoOnRoaXMuX2xvZ29fc2l6ZVswXSxoZWlnaHQ6dGhpcy5fbG9nb19zaXplWzFdLFwibWFyZ2luLWxlZnRcIjp0aGlzLl9sb2dvX3NpemVbMF0vMiotMSxcIm1hcmdpbi10b3BcIjp0aGlzLl9sb2dvX3NpemVbMV0vMiotMSxcImJhY2tncm91bmQtaW1hZ2VcIjondXJsKFwiJyt0aGlzLl9sb2dvKydcIiknfSkuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfbG9hZGVyXCIpLmFwcGVuZFRvKHRoaXMuX292ZXJsYXkpO3RoaXMuX2xvZ29fbG9hZGVyX21ldGVyPUpRKFwiPGRpdj5cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLHRoaXMuX2JhY2tncm91bmQpLmFwcGVuZFRvKHRoaXMuX2xvZ29fbG9hZGVyKTt0aGlzLl9zaG93X3Byb2dyZXNzJiYodGhpcy5fcGVyY2VudGFnZT1KUShcIjxkaXY+XCIpLmNzcyh7Y29sb3I6dGhpcy5fdGV4dF9jb2xvdXIsd2lkdGg6dGhpcy5fbG9nb19zaXplWzBdLGhlaWdodDp0aGlzLl9sb2dvX3NpemVbMV0sXHJcblwibWFyZ2luLWxlZnRcIjp0aGlzLl9sb2dvX3NpemVbMF0vMiotMSxcIm1hcmdpbi10b3BcIjp0aGlzLl9sb2dvX3NpemVbMV0vMixcImJhY2tncm91bmQtY29sb3JcIjp0aGlzLl9iYWNrZ3JvdW5kfSkuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfcGVyY2VudGFnZVwiKS5hcHBlbmRUbyh0aGlzLl9vdmVybGF5KSk7YnJlYWs7Y2FzZSBcImxpbmVcIjp0aGlzLl9saW5lX2xvYWRlcj1KUShcIjxkaXY+XCIpLmFkZENsYXNzKFwicm95YWxfcHJlbG9hZGVyX2xvYWRlclwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsdGhpcy5fYmFja2dyb3VuZCkuYXBwZW5kVG8odGhpcy5fb3ZlcmxheSk7SlEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInJveWFsX3ByZWxvYWRlcl9wZWdcIikuY3NzKFwiYm94LXNoYWRvd1wiLFwiMCAwIDEwcHggXCIrdGhpcy5fYmFja2dyb3VuZCkuYXBwZW5kVG8odGhpcy5fbGluZV9sb2FkZXIpO0pRKGRvY3VtZW50LmJvZHkpLmNzcyhcInZpc2liaWxpdHlcIixcInZpc2libGVcIik7YnJlYWs7Y2FzZSBcInByb2dyZXNzXCI6dGhpcy5fcHJvZ3Jlc3NfbG9hZGVyPVxyXG5KUShcIjxkaXY+XCIpLmFkZENsYXNzKFwicm95YWxfcHJlbG9hZGVyX2xvYWRlclwiKS5hcHBlbmRUbyh0aGlzLl9vdmVybGF5KSx0aGlzLl9wcm9ncmVzc19sb2FkZXJfbWV0ZXI9SlEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhcInJveWFsX3ByZWxvYWRlcl9tZXRlclwiKS5hcHBlbmRUbyh0aGlzLl9wcm9ncmVzc19sb2FkZXIpLHRoaXMuX3Nob3dfcHJvZ3Jlc3MmJih0aGlzLl9wZXJjZW50YWdlPUpRKFwiPGRpdj5cIikuYWRkQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJfcGVyY2VudGFnZVwiKS50ZXh0KDApLmFwcGVuZFRvKHRoaXMuX292ZXJsYXkpKX10aGlzLl9vdmVybGF5LmFwcGVuZFRvKEpRKGRvY3VtZW50LmJvZHkpKTtcInRleHRcIiE9PXRoaXMuX21vZGUmJlwic2NhbGVfdGV4dFwiIT09dGhpcy5fbW9kZXx8dGhpcy5fdGV4dF9sb2FkZXIuY3NzKFwibWFyZ2luLWxlZnRcIix0aGlzLl90ZXh0X2xvYWRlci53aWR0aCgpLzIqLTEpfSxfbG9hZDpmdW5jdGlvbigpe2lmKChcIm51bWJlclwiPT09dGhpcy5fbW9kZXx8XHJcblwibG9nb1wiPT09dGhpcy5fbW9kZXx8XCJwcm9ncmVzc1wiPT09dGhpcy5fbW9kZSkmJnRoaXMuX3Nob3dfcHJvZ3Jlc3Mpe3RoaXMuX3BlcmNlbnRhZ2UuZGF0YShcIm51bVwiLDApO3ZhciBhPVwiMFwiKyhSb3lhbF9QcmVsb2FkZXIuX3Nob3dfcGVyY2VudGFnZT9cIiVcIjpcIlwiKTtcIm51bWJlclwiPT09dGhpcy5fbW9kZT90aGlzLl9wZXJjZW50YWdlLmNoaWxkcmVuKFwic3BhblwiKS50ZXh0KGEpOnRoaXMuX3BlcmNlbnRhZ2UudGV4dChhKX1KUS5lYWNoKHRoaXMuX2ltYWdlcyxmdW5jdGlvbihhLGIpe3ZhciBkPWZ1bmN0aW9uKCl7Um95YWxfUHJlbG9hZGVyLl9pbWFnZU9uTG9hZChiKX0sZT1uZXcgSW1hZ2U7ZS5zcmM9YjtlLmNvbXBsZXRlP2QoKTooZS5vbmxvYWQ9ZCxlLm9uZXJyb3I9ZCl9KTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Um95YWxfUHJlbG9hZGVyLl9vdmVybGF5JiZSb3lhbF9QcmVsb2FkZXIuX2FuaW1hdGVQZXJjZW50YWdlKFJveWFsX1ByZWxvYWRlci5fcGVyY2VudGFnZV9sb2FkZWQsXHJcbjEwMCl9LHRoaXMuX2ltYWdlcy5sZW5ndGg/MUUzKnRoaXMuX3RpbWVvdXQ6MCl9LF9oZXhUb1JnYjpmdW5jdGlvbihhKXtyZXR1cm4oYT0vXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoYSkpP3tyOnBhcnNlSW50KGFbMV0sMTYpLGc6cGFyc2VJbnQoYVsyXSwxNiksYjpwYXJzZUludChhWzNdLDE2KX06bnVsbH0sX2h0bWxlbnRpdGllczpmdW5jdGlvbihhKXtyZXR1cm4gYS50b1N0cmluZygpLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoL1xcXCIvZyxcIiZxdW90O1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoLz4vZyxcIiZndDtcIikucmVwbGFjZSgvIC9nLFwiJm5ic3A7XCIpfSxfYW5pbWF0ZVBlcmNlbnRhZ2U6ZnVuY3Rpb24oYSxjKXtSb3lhbF9QcmVsb2FkZXIuX3BlcmNlbnRhZ2VfbG9hZGVkPWE7YTxjJiYoYSsrLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtzd2l0Y2goUm95YWxfUHJlbG9hZGVyLl9tb2RlKXtjYXNlIFwidGV4dFwiOlJveWFsX1ByZWxvYWRlci5fdGV4dF9sb2FkZXJfb3ZlcmxheS5jc3MoXCJsZWZ0XCIsXHJcbmErXCIlXCIpO2JyZWFrO2Nhc2UgXCJzY2FsZV90ZXh0XCI6dmFyIGI9cGFyc2VJbnQoUm95YWxfUHJlbG9hZGVyLl90ZXh0Lmxlbmd0aCphKi4wMSwxMCk7Um95YWxfUHJlbG9hZGVyLl90ZXh0X2xvYWRlci5jaGlsZHJlbihcInNwYW5cIikuZXEoYikuYWRkQ2xhc3MoXCJsb2FkZWRcIik7YnJlYWs7Y2FzZSBcImxpbmVcIjpSb3lhbF9QcmVsb2FkZXIuX2xpbmVfbG9hZGVyLndpZHRoKGErXCIlXCIpO2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpSb3lhbF9QcmVsb2FkZXIuX3Nob3dfcHJvZ3Jlc3MmJihiPWErKFJveWFsX1ByZWxvYWRlci5fc2hvd19wZXJjZW50YWdlP1wiJVwiOlwiXCIpLFJveWFsX1ByZWxvYWRlci5fcGVyY2VudGFnZS5jaGlsZHJlbihcInNwYW5cIikudGV4dChiKSk7YnJlYWs7Y2FzZSBcImxvZ29cIjpSb3lhbF9QcmVsb2FkZXIuX3Nob3dfcHJvZ3Jlc3MmJihiPWErKFJveWFsX1ByZWxvYWRlci5fc2hvd19wZXJjZW50YWdlP1wiJVwiOlwiXCIpLFJveWFsX1ByZWxvYWRlci5fcGVyY2VudGFnZS50ZXh0KGIpKTtcclxuUm95YWxfUHJlbG9hZGVyLl9sb2dvX2xvYWRlcl9tZXRlci5jc3MoXCJib3R0b21cIixhK1wiJVwiKTticmVhaztjYXNlIFwicHJvZ3Jlc3NcIjpSb3lhbF9QcmVsb2FkZXIuX3Nob3dfcHJvZ3Jlc3MmJihiPWErKFJveWFsX1ByZWxvYWRlci5fc2hvd19wZXJjZW50YWdlP1wiJVwiOlwiXCIpLFJveWFsX1ByZWxvYWRlci5fcGVyY2VudGFnZS50ZXh0KGIpKSxSb3lhbF9QcmVsb2FkZXIuX3Byb2dyZXNzX2xvYWRlcl9tZXRlci53aWR0aChhK1wiJVwiKX1Sb3lhbF9QcmVsb2FkZXIuX2FuaW1hdGVQZXJjZW50YWdlKGEsYyl9LDUpLDEwMD09PWEmJlJveWFsX1ByZWxvYWRlci5fbG9hZEZpbmlzaCgpKX0sX2ltYWdlT25Mb2FkOmZ1bmN0aW9uKGEpe3RoaXMuX2ltYWdlX3F1ZXVlLnB1c2goYSk7dGhpcy5faW1hZ2VfcXVldWUubGVuZ3RoJiZ0aGlzLl9pbWFnZV9xdWV1ZVswXT09PWEmJnRoaXMuX3Byb2Nlc3NRdWV1ZSgpfSxfcmVRdWV1ZTpmdW5jdGlvbigpe1JveWFsX1ByZWxvYWRlci5faW1hZ2VfcXVldWUuc3BsaWNlKDAsXHJcbjEpO1JveWFsX1ByZWxvYWRlci5fcHJvY2Vzc1F1ZXVlKCl9LF9wcm9jZXNzUXVldWU6ZnVuY3Rpb24oKXswIT09dGhpcy5faW1hZ2VfcXVldWUubGVuZ3RoJiYodGhpcy5fbG9hZGVkKyssUm95YWxfUHJlbG9hZGVyLl9hbmltYXRlUGVyY2VudGFnZShSb3lhbF9QcmVsb2FkZXIuX3BlcmNlbnRhZ2VfbG9hZGVkLHBhcnNlSW50KHRoaXMuX2xvYWRlZC90aGlzLl90b3RhbCoxMDAsMTApKSx0aGlzLl9yZVF1ZXVlKCkpfSxfbG9hZEZpbmlzaDpmdW5jdGlvbigpe3RyYW5zaXRpb25FbmQodGhpcy5fb3ZlcmxheSxmdW5jdGlvbihhLGMpe1JveWFsX1ByZWxvYWRlci5fb3ZlcmxheSYmKFJveWFsX1ByZWxvYWRlci5fb3ZlcmxheS5yZW1vdmUoKSxSb3lhbF9QcmVsb2FkZXIuX292ZXJsYXk9bnVsbCl9KTt0aGlzLl9vdmVybGF5LmFkZENsYXNzKFwiY29tcGxldGVcIik7SlEoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoXCJyb3lhbF9wcmVsb2FkZXJcIik7dGhpcy5fb25fY29tcGxldGUmJnRoaXMuX29uX2NvbXBsZXRlKCl9LFxyXG5jb25maWc6ZnVuY3Rpb24oYSl7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLm1vZGUmJih0aGlzLl9tb2RlPWEubW9kZSk7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLnRleHQmJih0aGlzLl90ZXh0PWEudGV4dCk7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLnRleHRfY29sb3VyJiYodGhpcy5fdGV4dF9jb2xvdXI9YS50ZXh0X2NvbG91cik7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLnRpbWVvdXQmJih0aGlzLl90aW1lb3V0PXBhcnNlSW50KGEudGltZW91dCwxMCkpO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5zaG93UHJvZ3Jlc3MmJih0aGlzLl9zaG93X3Byb2dyZXNzPWEuc2hvd1Byb2dyZXNzPyEwOiExKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEuc2hvd1BlcmNlbnRhZ2UmJih0aGlzLl9zaG93X3BlcmNlbnRhZ2U9YS5zaG93UGVyY2VudGFnZT8hMDohMSk7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmJhY2tncm91bmQmJih0aGlzLl9iYWNrZ3JvdW5kPWEuYmFja2dyb3VuZCk7XCJ1bmRlZmluZWRcIiE9PVxyXG50eXBlb2YgYS5sb2dvJiYodGhpcy5fbG9nbz1hLmxvZ28pO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5sb2dvX3NpemUmJih0aGlzLl9sb2dvX3NpemU9YS5sb2dvX3NpemUpO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5vbkNvbXBsZXRlJiYodGhpcy5fb25fY29tcGxldGU9YS5vbkNvbXBsZXRlKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEuaW1hZ2VzJiYodGhpcy5faW1hZ2VzPWEuaW1hZ2VzKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEuY29va2llJiYodGhpcy5fY29va2llPWEuY29va2llKX19O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtKUShkb2N1bWVudCkucmVhZHkoUm95YWxfUHJlbG9hZGVyLl9pbml0KX0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9yb3lhbF9wcmVsb2FkZXIubWluLmpzIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjIuNFxuICogaHR0cDovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA1LTIwVDE3OjIzWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrXG4vLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcbi8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCBcInVzZSBzdHJpY3RcIiBjYWxsIGNoYWlucy4gKCMxMzMzNSlcbi8vXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMi4yLjRcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIlwiLFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xuXG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0XHQoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6XG5cblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRcdHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cdFx0cmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzQXJyYXk6IEFycmF5LmlzQXJyYXksXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxuXHRcdHZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpO1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzQXJyYXkoIG9iaiApICYmICggcmVhbFN0cmluZ09iaiAtIHBhcnNlRmxvYXQoIHJlYWxTdHJpbmdPYmogKSArIDEgKSA+PSAwO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIGtleTtcblxuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRcdGlmICggb2JqLmNvbnN0cnVjdG9yICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLCBcImNvbnN0cnVjdG9yXCIgKSAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwoIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgfHwge30sIFwiaXNQcm90b3R5cGVPZlwiICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd25cblx0XHRmb3IgKCBrZXkgaW4gb2JqICkge31cblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMCwgaU9TPDYgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0dmFyIHNjcmlwdCxcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcblxuXHRcdGNvZGUgPSBqUXVlcnkudHJpbSggY29kZSApO1xuXG5cdFx0aWYgKCBjb2RlICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZiggXCJ1c2Ugc3RyaWN0XCIgKSA9PT0gMSApIHtcblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXHRcdFx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGF2b2lkIHRoZSBET00gbm9kZSBjcmVhdGlvbiwgaW5zZXJ0aW9uXG5cdFx0XHRcdC8vIGFuZCByZW1vdmFsIGJ5IHVzaW5nIGFuIGluZGlyZWN0IGdsb2JhbCBldmFsXG5cblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbi8vIEpTSGludCB3b3VsZCBlcnJvciBvbiB0aGlzIGNvZGUgZHVlIHRvIHRoZSBTeW1ib2wgbm90IGJlaW5nIGRlZmluZWQgaW4gRVM1LlxuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmpzaGludHJjIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8ganVzdCBkaXNhYmxlIEpTSGludCBmb3IgdGhlc2Vcbi8vIHRocmVlIGxpbmVzLlxuLyoganNoaW50IGlnbm9yZTogc3RhcnQgKi9cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cbi8qIGpzaGludCBpZ25vcmU6IGVuZCAqL1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjFcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTUtMTAtMTdcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXHRyZXNjYXBlID0gLyd8XFxcXC9nLFxuXG5cdC8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBuaWRzZWxlY3QsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdG5pZHNlbGVjdCA9IHJpZGVudGlmaWVyLnRlc3QoIG5pZCApID8gXCIjXCIgKyBuaWQgOiBcIltpZD0nXCIgKyBuaWQgKyBcIiddXCI7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBuaWRzZWxlY3QgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZGl2LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCAocGFyZW50ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHBhcmVudC50b3AgIT09IHBhcmVudCApIHtcblx0XHQvLyBTdXBwb3J0OiBJRSAxMVxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZGl2LmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gbSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRkaXYucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGRpdiwgXCJkaXZcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGRpdiwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGRpciBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFtcXHctXSspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCBwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3R3aGl0ZSA9ICggL1xcUysvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XG5cblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHQvLyBzdGF0ZSA9IFsgcmVzb2x2ZWQgfCByZWplY3RlZCBdXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblxuXHRcdFx0XHQvLyBbIHJlamVjdF9saXN0IHwgcmVzb2x2ZV9saXN0IF0uZGlzYWJsZTsgcHJvZ3Jlc3NfbGlzdC5sb2NrXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8XG5cdFx0XHRcdCggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC5cblx0XHRcdC8vIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBBZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZG9uZSggdXBkYXRlRnVuYyggaSwgcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICkgKVxuXHRcdFx0XHRcdFx0LmZhaWwoIGRlZmVycmVkLnJlamVjdCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0O1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cdGlmICggIXJlYWR5TGlzdCApIHtcblxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcblx0XHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyBTdXBwb3J0OiBJRTktMTAgb25seVxuXHRcdC8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdFx0XHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xufTtcblxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XG5qUXVlcnkucmVhZHkucHJvbWlzZSgpO1xuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2hhaW5hYmxlID9cblx0XHRlbGVtcyA6XG5cblx0XHQvLyBHZXRzXG5cdFx0YnVsayA/XG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHQvKiBqc2hpbnQgLVcwMTggKi9cblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdHJlZ2lzdGVyOiBmdW5jdGlvbiggb3duZXIsIGluaXRpYWwgKSB7XG5cdFx0dmFyIHZhbHVlID0gaW5pdGlhbCB8fCB7fTtcblxuXHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlIHByb3BlcnR5XG5cdFx0Ly8gY29uZmlndXJhYmlsaXR5IG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHQvLyBkZWxldGVkIHdpdGggdGhlIGRlbGV0ZSBvcGVyYXRvclxuXHRcdH0gZWxzZSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHR9ICk7XG5cdFx0fVxuXHRcdHJldHVybiBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdH0sXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdGlmICggIWFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSwgbmFtZSwgY2FtZWwsXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5yZWdpc3Rlciggb3duZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIFRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xuXHRcdFx0XHRcdG5hbWUgPSBbIGtleSwgY2FtZWwgXTtcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3XG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLCBjYW1lbEtleTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApIHx8XG5cblx0XHRcdFx0XHQvLyBUcnkgdG8gZmluZCBkYXNoZWQga2V5IGlmIGl0IGV4aXN0cyAoZ2gtMjc3OSlcblx0XHRcdFx0XHQvLyBUaGlzIGlzIGZvciAyLjIueCBvbmx5XG5cdFx0XHRcdFx0ZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCkgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YVVzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywgY2FtZWxLZXksIHZhbHVlICk7XG5cblx0XHRcdFx0Ly8gKi4uLiBJbiB0aGUgY2FzZSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWlnaHQgX2FjdHVhbGx5X1xuXHRcdFx0XHQvLyBoYXZlIGRhc2hlcywgd2UgbmVlZCB0byBhbHNvIHN0b3JlIGEgY29weSBvZiB0aGF0XG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cblx0XHRcdFx0aWYgKCBrZXkuaW5kZXhPZiggXCItXCIgKSA+IC0xICYmIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHQhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHdlZW4uY3VyKCk7IH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7IH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFtcXHc6LV0rKS8gKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldCA9IHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDJcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjMsIFNhZmFyaTw9NS4xXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUU5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gU3VwcG9ydCAoYXQgbGVhc3QpOiBDaHJvbWUsIElFOVxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDw9NDIrXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgaW4gRkYgYnV0IGRvbid0IGJsb2NrIElFIHJhZGlvIGV2ZW50cyAoIzM4NjEsIGdoLTIzNDMpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJlxuXHRcdFx0KCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgfHwgaXNOYU4oIGV2ZW50LmJ1dHRvbiApIHx8IGV2ZW50LmJ1dHRvbiA8IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogKCBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGRldGFpbCBldmVudFBoYXNlIFwiICtcblx0XHRcIm1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIiApLnNwbGl0KCBcIiBcIiApLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdCggXCIgXCIgKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiAoIFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBcIiArXG5cdFx0XHRcInNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XG5cblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICtcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLVxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICtcblx0XHRcdFx0XHQoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLVxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lPDI4XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaXhIb29rLmZpbHRlciA/IGZpeEhvb2suZmlsdGVyKCBldmVudCwgb3JpZ2luYWxFdmVudCApIDogZXZlbnQ7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzotXSspW14+XSopXFwvPi9naSxcblxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fFxuXHRcdFx0ZWxlbS5hcHBlbmRDaGlsZCggZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGJvZHlcIiApICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gS2VlcCBkb21NYW5pcCBleHBvc2VkIHVudGlsIDMuMCAoZ2gtMjIyNSlcblx0ZG9tTWFuaXA6IGRvbU1hbmlwLFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcblx0XHQvLyBXZSBoYXZlIHRvIHByZS1kZWZpbmUgdGhlc2UgdmFsdWVzIGZvciBGRiAoIzEwMjI3KVxuXHRcdEhUTUw6IFwiYmxvY2tcIixcblx0XHRCT0RZOiBcImJsb2NrXCJcblx0fTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYWN0dWFsIGRpc3BsYXkgb2YgYSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBub2RlTmFtZSBvZiB0aGUgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcbiAqL1xuXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW1bIDAgXSwgXCJkaXNwbGF5XCIgKTtcblxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcblx0Ly8gc28gdXNlIFwiZGV0YWNoXCIgbWV0aG9kIGFzIGZhc3Qgd2F5IHRvIGdldCByaWQgb2YgdGhlIGVsZW1lbnRcblx0ZWxlbS5kZXRhY2goKTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuLyoqXG4gKiBUcnkgdG8gZGV0ZXJtaW5lIHRoZSBkZWZhdWx0IGRpc3BsYXkgdmFsdWUgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHREaXNwbGF5KCBub2RlTmFtZSApIHtcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxuXHRcdGRpc3BsYXkgPSBlbGVtZGlzcGxheVsgbm9kZU5hbWUgXTtcblxuXHRpZiAoICFkaXNwbGF5ICkge1xuXHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiIHx8ICFkaXNwbGF5ICkge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcblx0XHRcdGlmcmFtZSA9ICggaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSApXG5cdFx0XHRcdC5hcHBlbmRUbyggZG9jLmRvY3VtZW50RWxlbWVudCApO1xuXG5cdFx0XHQvLyBBbHdheXMgd3JpdGUgYSBuZXcgSFRNTCBza2VsZXRvbiBzbyBXZWJraXQgYW5kIEZpcmVmb3ggZG9uJ3QgY2hva2Ugb24gcmV1c2Vcblx0XHRcdGRvYyA9IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudDtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUVcblx0XHRcdGRvYy53cml0ZSgpO1xuXHRcdFx0ZG9jLmNsb3NlKCk7XG5cblx0XHRcdGRpc3BsYXkgPSBhY3R1YWxEaXNwbGF5KCBub2RlTmFtZSwgZG9jICk7XG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XG5cdFx0ZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXHR9XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHR9XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcblx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXG5cdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuM1xuXHRcdFx0Ly8gV2UncmUgY2hlY2tpbmcgZm9yIGJveFNpemluZ1JlbGlhYmxlVmFsIGhlcmUgaW5zdGVhZCBvZiBwaXhlbE1hcmdpblJpZ2h0VmFsXG5cdFx0XHQvLyBzaW5jZSB0aGF0IGNvbXByZXNzZXMgYmV0dGVyIGFuZCB0aGV5J3JlIGNvbXB1dGVkIHRvZ2V0aGVyIGFueXdheS5cblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IG9ubHksIEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gMzdcblx0XHRcdGlmICggYm94U2l6aW5nUmVsaWFibGVWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRtYXJnaW5EaXYgPSBkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblx0XHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2ICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcblx0Ly8gRmFsbCBiYWNrIHRvIHN0eWxlIGV2ZW4gd2l0aG91dCBjb21wdXRlZFxuXHQvLyBjb21wdXRlZCBpcyB1bmRlZmluZWQgZm9yIGVsZW1zIG9uIGRvY3VtZW50IGZyYWdtZW50c1xuXHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgKCMxMjUzNylcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gU29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuYWNjZXNzKFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXG5cdFx0XHRcdFx0ZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFQcml2LnNldChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFwib2xkZGlzcGxheVwiLFxuXHRcdFx0XHRcdGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3Bcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8XG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXHRcdFx0XHRcdGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5SaWdodCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpblJpZ2h0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiBzd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgdGltZXJJZCxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3Rcblx0XHQvLyBjaGFuZ2UgdGhlIG92ZXJmbG93IGF0dHJpYnV0ZSB3aGVuIG92ZXJmbG93WCBhbmRcblx0XHQvLyBvdmVyZmxvd1kgYXJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gU2V0IGRpc3BsYXkgcHJvcGVydHkgdG8gaW5saW5lLWJsb2NrIGZvciBoZWlnaHQvd2lkdGhcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxuXHRcdGNoZWNrRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID9cblx0XHRcdGRhdGFQcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93XG5cdFx0XHRcdC8vIGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoIGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkgKSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5vZmYgPyAwIDogdHlwZW9mIG9wdC5kdXJhdGlvbiA9PT0gXCJudW1iZXJcIiA/XG5cdFx0b3B0LmR1cmF0aW9uIDogb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgP1xuXHRcdFx0alF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8PTIuM1xuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8PTExK1xuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGFiaW5kZXggP1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmIGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0XHRcdDAgOlxuXHRcdFx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIFwiIFwiICsgY3VyVmFsdWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBnZXRDbGFzcyggZWxlbSApICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZyxcblx0cnNwYWNlcyA9IC9bXFx4MjBcXHRcXHJcXG5cXGZdKy9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cblxuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApIDpcblxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGpRdWVyeS50ZXh0KCBlbGVtICkgKS5yZXBsYWNlKCByc3BhY2VzLCBcIiBcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/XG5cdFx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCA6IG9wdGlvbi5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09PSBudWxsICkgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSwgU2FmYXJpXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudCgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSApLmVuZCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdC8vIFVzZSBPUiBpbnN0ZWFkIG9mIEFORCBhcyB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZSBpZiBlaXRoZXIgaXMgdHJ1ZVxuXHQvLyBTZWUgdGlja2V0cyAjMTA0MDYgYW5kICMxMzEzMlxuXHRyZXR1cm4gZWxlbS5vZmZzZXRXaWR0aCA+IDAgfHwgZWxlbS5vZmZzZXRIZWlnaHQgPiAwIHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPiAwO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHR2YXIgcGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICksXG5cdFx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0galF1ZXJ5LnRyaW0oIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ym94ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpPDctOCssIENocm9tZTwzNy00NCtcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSwgbnVsbCApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXHRzaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGg7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5yZXR1cm4galF1ZXJ5O1xufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXG5cdFx0ZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==